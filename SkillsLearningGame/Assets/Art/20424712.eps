%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2010.w301.n001.18B.p1.18-temp_01.eps
%%Creator: Adobe Illustrator(R) 23.0
%%For: Maksim
%%CreationDate: 11/17/2020
%%BoundingBox: 0 0 1315 3046
%%HiResBoundingBox: 0 0 1315 3045.6299
%%CropBox: 0 0 1315 3045.6299
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 23.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 23.0.2 x567 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 56 128 8%%BeginData: 7508 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFD72FFA8FD34FFA87D2E2705597EFD2FFFA8
%2E05F8050005F8052EFD2EFFFD04050005050500052EA9FD2BFF5200F805
%F805F8050005F800007EFD29FF7E050005272E27A0A0A17CA15152AFFD29
%FF84F805277D517575C9A0A0A0C2A1FD2AFF520552A87D76517676A07CA0
%A0A1CAFD29FF5906592F2F0D2F0005F8050005052E7EFD28FF2F302F300D
%360D06F80500050005005AFD27FFA82F072F532E527D5252275127512752
%84FD28FF5A0D067E527599C9A0C975FD04A0FD2AFF7E7D2E7D277575A0A0
%7551A0A0A0A8FD2AFFCA7C5A534BA0A0C3FD04A0A7FD2CFF757D59522859
%7652517C7CCFFD2CFFA1267D7D52527575A076C9FD2DFF7627528452756E
%A0A0A0A1FD2DFF75277C7D2E00514B7676FD2DFFA8757D4BA02727052727
%A8FFFFFFA8A8A9A8FD18FFAFA8A8FFA8FD08FFAF51A15951A0A0767575A1
%FFFFA8A8FD057DFD16FFFD047D527D7DA8A8A8595327282E27517C4BFD05
%A076527EFD057D597D59A8A9FD12FFFD057D847D7D7D845205F805057D2E
%27275175A1A0A07C76282E2E7D7DA87D847D7D7DA8FD11FF7D27F82E53FD
%087D520005055252532728277C525252530005002E52FD057D59FD10FFA8
%52000506FD047DA87D7D597D532F0628052E527D527D597D522E00FD0405
%2F2EFD067DFD0FFF7D0505F82E527D525327280527F806072F0D2F060605
%27F805F805F805F80606300706F8597D7D527DA8FD0EFF7D2EF8062F7D53
%A852527D7D5227052F0D302F302F302F2EFD05052F2F302F300605055252
%2E7DFD0FFF7D522E2E5952597D2E527D52590505062F0D2F0D2F0D300D2F
%0D2806300D300D2F0D28000005A852A8FD0FFF7D59525952597D532E7D52
%A87D2EF8052F300D302F300D302F3006282F300D302F2F280500277D7D7D
%FD0EFFA87D5959527D7D7D277D527D7D7D0505F8280D2F072F0D2F072F0D
%2F052F0D2F0D300D2F0005007D527DFD0FFF7D7D527D7D7D52FD047DA87D
%280505052F2F302F2F0D302F302F2F2E302F2F2F3006050505527D7DFD0F
%FFA82E282752527D7D7D527D7D7D000500050630072E062F0D2F0D30062F
%0D2F0628062F0005F8527D59FD10FF59F805277D52FD047DA852FD04052F
%2F2E06302F300D302F2806302F300D2F060500052E7D52FD10FF0505F859
%7D7D5259527D7D2EF8050005062F0D300D2F0D2F072F052F072F0D2F0728
%F805F82E5253A8FD0EFFA80500277DA87D7D52597D7DFD0505FD0A2F2806
%30FD042FFD04052E7D52FD0FFF7DF805057D597D7D7D527D520500270005
%062F2F2F072F0D2F062E0506062E0606FD0405F8527D527DFD0EFF2E0005
%2727522E7D7D7D5228FD0705280528FD0405F80500050027050500050005
%2EA87DA8FD0EFFA827754B75757627597D7DF805F805F8050005F805F805
%00FD05050005F80527512627045251A7FD10FFA86F7575A0A0C3767D2EFD
%07050027052806FD042F362F2F062E05FFA075757675A0A7FD10FFA7754B
%7575A0A0C27D0500050005F8050006072F0D300D300D2F0D300D300784FF
%764A7575A0A0CAFD10FFA86F754B75A0A0A1FF2EFD06052705300D302F2F
%072F0D2F062F2F0D7EFFFD0475A0A0A7FD10FF7C754B7575A0A0CAFFFF05
%05F8050005F805072F0D2F062F072F0D2F062F07A9CF754B754AA0A0A7FD
%10FFA16F75A0C9A0A0A1FFFF84F8FD06052F2F2F06302F302F2F2F362F30
%AFFFFD047576A0A7FD10FFA77575FD04A0A1FFFFFF2EF8050005F8050630
%062F0D2F062F062F062F2FFFFF7C4B754AA0A0CAFD10FFCA4BFD04A0A1A0
%FFFFFF840500050505F82E2F2F062F0D300D302F2F0785FFFF7CFD0475A1
%CAFD10FFA87575FD04A0A1FD04FF2E00F8050005053006060D2F062F062F
%0D0D84FFFFA14A754B76A0FD12FF75A0A0C9A0A0A1FD05FF27050505F82F
%302F052F0D2F0D2F062F2FFFFFFFA1FD0475C9FD12FF7C4B76272752A7FD
%05FF28F805000506362F0506300D2F0D300684FFFFFFCA4A756FA051A8FD
%11FF0505F805057DA1FD05FF05050005052E062E052F062F0D2F0628A8FF
%FFFFA8514B765152A8FD10FFA82E0605F827587DA8FFFFFF7D05F805F805
%F805F805062F0D300D2FF852FFFFFF7D2E59525959A8FD11FF7E3006052E
%7D52A8FFFFFF7DF80500FD0605300D2F2F30060505AFFFFFA8847DA87D7E
%A8FD11FF5A0505F8527D7DA8FFFFFF2705000500050005F805062F0D2F06
%0605067EFFFFA8597D597D59FD11FFA9842700052E7D2EA8FFFFA8050027
%050500280606052F0D2F062F2F300DA9FFFF7D0505050052FD11FF84FF2E
%000005F80584FFFF7DF8050005000505300D2F062F0D2F06300D2F84FFFF
%FFF805F8F82EFD11FFA9FFA800FD0405FFFFFF7D0500050505525306302F
%302F302F3006597EFD04FF520027F87DFD11FFA8A9A8050005F805A9FFFF
%52F805F805057D7D27052F0D2F0D2F072E7D7DA8FFFFFF75754B7CA1FD12
%FF7EFF2EFD0405FFFFA8F805050500597DA8280506300D302F2F7DA87DA8
%FFFFA8A0757575A1CFFD12FF7E59F8270552CAFF0500F805F805527D7D53
%F8060D2F073028FD047DFFFFA1A0A0757575CAFD13FF52A0A0A1A0CF7D05
%0005050527FD047D27052F0D3006287DA87D84A7A075A0A0C9A7A0A7FD12
%FFA1FD05A0A12EF80500050052FD047D2E050505000505FD047DA175A076
%A0A0FFA0A7FD12FFA175A0A0CAA0CF52FD04052852FD047D53F827050500
%2E7D7D7D84FFCAA1A175CAFFFFCAFD12FFA17575A0A8A7CF59F805F80505
%7D597D59A85200F8FD0405FD047DFFFFFFA1CAFD17FFA0A075C9FFFF7DFD
%04052E537D7D7DA87E00270527002E7D847DA8FD1DFFA1A17CCAFF84F805
%0005057D525952A87E05F805050527597D7DA8FD20FFCFFFA8050005052E
%7D7D5959A8FF05050027002E527D52A8FD22FFA80005F80505FD047DFFA8
%0500050005277D7D7DA8FD23FF270505052E7D7D7DA8FFFF05050027002E
%7D7D7DFD24FF0505F80505532E537DFFFF2E000500050552277DFD24FF2E
%052727514B5227A8FFFF2705275151767576A8FD24FF52514B759AA099A0
%A8FFFF7D4A75757576A0A0FD25FFCF7575757C76A0A1FFFFFFCA99757527
%52527DA8FD24FFA8512705287D5252A8FFFFFF27270005537D7DAFFD24FF
%A80005057D7D847DFFFFFFA8050005287D7D7DFD25FF7D00F82E7D7D597D
%A8FFFF84F805F8527D7D7DFD25FFA800052EA87DA87DFFFFFFA92800052E
%7D52A8FD26FF28F82E52595284FD04FF2705F80500057DFD26FF0505002E
%050584FFFFFFA8270005287D59FD26FF7D00F8277D7D7DFD04FF7DF805F8
%537D7DA8FD25FF2E000552A87D7DA8FFFFFFFD040553A87DA8FD24FFA8F8
%0500FD047DA8FFFF7D00F805057D7D7D84FD24FF52050027FD047DA8FFFF
%59F80500277D7D7DA8FD24FF53F805007D7D7D52A8FFFF59000005007D7D
%7D84FD24FF7D050027FD047DA8FFFFA8000500277D7D7DFD25FFA8F80500
%FD047DA8FFFFA805000500595252A8FD24FFA8270005527D527DA8FFFFFF
%FD040553A852FD26FF0505007D7D5953FD04FF52F805007D5959A8FD25FF
%53002752A8527DFD04FF59050505597D59FD26FF520505597D597DFD04FF
%84F805007D597DFD26FF84F805527D52A8FD04FFA8050505537D7DFD26FF
%A805F8527D537DFD05FF0505F859527DFD27FF050552A852A8FD05FF5200
%27272F538584FD25FF2E002E525984FD05FF520000050506060D59FD24FF
%520506302F305AFD04FF7EF82F0D050006062F2F2F84FD21FF7D0506052F
%070753FFFFFFA82E0528F805F805052E0506A8FD20FF7D2F0605052E2F2F
%2F5AA9FFFF52F805050500FD0405FD22FF0505F805F805062E0653FFFFA8
%7D59592828002E2E7DFD22FF840527F8050005000527FD30FFA87D2E2800
%05F87DFDFCFFFDFCFFFDFCFFFDA5FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c145 79.163499, 2018/08/13-16:40:22        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:MetadataDate="2020-11-17T07:19:17+01:00"
   xmp:ModifyDate="2020-11-17T07:19:17+01:00"
   xmp:CreateDate="2020-11-17T07:19:17+01:00"
   xmp:CreatorTool="Adobe Illustrator CC 23.0 (Windows)"
   xmpMM:InstanceID="xmp.iid:220bfd89-7053-a749-8274-934e6e460f4f"
   xmpMM:DocumentID="xmp.did:220bfd89-7053-a749-8274-934e6e460f4f"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Evolution of robot, man in metal exoskeleton</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Robot evolution, man in metal exoskeleton, artificial intelligence technological progress cartoon vector in blue color Robots development</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>evolution</rdf:li>
     <rdf:li>robot</rdf:li>
     <rdf:li>tech</rdf:li>
     <rdf:li>cartoon</rdf:li>
     <rdf:li>vector</rdf:li>
     <rdf:li>artificial</rdf:li>
     <rdf:li>infographic</rdf:li>
     <rdf:li>exoskeleton</rdf:li>
     <rdf:li>background</rdf:li>
     <rdf:li>intelligence</rdf:li>
     <rdf:li>android</rdf:li>
     <rdf:li>illustration</rdf:li>
     <rdf:li>design</rdf:li>
     <rdf:li>development</rdf:li>
     <rdf:li>computer</rdf:li>
     <rdf:li>human</rdf:li>
     <rdf:li>purple</rdf:li>
     <rdf:li>orange</rdf:li>
     <rdf:li>machine</rdf:li>
     <rdf:li>digital</rdf:li>
     <rdf:li>futuristic</rdf:li>
     <rdf:li>robotic</rdf:li>
     <rdf:li>soldier</rdf:li>
     <rdf:li>isolated</rdf:li>
     <rdf:li>science</rdf:li>
     <rdf:li>smart</rdf:li>
     <rdf:li>template</rdf:li>
     <rdf:li>concept</rdf:li>
     <rdf:li>mechanical</rdf:li>
     <rdf:li>medical</rdf:li>
     <rdf:li>progress</rdf:li>
     <rdf:li>stage</rdf:li>
     <rdf:li>technology</rdf:li>
     <rdf:li>ai</rdf:li>
     <rdf:li>military</rdf:li>
     <rdf:li>cyber</rdf:li>
     <rdf:li>cybernetic</rdf:li>
     <rdf:li>cyborg</rdf:li>
     <rdf:li>engineering</rdf:li>
     <rdf:li>humanoid</rdf:li>
     <rdf:li>technological</rdf:li>
     <rdf:li>future</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Maksim</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="112"
      xmpGImg:height="256"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgBAABwAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq0WUEAkAsaKD3&#xA;NK7fdireKuxV2KuxV2KuxV2KuxV2KuxV2KuJABJNANyTir5b/On/AJyU8yW/mK/8ueTp4bWxsz9X&#xA;m1VFEk8ky7S+kzVRVU/CCFrUVB6ZfDGKsuJlzm6DwDU/MGu6rci61PUbq+ugQRPczSSuCOhDOWO2&#xA;WgOOSS9I/K7/AJyE85eVNUji1e+n1jQZWP1m2u3aaRKj7cMjlnSh3I3HXauQljBbMeYjnyfX/k7z&#xA;r5c836SNU0K6W5t6hZUqPUicgNwkUE8WoQaZjkEObGQkNk8wMnYq7FXYq7FXYq7FXYq7FWOfmPdm&#xA;z8g+YblYVuHi0+4McDEhXf0yFU0INC1Nhk8cSZABhklUSXxx5E8iaSrDUvMs0QCN+404urciv7Uv&#xA;Emo8F799tszZ6fLdCJdfjnj5khP9C8x+VvK9y/1tUtYboOy+lGX/AHgYE/ZFej/wzTarQaniuQ58&#xA;tw7vTa7SxiBE+/Y806l/Mz8sr2Nku7hJEYFWSa1lcMD1FPTYU2zGGjzjl97kHW6eXP7v2Pbvye86&#xA;+R9T8v2uhaBe25m05GQWMRIYRhiQwVgD3zYY45OG5jdwJyx8VQOz0PJIdirsVdirsVdirsVdirsV&#xA;Yt+Z+g6lr3kjUtN00cryQRvHFUD1PSkWQpU0FSF298ytHlEMokeTj6rGZ4yBzfNB8qarbR3Nrqdn&#xA;LY6k0Pq6bDcK0RkILKwIYdzHRfv6ZtNRr9/3ZBrm63Bo9vWCL5LLHyV5b81WK/WJJopoqsFQ8WAY&#xA;UrRw30g985rU9sZ5GpCOz0ODsjBw3Ey3QB/J7yqurSWD6hdR/ug8bs8Q+MmnHeMV28Mx/wCU8ncP&#xA;x8W3+ScffL7P1PY/yC/LHS/LeqX9/bzy3DpH6atIEFDMRXdQDsI9vmczMGvllgYkAC7cXLoI4pCQ&#xA;JL2/JsXYq7FXYq7FXYq7FXYq7FXYq8f/AOch5YNPstJ1cqjyo0tu0L9HV+JUmm9EcA17VymUpRyR&#xA;Mee/ybQIyxyEuW3zeUywyaTJa6rZcolvD6rRSsHo8i83jJHWu56nepw6jwSeOcSRXOO3u2XT+KBw&#xA;QkAb5S+1OdIudd1Im5MloIgxADRlmSh22DA7e7Zp+KPcfn+x2/DO+Y+X7XvfkLTRZ+XoZGoZrs+t&#xA;IQKddlH/AAIrm00kOGHvdZqp8U/cyLMlxnYq7FXYq7FXYql2seYtI0hAb64EbsKpEKs7fJRv9OKp&#xA;Ev5n+XC/EpcqP5yi0/ByfwxRacWnmzy5dQNNHqEKxxjlJ6rCIqPEiTjt74raRar+c/5V6WSt35ns&#xA;Cy/aW3l+ssKdiIBIa5IQLE5Yjq8n/MDzz5c87+YPQSkmkaVb8oUnJiaZ5gkof034OgIpxDCu1cxZ&#xA;7ZRewA+1yYerEQNyT9jDLjyreeafKeic7t7JouTzwRmiCUn4OzN8H2R1pXMcaw45EAAxsuRLRDJG&#xA;JJMZUPmj/J/k1NI1GG58za3fW+jiVYZvSkj5n1XEaM8oVmEfJxyoQwG+1McWWGSYHBEWjLhnjhfH&#xA;I0941z8xrDTn+paTCtyYQE9WtIVoKUXj9qn3ZsAHCJS2z/Ne9Dj65Yxuh6mFmQgfJudcKLZvonmD&#xA;TNatzNZSVK09WFhR0J/mH8RgSmWKuxV2KoPWdUttJ0m71O6NLezieaSgJNEFewJxQTT4s8x/mr5s&#xA;1j8w5THcsLX656It0C/EqsUJqQx9wOlKbZl4cQJAPVwcueQuuj0uDVIBbQGdmMrwJNIyxuygMPtM&#xA;VBVRUHqcxqcsSSi//MDyKvK1uNRiuVkBVoo0e4Rgdip9NXU1yQgWJyxeXa7oflPVZWuvLLzWytIY&#xA;3gmSkPILy+AlvUUexB9qZnafTymOjr8+WETtaZG8ku3V/Mtpcz3sdI7fVdNZfVoooOafAQvUkgj5&#xA;ZHLopxFVY+bZj1cSbuim2keddF00tAPM831X7aLJZhgSahkYCHntQb8zXNbLQwP8LsIa+Y/i+xB+&#xA;ZvzI0SeF4UubvWmqHhjlWO3s1dSGUtGqK8oUj7MlR+vLMWljA2BTXm1kpiib+5j3lfzP52il5add&#xA;SPbl6vHcgPbjepUV+z16R0OZ2PSnJyDgnU8HV6hof5g6fd30Ol6jxtNRmUeid/RlbkUopO6sWU0U&#xA;+25O2UZ9OcZrm5WHUCY7me6Brp0PVYL9pRHArBbjkaK0TH4ga/ePfMdyLe6YGTsVdirF/wAzFaTy&#xA;VqMCtw+sKsRfuAzgVwhBGz5fTyRbwa/cat9VZLidi/Gkkghlf7bxBI2R6t8SlpFpXcCmZEctDbm4&#xA;ksNmynerJctZNpUcZXUNZT6ssKHkLWyUcHkdq0+BHJ67u3EV65UO9ulyrvTW1t5ZVljhmFraxO0M&#xA;UUEaDZdviLiQH6AMDIB4JpF1HYazPaqw+ru5VTX9qJjxNSK/EAR9ObLS5eGTqs0LDNc3zrFC5srS&#xA;5WlxCkuxALqCQD4E7j6MrnijLmGUZkcikx0PSrfV7dfqymCZG4Bi7ASoQ3diDVa7EZhnTQjkArY/&#xA;e5AzSMDvuE+VVRQiAKqiiqBQADsBmeABycYm2H+cYfTvIZgx5NyUDw40ao+mQ5p9cPW5+nPpevfl&#xA;dDpNxB5T164tI5LuO/i+tXLj1JmZZWiDGRuT/b4t1/DNVImyHaYwCAX1llTkOxV2KoDXtGh1nS5t&#xA;PmkeJZaUljpyVlIYH4gQdxipfEtj5y1abzsLPT0trpXvpI7a5aOVWeNnZTMVEjBaxtypuB75kGIp&#xA;wozPFs9StZIoLyQXURhvLogeux5pIFrwRHoKBamiEDud6k5SXJCw36WHl+41KU0jjSe7Fd/hZmlU&#xA;fSCMNWVuhb5sSaXn6tS0iN6vI9K13J+ZpmUDTri9DMl5xEMCqXUcXnf7II2rx2rXrm9jOZAAHxdc&#xA;YxBsoiBHSILJIZXFeTkAVqa9Bl8QQNzbUTZQuoMBc2C03ac70HaJ8o1B3j/WbcQ2PuRFzC8qAJI0&#xA;TqeSsviOxHcZdOJI2NNcTTEvNspd7dZeH1lAQ4Qkilev00zU60kkXzc3Tjbbk9A/KzUGXyh6HqgX&#xA;EWpwmGImr+kZYGLBT2qW3pTNZkG7s8J9PxfZ0MolhjlHSRQw+RFcocpfirsVSPz0+sL5L1w6NA1z&#xA;qxsbhbGBKcmlaMheNSKkE1p36YY82M7o0+HPJGl63pWuWmsvZCRIkdo0klWOvqRMoJoJGH2v5cGb&#xA;WYxcSd2GDRZTUgNve9ftNbgv7dINVsnsjdUSMTDlBKx6CKagBJ/ZDBWPYbZHHmjP6S3ZMUofUKYd&#xA;+auqXOk6BHoSsDBesBDKD8a28PEtEw7kHjRu4qDvucjGLNuJmNCnkR4iFSBuzEEnfoF/rl7isktv&#xA;NxarS2oMgpyaORkFPEijdMzRre8faQ450/mrP5rHBXWzdga7+sQB8zTLPzndE/6YsfA8x8glk+uX&#xA;8rJMLOIx27cgyh2ALClGcNmPPPIkGhs2RxgCr5qg8z3fUw2ykV2pIenXrIcl+cl1AR4A7yoX2n+Y&#xA;J3F3LYzD11WSMJE3FY2UMhUAH4SrVB+nMHJqYGW5ALlw00+GxEke56j+UGnPceW5tNmBhvbrUStm&#xA;JPhcStHEI3UNTo3fp47Zj5M0bG4crBhlwnYvr7SIriHSbKK5UJcxwRLOgPIB1QBgG7798i3IvFXY&#xA;q7FXyh55dJfOmtmIfD9euFUDvSQjanyzR5j6z73eYR6B7mU+XrKTUdOtNPu4VUzhbZopwOBVvhHM&#xA;GuxHWoyEL4hXNlOuE3uHmH/ORHkHV/LPm2KYI82g3EESabdzOZArRp++hLOftepycA12O3TbpsJ9&#xA;NdXldQPVfR5KTUKWeoruorVfo2GXOOyDyvpelXyXH1hDLJGwoCWUcWGxopG9Qe+Z2jwwnfF0cbUZ&#xA;JRqmSCy0uzZFjto/WUAoEQNJQ9Kndh9JzYDHjjyG7imUzzKv685+L0G+RZOX66fjlvEe5hQ70w8p&#xA;eX9H8webdK0+9sFnS5vbdLyJl4O0RkHqVkQhqcA26tmLqIQMJGqIDfgMuOIvYlnv5wCJPPt9bQxJ&#xA;DDaxW0MSIAoCi3QgUHgGoPbOB1Z/eF7rSD92Ef8Al8lnLPp00dui3K3EcTuqjkSHXv13BGU4/qHv&#xA;bsn0n3PojN86J2KuxV2KvnLVNIs7f8yNahWMIlvK0sMRPKhk4ty3J/nzSZ41Mu7wSuATaN2R1dft&#xA;KQw+Y3ykFtIekfmv5CtvPPki/wBDcKLwr6+mTNsI7qMExmvYNUo3+STnRxlRecyQ4hT4Bu7S5s7u&#xA;a0uomhureRop4XFGSRCVZWHYgihzLdcnnkqUrqM0f7LxE/SrCn6zmd2efWfc42qHp+LJo5ZnurxI&#xA;gKrKo5v0UCCPsDU718Mz8ciZSA73GmBQJ7l9atxF5WWv2PgpXw405fjlv+dv8GHweo/84/aLLfed&#xA;xezKOGlwSTclrxLyD0k69DR2NPbMHtLIY4qPMlzOz4XkvuRf542noefJZaU+tW0MvzoDF4f8V5w+&#xA;sFZHs9Gbgifyih9a+tE8L0P/AMAqP/xrleAXMe9tzmoH3PoPN26R2KuxV2KvlH86/PmtaF+aetGz&#xA;0cVhhgRriRmeORWhRlloqpQUAWnLt1yB7OGUme9Ke0ji9AAQ/wCVXnPXPM17dT6pLDDBbywJCkah&#xA;I6yFuXItybsKfFlOfRQhHbm3abXZMkvVyfW2ZLS+E/8AnIPU7e9/N7zC1vFGkMEsdueChS0kMKpI&#xA;zFaEsZOWZWMbOvzH1FiPl3VLDTriWa4WUlkCJ6YVu4LVqyeGZmlzDHIkuLmxmQoJxpN7DfahqNwi&#xA;yNFI0XCDYFvhK/HQ0p8Pc0zL02QSlI9/RoyxIATlg4iCSWqGDoUQ8qD/AFCqj7szTsNxs4457Hd9&#xA;A/8AOLdzod55P1C8smP6QN16F9E5q6JEtYN+pDK5NfGo7ZzusznIR3B3mixCMT3lLvz8aO58zWEd&#xA;pDNcXUNt6d16cMhVBy5x1enE1Dnoc0+p08pkEO402pjAEFJ/ywuPMVr5k0m3trU20LXTPeT3Cg1j&#xA;kQRemihuXLcsW6AD3x0+kMDxS+C6jV8Y4Y8ur6RzMcR2KuxV2Kvln/nKFNXAtfMUSqljfT3ejuAn&#xA;xILR/TUs3QtKVm6/sgeGbDHlMI8A6iz8XXZ8fFLjPfXyecfl95x8r6H5au7TV1aeae5Mn1UReoGj&#xA;CR8T8VE+0D3zHnEk7NmKcQN32dZ3tloXkOLUGh+r2emaYLmSCioUSGD1GU8aqCAu9Mordy7oW/Pr&#xA;V9RudV1S+1S8obu9mlubgq1KyzOZGNGJPVsyw64m2rDSbm/maGAgOI/UHqVWo2Hw9fHLcWIzNBrn&#xA;MRFlkPl6xvtO+tQ3ClGm9JlCUdmA9QfCR8I9yem3jmdpscoSIO1uNmmJAEJvNE00b24Mtu0qMvJ/&#xA;3gIIoaUY0I6jcZmShYoWL+P6WgSrfYvXP+cWdJTS/MOsxW8srQz2aNOrEcC6SgIaADcB2p8zmp1+&#xA;mjjgCOduz0GYzke6kf8A85E+cLryh5j0+4bTfrlrqkDGKb1vSo9uQrpThJWgdTX3zXQhbnZcnD0S&#xA;T8jfzFk81/mJZ6eNMFrHDDPcySet6h+BOK7FI/2nHjhnCgxx5uI1T6dypyHYq7FXYq8a/PTy+bvy&#xA;Br2iTKSyzHWdBm2o0gkMt1ASf92BXmZR1KttXicybBAl3Cj+guLOJ3j37j9T5CtND1S8uobWG1cy&#xA;ytwUKjkkk9SACRT5YTkiBZOzQMciaA3fZn/OQ3nrT/KX5a3OmwhGvddhfTbC36gQvHwnkp/KkTUH&#xA;+Uy5RjFly80uGNPiRVZ2CqCzMaADcknMpwXuH+B4rL8vfq1qg/S0ERvY7lVBc3HHmyjxDKPTp4ZT&#xA;DKYzsOVLCDCiw7y9qs2o2LSTBVkjfg3HoaAENTt1zodJnOQb8w6TPjETsndhpw1K9gsTK0IuHoZE&#xA;2bioLuAexZEYA467KYYyRzZaTEJzAPJ9DflPfpZ3kmjqOFtNHygTwePr961J+WczKRO5ehjEDYJV&#xA;+fWj6b5plstIkRJJtLrPViwIecU4EqQV+FQ3eu2YGp1UoGomnO0+lhkFyFsc/IrSNC8ueaGlXTWs&#xA;9QuYjYvMzSnlHPIrrRXYr/eQqKgZDDrJykBI2Czy6HHGJMBRfRObBwHYq7FXYqwL855ZU8rW6mMy&#xA;2Ul7Ct8ijkxQBnSg8PUVa5jarJKEbiacnS44zlUhbBNCs7W/066vLMJDHaxhzHx4M3xqlOI8K5qo&#xA;wsE9ztJTogd7yX/nJaDUIPOem2t5M7wwaLavaxMTxTm7q4H+zB39qds6LSisYDzOtleQl595N05L&#xA;zX7YCrpEs05BABrBEZFpv/NTL5HZx4Cy+joovsRRjwVF/ADMVz3zv5gMnl7zNrWnaeTaRWt/c2ix&#xA;8fUPG3lZFDGQtuBmfhzTh9J5usy44k7pv+Wt/fXfne1lu5TKY4nKjYAeooSoUAAfa3yGfLKY9Rts&#xA;08BGWz6K8o2E19rkVtFK1u8kc6i4QkNHWFwGHEo2xPYjMGYsEOxgaILtU8ha/pTIAslzPdO6x+gG&#xA;mb7Q5O78VAHxct/iYgdgaajJppx57u3x6iJ8mc2vkPha6POkiw6hZSevOWWvLmyMyVHTj6Yp1/HM&#xA;uOl9Me8buJLVeqXcdmZ5muG7FXYq7FUJqul2eqWEtldqWhlFDQ0YEbhgfEHITgJCiyhMxNhjOmfl&#xA;2mk6mt/p9+yU484JI1ZWAHFwaFftLt022zGjpOGVguVLV8UaIeB/85i2Yj806Dehd7nT5Lflt0gn&#xA;9T57ermzw8nT6nmHlf5Y2/1jzHDBy4+tDdx8utOUIFdiPHxyc+TXiFl9C+V7XU7jzHp0D+hNE9xG&#xA;XIDxEIrBm2Pqg/CD3GY+zmi3gn546e1j+a/miClFN81xTpvdos9eg68syIcnByj1FS/K+CebzURA&#xA;FMyWySKHYqvwSQs3xAMfsg9sGTkyw/U+pfyjiup9au7i4tvSW3g4hwyuvORhSh2bop/ZzHLmh6vg&#xA;ZOxV2KuxV2KuxV2KuxV89f8AOXWiX2oW/la4tLeSX0ZL6F5FX92pnSIqHalFr6ZpU+OTjkjAEyNN&#xA;OXFKZAiLLxvyL5S80WF6upWsMU01usq+kXpQzLxBJCsNqVzHydo4+Qst+Ls3KNzQe+/kvZ+YrnzJ&#xA;cXOp2rx2tjACk7tE4M0vJeIKJCT8FeibdzuKyx5ozHpTPDPGfU8m/wCcjPKerXX5tapPBbMkV7FZ&#xA;TJcPVY2CQCBiCevEx0+Hwy06mGMeouMdLkySPCEm8keR9Ytr+W7s72MXAg9KRSrgBSV3V1ZW34Zh&#xA;z7TB5R2c3H2VIbmW/ufUn5P6DqemeWnuNSlSW6vpTIvDlRYkHFFJcsTvybr3y+GTjiDVNc8fASLt&#xA;nWTYuxV2KuxV2KuxV2KuxV5d/wA5IaxHpX5Y3F00InlN1bpbgkgLIzE8jQH9kMMjPCMg4SkZzi9Q&#xA;fP8A+WM2q66b6+ub2S2hhZI47a1pGC1OXJmPJ2FP2SaYPymOG1X72MdZlyGya9z6G/J2K+ik1VJb&#xA;6a6gpCVjmWEBG+MEqY442+ID9onphjjjH6RTKU5S+o283/5yx8y3Wm6voVrZQKZmtZ5JrhgzUVnC&#xA;oBSg+Eox3ridLHIbl0YnWTxbR6sD/Km2l1ezvtS1OWSeUSiCMB2SNVChjRYyqV3Fdq/flhwwhtEB&#xA;rhmnPeRJfU35ZWSWflC1jjDLG7yuiszNQGQ1pyJ6kE5FsDKcUuxV2KuxV2KuxV2KuxV5R/zk9c6T&#xA;D+UWopf7zTz20enDofrAlD7fKJXr7ZZj5tOeuF83flbqPmm30u9TRtLiv4RMHlaSYQnkUHwLy67D&#xA;LMgHVowmVbB9T/kpBrDeV5dR1e0jsbu9nbjaxyiYrHF8K83X4eRbkaDtTKJV0cuBNbvHv+cyNW0u&#xA;TUPLmlIobVLeKe5mkHVIJ2RUU/6zQsfanvl2EONqTyDzz8uPL/m670B7jTNb/RlpJcPSH0Vl5MFV&#xA;Wep+VPowzIvkjFGRGxp9peWLOGy8u6bawzPcxRW0QW4koHkqoJkYLQVYmppmOXLCZ4pdirsVdirs&#xA;VdirsVdir5N/5y/8y39x5s0vy4VaOwsbUXi77Sy3DMhegPRFi4ivfll+IbW4eplvSz8praGLyPZS&#xA;RrR7h5pJT4sJWjB/4FBkMnNtwj0voP8AKyR20G4Q/ZS5bifmiEjK24PjL85NX1TVfzQ8yXGpfDcQ&#xA;301qkfZIrZjDEo9uCA179e+ZcBs6/IbkXpv5VIq+RNOKihczsx8T67j9QyjJzcrD9IfT/ldWXy5p&#xA;gbr9WiP0FARlbemeKuxV2KuxV2KuxV2KuxV8tf8AOZWkcNY8t6wAP9It7i0c9x6DrItf+R7Uy/CX&#xA;E1I3BSX8t728tvIlvJ6Mclva+uWPqFXosjuw4lOO1f5sjMbs8RIi+k/yyi4eWi3+/Z5H+4Kv/GuV&#xA;N4fJH/OR2ifo784Na4jhDfLFex+/qQr6h+mRHzKxnZwcwqRZD+XTXKeQbWeG4kjKPKscQCMtWmZQ&#xA;DyRm+01djlU/qbsX0vrnTIfR020h6enDGn/AoBlTkonFXYq7FXYq7FXYq7FXYq8Q/wCcudIN3+W9&#xA;pqCKS+m6jEzt4RTRvG3/AA5TLcR3aNQPS8p/LeVpvIjJShe7aI712nkTrT2kwz5scX0vqbyHD6Xl&#xA;SxFN2Duf9lIxH4ZS5IfO3/OYWi+n5o8t6uBQXtrLZOw/5d5Q+9PEXOX4js4mpG4KVflYn1jyVplu&#xA;PtSX8cYFaVrdqe3tkZ82WL6X17lTkuxV2KuxV2KuxV2KuxV2KsF/PPSBqv5S+ZralTFZm7H/AEaM&#xA;tzt/yKyUDu15RcS+UvJvmJdIsV0ySPiJ547v0ZQRIeAjoEZTxI/cj9mubIaWMuZMZd1OtGpMRsLH&#xA;vfUP5U/mfoGv2sOiKjWWpWsYEcMpFJlUfE0bUHxdyvXvvvTH1Gjlj35j3OZg1ccm3IsZ/wCcsPLl&#xA;5qnkCyvrK3kuLnS75ZHESl2WCSN1dqLvQMEqcoxHdnqI3F8trqV/5ektZNPvhKXX1B6dRwYEUKMP&#xA;iHtmxNY6oiVutFy7w9T/AC6/5yI8xaTdst9czavaOKPZX0x5A02aKYrKy8adPs+1aHBkhiyjb0y/&#xA;HcGePLkxnf1B9E/lp+amiefLa7NlGbW9sWUXVm7rIyhx8LgrSqkgjcDpmDmw8B525+HNxjlTNMob&#xA;3Yq7FXYq7FXYq7FUNqmnW+p6Zd6dc1+rXsMlvPxoDwlQo1Kg70bEIIt8Y+c/yE/Nyzvrll0qTU7G&#xA;xDC1vbQxO0sSvRWEKN63MgglQhOZstRx1Zdf+WMboMFOqa1o7/VNTtJI50+ys6elMtCRv6ilvvGX&#xA;Q1BA7/k0SxC31P8A84veZvMWu+WNTOpFm0+1njj06SRzI9ShMqA0HwLRKDsScxdTMSN1u52lBEa6&#xA;IjXv+cWfy51W/vL+Ka+sJroyOkELxG2ieQ1qkTxEhQeihqZUMpZnBEsSk/5w0043CtF5okW3FeUb&#xA;2YZ28PjE6j/hcl4zD8t5vVPyq/KPRfy5tdQh066mu5NSeN7iWYKKeiGCKoUdPjPUnK5Ttux4xFne&#xA;RbHYq7FXYq7FXYq7FXYq7FXUFa98VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;/9k="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:cd08c533-cee1-b54f-8875-17518a74aa3e"
    stRef:documentID="xmp.did:cd08c533-cee1-b54f-8875-17518a74aa3e"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:787fc4d8-437c-43a7-82da-19336cbd60e9"
      stEvt:when="2020-10-14T10:07:55+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.0 (Macintosh)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:2fb326dd-0b79-4b09-83d9-a77e601a42fb"
      stEvt:when="2020-10-14T13:50:56+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.0 (Macintosh)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:296f9237-90db-3746-a2f4-1d3938388b16"
      stEvt:when="2020-11-17T07:19:14+01:00"
      stEvt:softwareAgent="Adobe Illustrator CC 23.0 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:cd08c533-cee1-b54f-8875-17518a74aa3e"
      stEvt:when="2020-11-17T07:19:14+01:00"
      stEvt:softwareAgent="Adobe Illustrator CC 23.0 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:220bfd89-7053-a749-8274-934e6e460f4f"
      stEvt:when="2020-11-17T07:19:17+01:00"
      stEvt:softwareAgent="Adobe Illustrator CC 23.0 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="1315.000000"
    stDim:h="3045.631198"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                  
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -3045.63 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 3045.63 li
1315 3045.63 li
1315 0 li
cp
clp
1315 3045.63 mo
0 3045.63 li
0 0 li
1315 0 li
1315 3045.63 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
999.304 1498.97 mo
999.304 1498.97 li
cp
.8 .603922 .443137 rgb
f
1129.93 1225.26 mo
1129.66 1220.91 1129.38 1216.55 1129.1 1212.17 cv
1129.93 1225.26 li
cp
f
1053.26 1257.37 mo
1053.26 1257.37 1064.24 1275.54 1075.63 1297.11 cv
1087.03 1318.69 1080.02 1491.13 1080.02 1491.13 cv
999.304 1498.97 li
1089.95 1492.72 li
1113.55 1458.84 li
1124.4 1389.37 1133.94 1311.42 1131.83 1261.92 cv
1131.34 1250.19 1130.69 1238.04 1129.96 1225.73 cv
1129.96 1225.73 1115.96 1239.53 1106.85 1245.61 cv
1097.74 1251.68 1053.26 1257.37 1053.26 1257.37 cv
cp
f
1107.93 1220.91 mo
1107.93 1220.91 1099.79 1230.8 1087.44 1229.36 cv
977.415 1220.38 li
977.197 1220.7 li
976.923 1220.34 li
976.569 1220.31 li
976.569 1220.31 975.901 1219.28 974.764 1217.46 cv
974.201 1216.57 973.506 1215.44 972.706 1214.13 cv
972.528 1214.54 972.317 1214.98 972.129 1215.41 cv
975.627 1225.85 983.248 1249.34 983.775 1257.37 cv
984.46 1267.82 976.358 1272.52 976.358 1314.11 cv
976.358 1337.39 999.244 1498.56 999.304 1498.97 cv
1080.02 1491.13 li
1080.02 1491.13 1087.03 1318.69 1075.63 1297.11 cv
1064.24 1275.54 1053.26 1257.37 1053.26 1257.37 cv
1053.26 1257.37 1097.74 1251.68 1106.85 1245.61 cv
1115.96 1239.53 1129.96 1225.73 1129.96 1225.73 cv
1129.1 1212.17 li
1107.93 1220.91 li
cp
.556863 .360784 .2 rgb
f
1110.25 1585.53 mo
1104 1587.92 1089.7 1594.51 1058.28 1596.59 cv
1055.48 1596.77 1052.65 1596.86 1049.86 1596.86 cv
1021.44 1596.86 996.421 1588.44 996.138 1588.34 cv
995.127 1584.45 li
995.439 1584.56 1027.1 1595.21 1058.07 1593.15 cv
1088.87 1591.11 1106.82 1582.56 1110.78 1581.48 cv
1110.25 1585.53 li
cp
1106.95 1608.91 mo
1101.22 1611.3 1088.08 1617.9 1059.23 1619.97 cv
1056.65 1620.16 1054.05 1620.25 1051.49 1620.25 cv
1025.39 1620.25 1002.41 1611.83 1002.15 1611.73 cv
1001.22 1607.84 li
1001.51 1607.95 1030.59 1618.6 1059.03 1616.53 cv
1087.32 1614.49 1103.81 1605.95 1107.44 1604.86 cv
1106.95 1608.91 li
cp
1113.13 1562.83 mo
1113.13 1562.83 li
1101.3 1563.99 1063.52 1567.57 1038.24 1568.46 cv
1018.34 1569.15 983.775 1568.46 983.775 1568.46 cv
992.387 1574.29 li
1010.26 1644.64 li
1018.71 1640.9 1045.46 1640.12 1067.13 1642.05 cv
1067.13 1642.05 1096.78 1644.37 1100.65 1646.89 cv
1101.03 1647.14 1101.57 1647.83 1102.19 1648.73 cv
1104.91 1627.61 li
1099.53 1630 1087.25 1636.58 1060.34 1638.65 cv
1057.93 1638.84 1055.5 1638.93 1053.11 1638.93 cv
1028.73 1638.93 1007.26 1630.51 1007.01 1630.41 cv
1006.15 1626.52 li
1006.41 1626.63 1033.59 1637.28 1060.16 1635.22 cv
1086.59 1633.17 1101.99 1624.63 1105.38 1623.54 cv
1105.14 1625.71 li
1112.76 1566.2 li
1116.86 1562.46 li
1113.13 1562.83 li
cp
0 .133333 .176471 rgb
f
1108.14 1748.34 mo
1105.36 1737.07 1104.53 1698.24 1095.3 1680.46 cv
1086.09 1662.74 1067.21 1642.14 1067.13 1642.05 cv
1045.46 1640.12 1018.71 1640.9 1010.26 1644.64 cv
1009.37 1645.04 1008.64 1645.46 1008.18 1645.92 cv
1000.44 1653.78 990.176 1682 990.176 1682 cv
990.176 1682 987.398 1702.98 980.456 1712.06 cv
973.513 1721.13 938.504 1726.76 937.642 1731.19 cv
937.488 1731.99 937.695 1732.92 938.025 1733.88 cv
938.971 1734.42 945.409 1738 946.971 1737.92 cv
948.648 1737.83 972.587 1734.34 974.74 1732.73 cv
976.892 1731.11 997.117 1707 997.117 1707 cv
1000.45 1715.48 li
1000.45 1715.48 985.139 1732.93 981.546 1735.05 cv
977.954 1737.18 945.003 1743.72 945.003 1743.72 cv
945.003 1743.72 935.892 1747.9 942.032 1756.52 cv
992.825 1744.82 li
1012.08 1723.53 li
1021.82 1726.86 li
1021.82 1726.86 1006.06 1748.17 1002.69 1750.47 cv
999.329 1752.76 960.608 1761.7 960.608 1761.7 cv
950.883 1763.44 945.566 1759.98 943.336 1757.92 cv
949.8 1764.81 960.904 1763.45 960.904 1763.45 cv
960.904 1763.45 958.755 1767.19 959.712 1770.84 cv
959.959 1770.82 989.37 1767.44 1001.16 1763.8 cv
1013 1760.15 1024.9 1743.86 1024.9 1743.86 cv
1031.23 1728.54 li
1039.07 1735.29 li
1039.07 1735.29 1028.67 1755.94 1027.91 1759.77 cv
1028.27 1759.29 1028.59 1758.72 1028.91 1758.13 cv
1026.37 1766.46 1022.91 1775.88 1020.01 1776.32 cv
999.062 1779.46 1001.24 1794.4 1002.52 1796.37 cv
1002.52 1796.37 1029.9 1788.79 1036.55 1780.16 cv
1043.2 1771.53 1052.12 1732.2 1052.12 1732.2 cv
1052.12 1732.2 1030.01 1727.68 1015.18 1719.94 cv
1000.34 1712.2 992.524 1694.81 992.524 1694.81 cv
1001.61 1660.21 li
1035.22 1679.2 li
1035.22 1679.2 1043.08 1695.41 1054.73 1703.36 cv
1066.38 1711.3 1084.94 1706.3 1084.94 1706.3 cv
1084.94 1706.3 1097.49 1718.52 1098.13 1729.54 cv
1098.76 1740.45 1105.14 1751.28 1104.29 1756.69 cv
1103.43 1762.1 1131.94 1766.27 1131.94 1766.27 cv
1131.94 1766.27 1110.92 1759.61 1108.14 1748.34 cv
cp
.556863 .360784 .2 rgb
f
1002.52 1796.37 mo
1003.48 1797.86 1023.7 1798.65 1036.2 1794.73 cv
1025.05 1796.91 1008.78 1798.34 1002.52 1796.37 cv
cp
f
1067.13 1642.05 mo
1067.21 1642.14 1086.09 1662.74 1095.3 1680.46 cv
1104.53 1698.24 1105.36 1737.07 1108.14 1748.34 cv
1110.92 1759.61 1131.94 1766.27 1131.94 1766.27 cv
1131.94 1766.27 1133.27 1705.27 1128 1697.86 cv
1123.24 1691.16 1107.96 1657.14 1102.19 1648.73 cv
1101.57 1647.83 1101.03 1647.14 1100.65 1646.89 cv
1096.78 1644.37 1067.13 1642.05 1067.13 1642.05 cv
cp
.8 .603922 .443137 rgb
f
1054.73 1703.36 mo
1043.08 1695.41 1035.22 1679.2 1035.22 1679.2 cv
1001.61 1660.21 li
992.524 1694.81 li
992.524 1694.81 1000.34 1712.2 1015.18 1719.94 cv
1030.01 1727.68 1052.12 1732.2 1052.12 1732.2 cv
1052.12 1732.2 1043.2 1771.53 1036.55 1780.16 cv
1029.9 1788.79 1002.52 1796.37 1002.52 1796.37 cv
1008.78 1798.34 1025.05 1796.91 1036.2 1794.73 cv
1041.47 1793.71 1045.7 1792.52 1047.01 1791.43 cv
1051.07 1788 1075.04 1741.44 1075.35 1737.49 cv
1075.65 1733.54 1084.94 1706.3 1084.94 1706.3 cv
1084.94 1706.3 1066.38 1711.3 1054.73 1703.36 cv
cp
f
960.608 1761.7 mo
960.608 1761.7 999.329 1752.76 1002.69 1750.47 cv
1006.06 1748.17 1021.82 1726.86 1021.82 1726.86 cv
1012.08 1723.53 li
992.825 1744.82 li
942.032 1756.52 li
942.032 1756.52 942.477 1757.12 943.336 1757.92 cv
945.566 1759.98 950.883 1763.44 960.608 1761.7 cv
cp
f
1039.07 1735.29 mo
1031.23 1728.54 li
1024.9 1743.86 li
1024.9 1743.86 1013 1760.15 1001.16 1763.8 cv
989.37 1767.44 959.959 1770.82 959.712 1770.84 cv
959.712 1770.84 960.064 1775.69 967.335 1777.46 cv
969.802 1778.05 1001.77 1772.24 1004.77 1771.62 cv
1007.62 1771.03 1027.15 1763.59 1027.91 1759.77 cv
1028.67 1755.94 1039.07 1735.29 1039.07 1735.29 cv
cp
f
1000.45 1715.48 mo
997.117 1707 li
997.117 1707 976.892 1731.11 974.74 1732.73 cv
972.587 1734.34 948.648 1737.83 946.971 1737.92 cv
945.409 1738 938.971 1734.42 938.025 1733.88 cv
937.679 1733.69 li
937.679 1733.69 940.034 1741.25 945.003 1743.72 cv
945.003 1743.72 977.954 1737.18 981.546 1735.05 cv
985.139 1732.93 1000.45 1715.48 1000.45 1715.48 cv
cp
f
827.036 1692.07 mo
826.804 1693.34 826.583 1694.81 826.374 1696.45 cv
828.285 1686.92 li
827.814 1688.63 827.354 1690.35 827.036 1692.07 cv
cp
.6 .611765 .615686 rgb
f
881.776 1929.43 mo
845.149 1924.79 li
845.149 1943.34 li
879.861 1946.13 li
881.776 1929.43 li
cp
f
801.252 2032.9 mo
800.841 2041.78 799.168 2059.64 797.532 2076.29 cv
797.789 2078.02 li
797.356 2078.08 li
795.567 2096.24 793.885 2112.5 794.023 2113.42 cv
794.182 2114.46 795.25 2115.74 796.496 2117.42 cv
870.65 2117.42 li
872.94 2109.34 886.585 2040.62 883.688 2014.9 cv
820.766 2014.12 li
816.281 2016.69 801.589 2025.64 801.252 2032.9 cv
cp
f
798.515 2143.91 mo
788.729 2173.15 789.35 2191.09 786.18 2203.27 cv
784.076 2211.35 784.083 2253.6 785.043 2306.86 cv
849.664 2313.1 li
834.715 2482.56 li
833.986 2483.06 li
808.477 2483.06 li
845.534 2485.38 li
850.239 2440.93 868.102 2271.24 870.65 2232.2 cv
873.592 2187.17 854.022 2141.61 854.022 2141.61 cv
800.059 2144.22 li
798.515 2143.91 li
cp
f
870.65 2117.42 mo
854.022 2141.61 li
854.022 2141.61 869.488 2121.52 870.65 2117.42 cv
cp
f
891.881 1948.98 mo
886.341 1953.22 li
888.814 1952.14 891.368 1951.06 891.881 1948.98 cv
cp
f
831.424 2480.53 mo
845.916 2316.2 li
785.105 2310.33 li
786.106 2364.02 788.034 2428.2 789.757 2480.05 cv
831.424 2480.53 li
cp
f
882.411 2012.75 mo
883.688 2014.9 li
883.568 2013.83 883.063 2013.21 882.411 2012.75 cv
cp
f
828.445 1686.18 mo
838.232 1861.39 li
908.239 1869.13 li
907.862 1872.56 li
834.943 1864.49 li
825.834 1701.38 li
821.862 1743.07 823.455 1860.22 823.325 1942.56 cv
841.696 1944.28 li
841.696 1920.88 li
885.604 1926.44 li
883.104 1948.16 li
891.881 1948.98 li
909.675 1876.79 929.629 1763.75 930.272 1741.4 cv
931.189 1709.41 899.308 1636.89 899.308 1636.89 cv
894.973 1628.48 888.697 1623.25 881.153 1620.48 cv
878.832 1620.59 876.471 1620.73 874.052 1620.91 cv
869.409 1626.06 837.274 1655.32 828.445 1686.18 cv
cp
f
779.238 1949.82 mo
780.859 1775.33 li
710.325 1768.59 li
722.563 1971.99 li
779.238 1949.82 li
cp
0 .133333 .176471 rgb
f
794.023 2113.42 mo
793.885 2112.5 795.567 2096.24 797.356 2078.08 cv
710.933 2091.07 li
710.679 2089.38 li
711.48 2096.29 712.801 2103.01 714.851 2108.57 cv
714.719 2106.89 li
792.91 2100.55 li
793.18 2104 li
715.55 2110.3 li
716.013 2111.41 716.511 2112.44 717.047 2113.42 cv
722.188 2128.84 li
708.442 2172.06 675.497 2242.06 675.497 2242.06 cv
734.323 2557.42 li
761.814 2565.99 li
766.211 2549.5 li
765.8 2547.39 765.528 2545.21 765.594 2542.88 cv
765.809 2535.3 768.746 2528.42 773.086 2523.7 cv
781.83 2490.89 li
764.542 2532.68 li
740.67 2345.64 li
781.977 2306.56 li
785.043 2306.86 li
784.083 2253.6 784.076 2211.35 786.18 2203.27 cv
789.35 2191.09 788.729 2173.15 798.515 2143.91 cv
800.059 2144.22 li
854.022 2141.61 li
870.65 2117.42 li
796.496 2117.42 li
795.25 2115.74 794.182 2114.46 794.023 2113.42 cv
cp
f
789.757 2480.05 mo
788.034 2428.2 786.106 2364.02 785.105 2310.33 cv
783.216 2310.15 li
744.312 2346.94 li
766.636 2521.21 li
783.575 2479.98 li
789.757 2480.05 li
cp
f
870.18 2004.53 mo
818.424 2003.23 li
716.593 2037.27 li
716.495 2036.86 li
716.527 2037 716.561 2037.13 716.593 2037.27 cv
710.948 2051.78 li
709.854 2052.23 li
709.854 2052.23 709.786 2053.23 709.708 2054.97 cv
709.539 2058.7 709.334 2065.92 709.606 2074.25 cv
799.109 2040.83 li
800.325 2044.06 li
710.285 2077.68 li
709.672 2076.04 li
709.824 2079.8 710.051 2083.71 710.461 2087.64 cv
797.277 2074.6 li
797.532 2076.29 li
799.168 2059.64 800.841 2041.78 801.252 2032.9 cv
801.589 2025.64 816.281 2016.69 820.766 2014.12 cv
883.688 2014.9 li
877.274 2004.12 li
870.344 2003.83 li
870.18 2004.53 li
cp
f
800.325 2044.06 mo
799.109 2040.83 li
709.07 2074.45 li
710.285 2077.68 li
800.325 2044.06 li
cp
f
797.356 2078.08 mo
797.789 2078.02 li
797.277 2074.6 li
710.461 2087.64 li
710.933 2091.07 li
797.356 2078.08 li
cp
f
793.18 2104 mo
792.91 2100.55 li
714.719 2106.89 li
714.991 2110.35 li
793.18 2104 li
cp
f
838.179 2511.92 mo
879.654 2535.31 li
951.112 2525.86 li
931.723 2522.69 li
913.51 2508.05 li
913.564 2509.78 li
838.179 2511.92 li
cp
.133333 .392157 .654902 rgb
f
911.472 2553.26 mo
931.031 2564.29 li
1000.22 2558.51 li
989.772 2543.91 li
989.934 2545.63 li
911.472 2553.26 li
cp
f
884.669 2538.14 mo
906.216 2550.3 li
988.621 2542.31 li
980.267 2530.64 li
957 2526.83 li
957.229 2528.54 li
884.669 2538.14 li
cp
f
787.006 2483.06 mo
832.499 2508.66 li
911.434 2506.38 li
888.675 2488.08 li
808.477 2483.06 li
787.006 2483.06 li
cp
f
803.051 2540.4 mo
802.672 2553.79 793.979 2565.21 783.635 2565.89 cv
783.096 2565.93 782.593 2565.82 782.067 2565.79 cv
782.211 2565.82 782.321 2565.89 782.469 2565.92 cv
783.506 2566.08 788.969 2565.54 790.065 2565.47 cv
800.407 2564.78 809.101 2553.37 809.48 2539.97 cv
809.859 2526.58 801.784 2516.27 791.44 2516.96 cv
790.345 2517.04 784.242 2517.21 783.189 2517.51 cv
782.829 2517.61 782.548 2517.81 782.209 2517.94 cv
783.131 2517.7 784.054 2517.45 785.01 2517.39 cv
795.353 2516.7 803.43 2527 803.051 2540.4 cv
cp
0 .133333 .176471 rgb
f
782.067 2565.79 mo
782.593 2565.82 783.096 2565.93 783.635 2565.89 cv
793.979 2565.21 802.672 2553.79 803.051 2540.4 cv
803.43 2527 795.353 2516.7 785.01 2517.39 cv
784.054 2517.45 783.131 2517.7 782.209 2517.94 cv
778.806 2518.82 775.699 2520.85 773.086 2523.7 cv
768.746 2528.42 765.809 2535.3 765.594 2542.88 cv
765.528 2545.21 765.8 2547.39 766.211 2549.5 cv
768.047 2558.85 774.256 2565.45 782.067 2565.79 cv
cp
.133333 .392157 .654902 rgb
f
913.063 2606.24 mo
809.144 2579.83 li
808.926 2580.4 li
805.691 2579.19 li
805.773 2578.97 li
761.363 2567.68 li
782.685 2599.39 li
819.537 2604.84 li
835.145 2596.68 li
846.346 2608.28 li
914.67 2616.09 li
991.58 2605.5 li
991.924 2593.4 li
913.063 2606.24 li
cp
0 .133333 .176471 rgb
f
878.488 1968.86 mo
878.488 1968.86 854.369 1965.51 833.294 1965.49 cv
812.217 1965.48 813.687 1966.01 808.958 1976.19 cv
804.23 1986.38 818.424 2003.23 818.424 2003.23 cv
870.18 2004.53 li
881.388 1957 li
878.488 1968.86 li
cp
.8 .603922 .443137 rgb
f
881.388 1957 mo
802.297 1951.89 li
881.388 1957 li
cp
f
719.41 1976.93 mo
706.631 1764.76 li
784.335 1772.2 li
782.665 1952.19 li
719.41 1976.93 li
cp
882.907 1949.86 mo
841.696 1946.52 li
841.696 1944.28 li
823.325 1942.56 li
823.455 1860.22 821.862 1743.07 825.834 1701.38 cv
825.736 1699.63 li
826.374 1696.45 li
826.583 1694.81 826.804 1693.34 827.036 1692.07 cv
827.354 1690.35 827.814 1688.63 828.285 1686.92 cv
828.445 1686.18 li
837.274 1655.32 869.409 1626.06 874.052 1620.91 cv
862.26 1621.79 849.635 1624.04 838.986 1633.71 cv
824.757 1646.63 831.83 1694.1 814.08 1711.55 cv
790.938 1734.3 754.872 1738.64 727.785 1735.81 cv
728.781 1736.37 729.427 1736.63 729.427 1736.63 cv
721.337 1740.33 703.729 1741.73 681.724 1741.38 cv
678.413 1748.91 676.126 1754.21 675.497 1755.9 cv
672.413 1764.17 697.694 1928.11 696.167 1984.17 cv
695.895 1994.12 704.709 1988 704.709 1988 cv
801.189 1951.84 li
802.297 1951.89 li
881.388 1957 li
891.881 1948.98 li
883.104 1948.16 li
882.907 1949.86 li
cp
0 .133333 .176471 rgb
f
818.424 2003.23 mo
818.424 2003.23 804.23 1986.38 808.958 1976.19 cv
813.687 1966.01 812.217 1965.48 833.294 1965.49 cv
854.369 1965.51 878.488 1968.86 878.488 1968.86 cv
881.388 1957 li
801.189 1951.84 li
704.709 1988 li
716.593 2037.27 li
818.424 2003.23 li
cp
.556863 .360784 .2 rgb
f
780.859 1775.33 mo
779.238 1949.82 li
722.563 1971.99 li
710.325 1768.59 li
780.859 1775.33 li
cp
784.335 1772.2 mo
706.631 1764.76 li
719.41 1976.93 li
782.665 1952.19 li
784.335 1772.2 li
cp
0 .133333 .176471 rgb
f
1147.67 1202.88 mo
1147.58 1203.88 li
1147.82 1203.78 li
1147.67 1202.88 li
cp
f
934.824 1224.15 mo
914.361 1224.15 li
928.15 1187.74 li
950.11 1187.74 li
934.824 1224.15 li
cp
860.158 1219.05 mo
861.419 1219.6 li
864.547 1225.42 li
860.158 1219.05 li
cp
904.061 1222.26 mo
885.524 1218.94 li
893.908 1187.57 li
919.523 1186.94 li
904.061 1222.26 li
cp
678.982 1238.57 mo
723.701 1229.38 788.688 1217.57 788.688 1217.57 cv
678.982 1238.57 li
cp
610.66 1187.14 mo
638.78 1192.62 li
653.961 1230.44 li
629.683 1229.92 li
610.66 1187.14 li
cp
675.071 1194.83 mo
689.334 1227.45 li
668.264 1227.45 li
650.335 1192.82 li
675.071 1194.83 li
cp
690.009 1197.56 mo
711.983 1197.56 li
721.098 1224.15 li
699.931 1224.15 li
690.009 1197.56 li
cp
974.764 1217.46 mo
975.815 1215.82 990.186 1194.38 1011.67 1173.24 cv
993.429 1138.11 li
995.041 1133.71 li
1002.36 1147.82 li
1000.44 1142.44 998.372 1136.49 996.293 1130.28 cv
998.198 1125.07 li
1004.91 1145.52 1011.78 1163.48 1014.51 1170.48 cv
1031.7 1154.09 1053.02 1138.4 1075.66 1132.88 cv
1079.16 1132.03 1082.57 1131.68 1085.94 1131.6 cv
1085.48 1089.12 1076.11 1017.33 1062.8 973.97 cv
1121.88 963.516 li
1140.75 940.614 li
1047.41 958.531 li
1047.41 958.531 1047.59 954.737 1030.48 938.006 cv
1030.38 937.913 1030.27 937.816 1030.17 937.723 cv
1018.59 926.17 1001.92 915.229 982.885 904.667 cv
978.842 902.424 976.358 900.951 976.358 900.951 cv
982.181 940.021 li
991.021 1000.65 1006.28 1111.16 1000.97 1117.49 cv
999.637 1119.07 998.458 1120.63 997.271 1122.2 cv
997.357 1122.47 li
994.858 1125.92 li
994.755 1125.6 li
993.981 1126.69 993.229 1127.77 992.518 1128.85 cv
992.609 1129.03 li
961.716 1171.68 li
959.133 1175.24 954.927 1177.26 950.529 1177.05 cv
950.529 1177.05 840.013 1171.56 835.448 1171.34 cv
814.077 1170.36 li
814.077 1170.36 720.493 1190.07 720.371 1190.1 cv
694.446 1195.31 576.936 1177.39 576.936 1177.39 cv
576.936 1177.39 583.683 1110.04 562.444 1048.45 cv
541.204 986.854 509.545 928.992 509.545 928.992 cv
534.354 914.15 li
534.246 913.651 534.153 913.222 534.106 912.996 cv
537.477 912.282 li
374.242 936.348 li
374.242 936.348 363.467 981.891 360.504 990.448 cv
357.54 999.005 299.174 1078.46 299.174 1078.46 cv
166.846 1074.86 li
204.376 1092.76 li
199.869 1110.06 195.053 1128.07 190.563 1144.62 cv
193.767 1141.95 213.088 1126.16 237.094 1113.99 cv
240.351 1091.01 li
246.06 1090.74 li
242.959 1103.65 241.666 1109.76 241.214 1112 cv
252.745 1106.49 265.084 1102.11 277.108 1100.49 cv
277.915 1096.64 278.695 1092.86 279.458 1089.12 cv
302.658 1087.99 li
373.014 1013.79 li
388.926 960.106 li
474.191 950.141 li
503.004 932.907 li
496.81 937.394 488.016 946.028 484.953 960.295 cv
484.953 960.295 513.752 1042.72 528.81 1087.99 cv
543.864 1133.27 546.003 1155.59 546.003 1155.59 cv
518.475 1165.84 li
518.697 1169.18 li
519.776 1169.8 li
518.771 1170.31 li
523.547 1242.15 li
406.948 1275.24 li
406.858 1274.92 li
408.204 1281.16 409.704 1287.19 411.333 1292.43 cv
537.472 1264.6 li
537.472 1234.76 li
589.092 1217.09 li
587.229 1188.85 li
590.682 1188.62 li
592.704 1219.51 li
540.924 1237.23 li
540.924 1267.38 li
412.434 1295.72 li
414.701 1302.25 417.183 1307.12 419.84 1308.58 cv
433.563 1319.11 li
606.778 1283.66 li
606.778 1272.99 li
606.778 1272.99 809.255 1230.85 818.891 1232.24 cv
828.532 1233.64 938.428 1261.61 938.428 1261.61 cv
949.133 1254.04 li
949.133 1254.04 964.489 1232.56 972.129 1215.41 cv
972.317 1214.98 972.528 1214.54 972.706 1214.13 cv
973.506 1215.44 974.2 1216.57 974.764 1217.46 cv
cp
f
976.923 1220.34 mo
974.764 1217.46 li
975.899 1219.28 976.569 1220.31 976.569 1220.31 cv
976.923 1220.34 li
cp
f
1087.44 1229.36 mo
1087.44 1229.36 1086.47 1183.72 1085.98 1135.04 cv
1082.87 1135.11 1079.71 1135.44 1076.47 1136.24 cv
1025.93 1148.56 979.839 1216.72 977.415 1220.38 cv
1087.44 1229.36 li
cp
f
1150.62 1172.63 mo
1150.62 1172.63 1138.87 1059.17 1131.65 1017.51 cv
1129.36 1004.32 1127.07 987.171 1123.18 969.175 cv
1110.21 980.201 li
1112.91 985.202 1121.51 1004.82 1123.57 1053.73 cv
1125.81 1106.71 1123.68 1145.3 1123.38 1150.26 cv
1141.09 1171.39 1147.14 1202.97 1147.51 1204.58 cv
1150.62 1172.63 li
cp
.6 .611765 .615686 rgb
f
1107.87 1141.02 mo
1101.08 1136.79 1093.73 1134.86 1085.98 1135.04 cv
1086.47 1183.72 1087.44 1229.36 1087.44 1229.36 cv
1099.79 1230.8 1107.93 1220.91 1107.93 1220.91 cv
1147.51 1204.58 li
1145.83 1204.96 li
1145.72 1204.48 1135.06 1157.91 1107.87 1141.02 cv
cp
f
1062.8 973.97 mo
1076.11 1017.33 1085.48 1089.12 1085.94 1131.6 cv
1094.33 1131.41 1102.31 1133.5 1109.7 1138.09 cv
1113.52 1140.47 1116.96 1143.4 1120.11 1146.65 cv
1120.68 1135.32 1122.08 1100.14 1120.12 1053.88 cv
1117.78 998.204 1106.57 980.786 1106.57 980.786 cv
1105.72 979.506 li
1122.31 965.374 li
1122.17 964.749 1122.03 964.141 1121.88 963.516 cv
1062.8 973.97 li
cp
f
992.609 1129.03 mo
992.518 1128.85 li
991.883 1129.8 991.268 1130.75 990.68 1131.69 cv
992.609 1129.03 li
cp
0 .133333 .176471 rgb
f
994.858 1125.92 mo
997.357 1122.47 li
997.271 1122.2 li
996.399 1123.34 995.556 1124.47 994.755 1125.6 cv
994.858 1125.92 li
cp
f
696.046 1593 mo
699.128 1602.14 li
716.855 1632.16 li
716.855 1632.16 717.455 1627.14 718.001 1615.58 cv
717.956 1610.66 li
718.251 1610.38 li
718.562 1602.24 718.793 1591.49 718.806 1578.01 cv
718.806 1573.75 li
718.754 1554.49 718.245 1529.86 716.855 1498.97 cv
716.337 1487.45 715.517 1475.58 714.515 1463.58 cv
714.208 1459.74 li
712.547 1440.6 710.389 1421.25 708.017 1402.65 cv
707.775 1402.83 li
707.182 1399.15 li
707.529 1398.88 li
704.619 1376.43 701.435 1355.2 698.491 1336.92 cv
698.26 1337.08 li
697.594 1333.33 li
697.879 1333.15 li
692.403 1299.53 687.917 1276.83 687.917 1276.83 cv
681.27 1482.2 li
669.318 1481.49 li
620.519 1481.49 li
507.106 1437.43 li
508.423 1451.23 li
505.426 1450.98 li
485.596 1548.1 li
633.685 1588.24 li
653.956 1591.14 675.006 1593 696.046 1593 cv
cp
f
729.427 1736.63 mo
729.427 1736.63 728.781 1736.37 727.785 1735.81 cv
722.024 1732.53 703.038 1717.55 710.402 1664.55 cv
711.607 1655.88 662.804 1642.36 652.072 1633.71 cv
645.496 1628.41 636.802 1617.5 634.869 1607.58 cv
633.004 1598 634.12 1588.36 634.12 1588.36 cv
485.596 1548.1 li
485.596 1548.1 460.145 1596.58 466.188 1644.56 cv
495.658 1593 li
600.643 1612.36 li
611.396 1617.08 li
621.907 1620 630.551 1626.77 636.086 1638.58 cv
636.086 1638.58 662.329 1703.84 666.452 1740.9 cv
671.729 1741.14 676.832 1741.31 681.724 1741.38 cv
703.729 1741.73 721.337 1740.33 729.427 1736.63 cv
cp
f
730.518 926.343 mo
734.054 926.224 li
728.829 951.962 li
725.456 951.286 li
730.518 926.343 li
cp
760.704 925.328 mo
772.267 959.491 li
768.448 958.949 li
757.44 926.434 li
760.704 925.328 li
cp
786.938 920.932 mo
818.283 959.563 li
814.453 960.305 li
784.269 923.104 li
786.938 920.932 li
cp
517.84 900.205 mo
522.752 901.559 li
521.077 901.104 519.461 900.645 517.84 900.205 cv
525.322 904.823 li
616.279 933.62 779.82 984.269 804.938 984.269 cv
833.384 984.269 928.333 929.531 963.286 908.795 cv
963.286 908.795 975.118 901.706 976.06 901.134 cv
968.536 897.337 960.717 893.669 952.755 890.138 cv
937.717 883.469 922.283 877.327 908.259 872.054 cv
929.937 920.932 li
847.979 897.257 li
846.317 894.064 li
839.475 900.22 830.215 906.48 817.423 911.819 cv
876.516 941.75 li
872.05 943.353 li
814.547 914.231 li
815.359 912.633 li
796.072 920.316 769.415 925.88 732.363 925.88 cv
726.423 925.88 720.842 925.628 715.292 925.357 cv
715.461 926.292 li
701.132 946.166 li
567.899 912.77 li
604.567 894.834 li
604.535 894.597 li
581.834 880.378 572.814 866.669 572.814 866.669 cv
589.219 833.005 li
534.905 839.208 484.776 848.519 449.652 855.888 cv
451.403 856.922 452.765 857.805 453.312 858.327 cv
458.271 863.093 494.562 885.807 517.84 900.205 cv
cp
f
848.944 891.657 mo
850.378 894.413 li
924.813 916.287 li
904.842 872.805 li
864.095 868.353 li
863.025 871.978 859.391 881.371 848.944 891.657 cv
cp
f
577.739 911.797 mo
698.597 943.788 li
711.795 925.467 li
711.755 925.251 li
663.345 922.388 630.118 909.696 608.287 896.854 cv
577.739 911.797 li
cp
f
865.533 865.048 mo
899.038 868.698 li
887.404 864.551 874.035 859.913 858.708 854.771 cv
865.533 865.048 li
cp
f
852.86 1507.09 mo
853.015 1507.36 li
851.689 1511.26 li
836.299 1565.22 li
836.364 1565.32 li
835.099 1569.46 li
833.474 1575.13 li
880.329 1563.97 912.659 1551.7 912.659 1551.7 cv
880.868 1481.49 li
882.224 1467.06 li
863.968 1468.12 li
852.86 1507.09 li
cp
f
788.688 1217.57 mo
788.688 1217.57 723.701 1229.38 678.982 1238.57 cv
788.688 1217.57 li
cp
.133333 .392157 .654902 rgb
f
835.448 1171.34 mo
814.077 1170.36 li
835.448 1171.34 li
cp
f
818.891 1232.24 mo
809.255 1230.85 606.778 1272.99 606.778 1272.99 cv
606.778 1280.33 li
613.314 1299.77 620.409 1325.87 626.291 1359.58 cv
639.14 1433.2 620.519 1481.49 620.519 1481.49 cv
669.318 1481.49 li
681.27 1482.2 li
687.917 1276.83 li
687.917 1276.83 692.403 1299.53 697.879 1333.15 cv
701.095 1331 765.809 1288.66 826.761 1295.4 cv
889.326 1302.28 900.907 1322.21 901.419 1323.12 cv
900.488 1327.32 li
900.382 1327.12 886.833 1305.49 826.383 1298.82 cv
766.261 1292.27 701.252 1335.08 698.491 1336.92 cv
701.435 1355.2 704.619 1376.43 707.529 1398.88 cv
711.094 1396.17 758.847 1360.41 806.04 1360.41 cv
806.459 1360.41 806.876 1360.41 807.295 1360.41 cv
856.581 1361.08 885.817 1390.13 886.114 1390.42 cv
885.104 1393.98 li
884.821 1393.69 855.07 1364.52 807.24 1363.86 cv
806.837 1363.86 806.432 1363.86 806.04 1363.86 cv
759.49 1363.86 710.674 1400.61 708.017 1402.65 cv
710.389 1421.25 712.547 1440.6 714.208 1459.74 cv
714.186 1459.42 li
714.673 1459 760.541 1419.59 809.666 1422.01 cv
859.37 1424.53 868.58 1449.82 868.998 1450.98 cv
867.58 1455.58 li
867.485 1455.32 856.715 1427.85 809.506 1425.47 cv
808.115 1425.39 806.727 1425.36 805.354 1425.36 cv
759.171 1425.36 715.354 1462.86 714.515 1463.58 cv
715.517 1475.58 716.337 1487.45 716.855 1498.97 cv
718.245 1529.86 718.754 1554.49 718.806 1573.75 cv
720.206 1572.22 752.67 1537.25 785.919 1537.13 cv
818.931 1537.13 835.796 1564.4 836.299 1565.22 cv
851.689 1511.26 li
851.431 1510.77 836.379 1484.37 799.986 1481.42 cv
798.559 1481.3 797.115 1481.25 795.687 1481.25 cv
759.814 1481.25 718.029 1517.01 717.611 1517.38 cv
717.442 1512.95 li
719.18 1511.44 758.547 1477.79 795.607 1477.79 cv
797.171 1477.79 798.719 1477.85 800.256 1477.98 cv
837.908 1481.02 851.701 1504.95 852.86 1507.09 cv
863.968 1468.12 li
891.113 1466.55 li
891.113 1466.55 916.82 1402.66 939.525 1293.81 cv
938.428 1261.61 li
938.428 1261.61 828.532 1233.64 818.891 1232.24 cv
cp
f
860.158 1219.05 mo
864.547 1225.42 li
861.419 1219.6 li
860.158 1219.05 li
cp
f
620.519 1481.49 mo
620.519 1481.49 639.14 1433.2 626.291 1359.58 cv
620.409 1325.87 613.314 1299.77 606.778 1280.33 cv
606.778 1283.66 li
433.563 1319.11 li
464.813 1384.29 495.658 1432.99 495.658 1432.99 cv
620.519 1481.49 li
cp
0 .133333 .176471 rgb
f
716.271 1220.7 mo
709.53 1201 li
694.971 1201 li
702.33 1220.7 li
716.271 1220.7 li
cp
f
648.811 1226.88 mo
636.273 1195.65 li
616.512 1191.79 li
631.947 1226.52 li
648.811 1226.88 li
cp
f
519.906 1239.6 mo
515.418 1171.99 li
429.969 1214.96 li
416.886 1241.51 406.473 1257.62 406.473 1257.62 cv
406.473 1257.62 322.203 1192.15 291.022 1188.93 cv
284.173 1188.23 272.363 1189.47 258.91 1191.59 cv
260.191 1182.78 264.065 1159.02 274.117 1114.34 cv
274.893 1110.89 275.575 1107.62 276.283 1104.3 cv
237.598 1110.68 192.869 1146.91 189.093 1150.04 cv
179.997 1183.49 172.605 1209.74 172.605 1209.74 cv
175.584 1209.31 li
206.396 1242.85 li
206.917 1217.57 li
206.917 1217.57 277.294 1206.46 297.989 1209.31 cv
304.847 1210.26 317.67 1216.69 331.721 1224.81 cv
359.865 1241.09 392.966 1264.26 393.45 1264.6 cv
403.787 1259.07 li
404.515 1263.24 405.333 1267.55 406.219 1271.86 cv
519.906 1239.6 li
cp
f
919.348 1220.7 mo
932.532 1220.7 li
944.907 1191.19 li
930.524 1191.19 li
919.348 1220.7 li
cp
f
889.838 1216.2 mo
901.983 1218.38 li
914.185 1190.53 li
896.578 1190.96 li
889.838 1216.2 li
cp
f
688.419 1079.44 mo
612.479 1124.09 li
609.705 1107.75 li
688.419 1067.65 li
688.419 1079.44 li
cp
967.568 1110.93 mo
916.854 1070.96 li
922.986 1058.55 li
979.137 1101.38 li
967.568 1110.93 li
cp
604.957 1146.72 mo
625.727 1171.76 794.75 1150.89 816.347 1148.11 cv
819.364 1118.47 824.362 1069.09 824.756 1063.65 cv
825.318 1055.83 795.252 984.269 795.252 984.269 cv
804.967 987.334 815.794 982.896 815.794 982.896 cv
815.794 982.896 833.427 1041.98 835.438 1051.17 cv
836.907 1057.9 836.229 1118.91 835.758 1151.28 cv
839.729 1151.4 943.55 1154.33 961.639 1146.24 cv
980.836 1137.63 997.12 1112.19 996.675 1105.33 cv
996.162 1097.28 963.193 910.938 962.854 909.051 cv
963.286 908.795 li
928.333 929.531 833.384 984.269 804.938 984.269 cv
779.82 984.269 616.279 933.62 525.322 904.823 cv
537.477 912.282 li
537.907 914.311 582.524 1119.69 604.957 1146.72 cv
cp
.133333 .392157 .654902 rgb
f
924.229 1063.84 mo
921.193 1069.98 li
967.517 1106.5 li
973.582 1101.48 li
924.229 1063.84 li
cp
f
517.84 900.205 mo
517.84 900.205 li
519.461 900.645 521.077 901.104 522.752 901.559 cv
517.84 900.205 li
cp
f
976.06 901.134 mo
975.118 901.706 971.301 904.024 965.383 907.546 cv
965.892 907.245 li
967.253 914.963 999.601 1096.87 1000.13 1105.11 cv
1000.72 1114.51 981.899 1140.94 963.039 1149.39 cv
952.093 1154.29 913.014 1155.37 880.912 1155.37 cv
857.881 1155.37 838.589 1154.82 835.706 1154.74 cv
835.448 1171.34 li
840.013 1171.56 950.529 1177.05 950.529 1177.05 cv
954.927 1177.26 959.133 1175.24 961.716 1171.68 cv
961.716 1171.68 999.637 1119.07 1000.97 1117.49 cv
1006.28 1111.16 991.021 1000.65 982.181 940.021 cv
976.411 901.308 li
976.295 901.248 976.176 901.191 976.06 901.134 cv
cp
f
684.968 1077.47 mo
684.968 1073.29 li
613.533 1109.68 li
615.041 1118.58 li
684.968 1077.47 li
cp
f
674.586 1162.29 mo
640.035 1162.29 610.674 1159.02 602.287 1148.92 cv
579.952 1121.99 538.227 932.097 534.354 914.15 cv
509.545 928.992 li
509.545 928.992 541.204 986.854 562.444 1048.45 cv
583.683 1110.04 576.936 1177.39 576.936 1177.39 cv
576.936 1177.39 694.446 1195.31 720.371 1190.1 cv
720.493 1190.07 814.077 1170.36 814.077 1170.36 cv
815.987 1151.64 li
800.375 1153.67 730.74 1162.29 674.586 1162.29 cv
cp
f
835.099 1569.46 mo
834.838 1569.06 817.213 1540.59 785.919 1540.59 cv
754.186 1540.7 719.132 1578.45 718.806 1578.81 cv
718.806 1578.01 li
718.793 1591.49 718.562 1602.24 718.251 1610.38 cv
720.493 1608.19 745.475 1584.63 779.118 1584.63 cv
779.712 1584.63 780.305 1584.64 780.898 1584.65 cv
816.622 1585.6 824.154 1608.61 824.262 1608.9 cv
823.028 1612.61 li
822.609 1611.54 814.197 1588.99 780.819 1588.11 cv
780.264 1588.09 779.712 1588.09 779.158 1588.09 cv
746.288 1588.09 718.662 1614.93 718.001 1615.58 cv
717.455 1627.14 716.855 1632.16 716.855 1632.16 cv
699.128 1602.14 li
696.046 1593 li
675.006 1593 653.956 1591.14 633.685 1588.24 cv
634.12 1588.36 li
634.12 1588.36 633.004 1598 634.869 1607.58 cv
636.802 1617.5 645.496 1628.41 652.072 1633.71 cv
662.804 1642.36 711.607 1655.88 710.402 1664.55 cv
703.038 1717.55 722.024 1732.53 727.785 1735.81 cv
754.872 1738.64 790.938 1734.3 814.08 1711.55 cv
831.83 1694.1 824.757 1646.63 838.986 1633.71 cv
849.635 1624.04 862.26 1621.79 874.052 1620.91 cv
876.471 1620.73 878.832 1620.59 881.153 1620.48 cv
897.056 1619.67 910.183 1619.13 912.659 1602.14 cv
912.659 1551.7 li
912.659 1551.7 880.329 1563.97 833.474 1575.13 cv
835.099 1569.46 li
cp
f
281.639 1722.52 mo
281.148 1722.52 280.64 1722.77 280.127 1723.06 cv
280.891 1723.62 281.494 1724.05 281.494 1724.05 cv
283.058 1725.13 283.463 1727.27 282.385 1728.85 cv
281.723 1729.82 280.631 1730.34 279.542 1730.34 cv
278.867 1730.34 278.193 1730.16 277.587 1729.74 cv
277.369 1729.59 276.622 1729.06 275.663 1728.37 cv
270.053 1737.87 263.977 1756.63 259.361 1767.32 cv
266.88 1773.5 li
275.764 1772.42 li
284.019 1780.13 li
294.04 1776.42 li
300.487 1783.15 li
309.527 1782.23 li
309.527 1782.23 305.772 1795.31 309.527 1799.26 cv
313.286 1803.21 336.27 1847.68 336.27 1847.68 cv
373.872 1858.99 li
373.872 1858.99 372.203 1845.93 366.979 1841.23 cv
361.751 1836.54 355.582 1829.85 349.743 1817.3 cv
343.903 1804.75 331.393 1787.47 336.27 1778.94 cv
341.148 1770.41 357.251 1746.55 358.144 1749.22 cv
359.039 1751.88 363.09 1807.67 363.09 1807.67 cv
363.09 1807.67 376.436 1810.12 380.818 1808.99 cv
385.202 1807.86 403.129 1732.67 398.123 1728.51 cv
393.864 1724.98 378.289 1703.71 373.714 1697.41 cv
370.558 1699.83 363.626 1704.02 352.149 1706.8 cv
344.75 1712.64 325.957 1722.13 281.639 1722.52 cv
cp
.8 .603922 .443137 rgb
f
280.127 1723.06 mo
280.64 1722.77 281.148 1722.52 281.639 1722.52 cv
325.957 1722.13 344.75 1712.64 352.149 1706.8 cv
348.295 1707.73 344.093 1708.55 339.144 1709.02 cv
305.204 1712.25 284.783 1702.63 277.387 1698.22 cv
269.328 1714.51 li
274.369 1718.76 278.235 1721.69 280.127 1723.06 cv
cp
.556863 .360784 .2 rgb
f
295.522 1846.41 mo
294.854 1846.23 294.135 1845.68 293.437 1845.29 cv
294.638 1845.94 295.522 1846.41 295.522 1846.41 cv
cp
f
305.531 1841.23 mo
305.531 1841.23 306.557 1842.33 308.23 1843.8 cv
306.603 1842.32 305.531 1841.23 305.531 1841.23 cv
cp
f
309.527 1782.23 mo
300.487 1783.15 li
294.04 1776.42 li
284.019 1780.13 li
275.764 1772.42 li
266.88 1773.5 li
259.361 1767.32 li
263.977 1756.63 270.053 1737.87 275.663 1728.37 cv
273.694 1726.94 270.415 1724.49 266.134 1720.96 cv
247.141 1759.35 li
247.141 1759.35 247.25 1760.01 247.486 1761.08 cv
248.536 1766.32 252.024 1783.35 255.988 1798.87 cv
254.767 1791.08 253.933 1784.62 253.933 1784.62 cv
253.933 1784.62 269.278 1818.01 271.352 1823.62 cv
273.403 1829.15 279.37 1836.91 279.526 1837.11 cv
283.969 1839.95 288.366 1842.49 291.439 1844.2 cv
287.346 1841.01 283.325 1835.25 281.841 1830.28 cv
279.857 1823.62 281.841 1794.87 281.841 1794.87 cv
281.841 1794.87 289.446 1822.57 295.397 1833.08 cv
301.308 1843.53 301.823 1843.15 301.823 1843.15 cv
305.531 1841.23 li
305.531 1840.18 295.397 1798.73 295.397 1798.73 cv
316.325 1832.73 li
323.464 1844.37 331.435 1850.39 333.329 1851.72 cv
335.055 1850.07 336.27 1847.68 336.27 1847.68 cv
336.27 1847.68 313.286 1803.21 309.527 1799.26 cv
305.772 1795.31 309.527 1782.23 309.527 1782.23 cv
cp
f
316.325 1832.73 mo
295.397 1798.73 li
295.397 1798.73 305.531 1840.18 305.531 1841.23 cv
305.531 1841.23 306.603 1842.32 308.23 1843.8 cv
311.673 1846.92 317.85 1851.94 323.375 1853.27 cv
331.513 1855.23 333.743 1852.01 333.743 1852.01 cv
335.684 1850.36 336.27 1847.68 336.27 1847.68 cv
336.27 1847.68 335.055 1850.07 333.329 1851.72 cv
331.435 1850.39 323.464 1844.37 316.325 1832.73 cv
cp
.8 .603922 .443137 rgb
f
295.397 1833.08 mo
289.446 1822.57 281.841 1794.87 281.841 1794.87 cv
281.841 1794.87 279.857 1823.62 281.841 1830.28 cv
283.325 1835.25 287.346 1841.01 291.439 1844.2 cv
292.115 1844.72 292.765 1844.92 293.437 1845.29 cv
294.135 1845.68 294.854 1846.23 295.522 1846.41 cv
300.688 1847.8 301.823 1843.15 301.823 1843.15 cv
301.823 1843.15 301.308 1843.53 295.397 1833.08 cv
cp
f
271.352 1823.62 mo
269.278 1818.01 253.933 1784.62 253.933 1784.62 cv
253.933 1784.62 254.767 1791.08 255.988 1798.87 cv
257.461 1808.25 259.497 1819.58 261.34 1823.97 cv
264.714 1831.99 279.526 1837.11 279.526 1837.11 cv
279.37 1836.91 273.403 1829.15 271.352 1823.62 cv
cp
f
209.287 1359.27 mo
209.32 1359.61 209.362 1359.97 209.396 1360.31 cv
209.386 1359.97 209.375 1359.62 209.358 1359.42 cv
209.287 1359.27 li
cp
f
296.179 1237.13 mo
294.949 1251.23 298.174 1264.12 301.912 1273.21 cv
316.874 1309.57 li
316.874 1309.57 269.26 1320.38 249.859 1366.41 cv
243.04 1382.59 246.237 1424.08 253.235 1471.06 cv
335.863 1455.71 li
359.954 1463.5 li
356.772 1521.04 li
372.301 1522.25 li
374.06 1498.73 375.586 1475.47 376.629 1454.26 cv
381.622 1352.58 374.573 1330.33 365.146 1315.42 cv
358.283 1304.56 377.788 1301.18 393.45 1264.6 cv
392.966 1264.26 359.865 1241.09 331.721 1224.81 cv
313.15 1220.94 297.516 1221.75 296.179 1237.13 cv
cp
f
253.235 1471.06 mo
246.237 1424.08 243.04 1382.59 249.859 1366.41 cv
269.26 1320.38 316.874 1309.57 316.874 1309.57 cv
301.912 1273.21 li
298.174 1264.12 294.949 1251.23 296.179 1237.13 cv
297.516 1221.75 313.15 1220.94 331.721 1224.81 cv
317.67 1216.69 304.847 1210.26 297.989 1209.31 cv
277.294 1206.46 206.917 1217.57 206.917 1217.57 cv
206.396 1242.85 li
204.957 1312.56 li
204.957 1312.56 197.457 1338.85 196.991 1346.53 cv
196.533 1354.11 208.602 1355.21 209.287 1359.27 cv
209.358 1359.42 li
209.375 1359.62 209.386 1359.97 209.396 1360.31 cv
209.626 1367.41 208.722 1405.75 217.149 1442.42 cv
218.738 1449.33 221.659 1461.32 225.36 1476.24 cv
253.235 1471.06 li
cp
.556863 .360784 .2 rgb
f
406.194 993.727 mo
406.464 1001.21 407.206 1035.6 400.031 1077.82 cv
391.937 1125.48 386.007 1155.01 385.074 1159.6 cv
411.06 1182.85 431.96 1204.5 433.99 1206.61 cv
459.192 1153.38 490.924 1065.82 479.71 979.51 cv
406.194 993.727 li
cp
.6 .611765 .615686 rgb
f
300.57 1101.48 mo
322.361 1107.42 354.691 1132.65 382.096 1156.92 cv
383.785 1148.46 389.329 1120.26 396.636 1077.24 cv
404.645 1030.06 402.701 992.786 402.675 992.414 cv
402.595 990.91 li
479.198 976.101 li
477.954 967.417 476.372 958.751 474.191 950.141 cv
388.926 960.106 li
373.014 1013.79 li
302.658 1087.99 li
279.458 1089.12 li
278.695 1092.86 277.915 1096.64 277.108 1100.49 cv
285.214 1099.39 293.171 1099.45 300.57 1101.48 cv
cp
f
274.117 1114.34 mo
264.065 1159.02 260.191 1182.78 258.91 1191.59 cv
272.363 1189.47 284.173 1188.23 291.022 1188.93 cv
322.203 1192.15 406.473 1257.62 406.473 1257.62 cv
406.473 1257.62 416.886 1241.51 429.969 1214.96 cv
430.992 1212.88 432.035 1210.7 433.087 1208.5 cv
432.44 1209.67 li
431.538 1208.74 342.456 1116.49 299.653 1104.8 cv
292.455 1102.83 284.498 1102.95 276.283 1104.3 cv
275.575 1107.62 274.893 1110.89 274.117 1114.34 cv
cp
f
331.565 1693.68 mo
328.911 1693.99 326.196 1694.13 323.436 1694.13 cv
298.191 1694.13 270.651 1683.17 270.346 1683.05 cv
269.613 1680.51 li
274.09 1696.08 li
274.09 1696.08 275.314 1696.99 277.387 1698.22 cv
284.783 1702.63 305.204 1712.25 339.144 1709.02 cv
344.093 1708.55 348.295 1707.73 352.149 1706.8 cv
363.626 1704.02 370.558 1699.83 373.714 1697.41 cv
375.188 1696.27 375.907 1695.52 375.907 1695.52 cv
377.902 1670.59 li
376.289 1672.25 357.965 1690.68 331.565 1693.68 cv
cp
0 .133333 .176471 rgb
f
322.976 1589.43 mo
336.789 1460.23 li
359.954 1463.5 li
335.863 1455.71 li
215.705 1478.04 li
210.832 1483.06 li
229.894 1545.38 li
231.086 1544.02 232.251 1542.71 233.4 1541.5 cv
232.004 1538.34 231.141 1534.81 231.141 1531 cv
231.141 1518.43 239.758 1508.23 250.392 1508.23 cv
261.024 1508.23 269.642 1518.43 269.642 1531 cv
269.642 1543.58 261.024 1553.78 250.392 1553.78 cv
245.26 1553.78 240.626 1551.37 237.176 1547.49 cv
235.576 1549.23 233.935 1551.16 232.282 1553.19 cv
246.765 1601.03 li
246.62 1600.52 li
247.05 1600.67 291.524 1614.79 324.634 1611.94 cv
357.717 1608.95 382.951 1588.58 384.213 1587.6 cv
383.836 1592.06 li
382.771 1592.94 359.132 1612.29 324.957 1615.36 cv
321.601 1615.68 318.162 1615.81 314.67 1615.81 cv
282.743 1615.81 248.204 1604.75 247.799 1604.62 cv
257.834 1639.53 li
257.646 1638.81 li
258.036 1638.96 297.998 1653.07 327.75 1650.23 cv
357.475 1647.24 380.151 1626.87 381.279 1625.88 cv
380.946 1630.35 li
379.986 1631.23 358.745 1650.58 328.037 1653.65 cv
325.023 1653.96 321.934 1654.1 318.797 1654.1 cv
290.571 1654.1 260.146 1643.42 258.816 1642.95 cv
269.119 1678.8 li
269.472 1678.95 305.144 1693.1 331.31 1690.26 cv
357.093 1687.31 376.76 1667.55 378.263 1666.05 cv
385.09 1580.68 li
322.976 1589.43 li
cp
f
359.423 1528.92 mo
356.772 1521.04 li
359.954 1463.5 li
336.789 1460.23 li
322.976 1589.43 li
385.09 1580.68 li
393.398 1530.54 li
359.423 1528.92 li
cp
.6 .611765 .615686 rgb
f
359.423 1528.92 mo
393.398 1530.54 li
394.483 1523.98 li
356.772 1521.04 li
359.423 1528.92 li
cp
0 .133333 .176471 rgb
f
864.095 868.353 mo
863.564 868.294 li
855.894 856.762 li
840.375 875.184 li
848.944 891.657 li
859.391 881.371 863.025 871.978 864.095 868.353 cv
cp
.6 .611765 .615686 rgb
f
604.535 894.597 mo
601.546 872.508 li
711.916 906.777 li
715.292 925.357 li
720.842 925.628 726.423 925.88 732.363 925.88 cv
769.415 925.88 796.072 920.316 815.359 912.633 cv
816.11 911.157 li
817.423 911.819 li
830.215 906.48 839.475 900.22 846.317 894.064 cv
836.251 874.725 li
839.498 870.872 li
824.71 884.744 790.745 899.868 720.39 894.856 cv
615.578 887.395 588.937 852.174 591.514 828.294 cv
572.814 866.669 li
572.814 866.669 581.834 880.378 604.535 894.597 cv
cp
f
849.452 853.903 mo
849.454 856.054 848.531 859.173 846.342 862.743 cv
855.06 852.393 li
846.291 839.208 li
848.215 843.964 849.444 849.204 849.452 853.903 cv
cp
f
605.698 877.402 mo
608.287 896.854 li
630.118 909.696 663.345 922.388 711.755 925.251 cv
708.896 909.447 li
605.698 877.402 li
cp
f
720.39 894.856 mo
790.745 899.868 824.71 884.744 839.498 870.872 cv
846.342 862.743 li
848.531 859.173 849.454 856.054 849.452 853.903 cv
849.444 849.204 848.215 843.964 846.291 839.208 cv
843.642 832.648 839.64 827.038 835.393 825.309 cv
834.774 825.056 832.586 824.678 829.292 824.21 cv
835.393 848.332 li
835.393 848.332 833.362 862.563 818.895 870.215 cv
817.668 870.863 816.539 871.32 815.392 871.812 cv
815.552 871.809 li
815.552 871.809 815.075 872.002 814.362 872.279 cv
813.897 872.467 813.45 872.638 813.001 872.799 cv
804.004 876.187 772.091 887.165 744.835 883.522 cv
729.895 881.526 702.812 878.171 702.812 878.171 cv
667.654 872.935 634.844 854.466 634.844 854.466 cv
601.363 837.604 li
609.643 808.357 li
602.545 814.688 591.9 824.71 591.514 828.294 cv
588.937 852.174 615.578 887.395 720.39 894.856 cv
cp
0 .133333 .176471 rgb
f
655.601 778.909 mo
661.69 779.036 li
660.574 773.648 658.6 761.308 660.663 748.826 cv
661.598 743.172 664.293 736.784 666.958 731.427 cv
660.679 720.265 li
656.939 726.066 651.823 735.479 650.672 745.063 cv
648.843 760.295 653.728 774.245 655.601 778.909 cv
cp
.556863 .360784 .2 rgb
f
709.395 796.233 mo
710.655 804.316 712.144 810.51 713.87 812.353 cv
713.87 812.353 741.654 859.067 749.697 863.371 cv
753.693 865.509 759.464 867.095 765.908 868.29 cv
749.871 851.507 732.363 812.353 732.363 812.353 cv
732.363 812.353 778.427 850.025 788.568 841.144 cv
798.711 832.26 815.552 812.353 815.552 812.353 cv
815.552 812.353 817.766 837.258 818.588 847.042 cv
818.781 846.778 li
826.992 815.125 li
827.107 815.574 li
826.278 812.239 825.47 808.969 824.756 806.021 cv
824.089 803.276 824.065 800.209 824.275 797.064 cv
818.261 798.632 811.058 800.177 802.518 801.513 cv
775.092 805.803 726.866 798.997 709.395 796.233 cv
cp
f
601.363 837.604 mo
634.844 854.466 li
634.844 854.466 667.654 872.935 702.812 878.171 cv
702.812 878.171 691.394 815.631 694.849 798.172 cv
695.532 794.712 696.309 790.122 697.113 785.015 cv
670.113 737.032 li
667.832 741.645 665.713 747.141 665.065 752.751 cv
663.841 763.377 666.162 773.339 667.995 779.168 cv
674.229 779.298 li
677.104 805.613 li
674.229 844.092 li
664.597 846.778 li
664.66 845.406 li
628.305 837.819 li
643.39 782.578 li
647.106 778.734 li
648.276 778.759 li
647.776 778.198 647.481 777.786 647.481 777.786 cv
647.481 777.786 642.301 759.356 645.521 740.653 cv
647.13 731.32 653.122 720.184 656.986 713.704 cv
623.084 653.457 li
618.607 648.935 614.439 644.422 610.666 640.085 cv
609.458 641.277 608.134 642.208 606.817 643.172 cv
614.663 675.359 631.737 728.922 628.305 741.698 cv
625.457 752.289 601.363 837.604 601.363 837.604 cv
cp
f
706.201 392.221 mo
700.127 392.697 694.024 392.634 687.931 392.842 cv
693.979 391.795 700.264 390.669 706.201 392.221 cv
cp
579.882 551.252 mo
598.594 551.252 613.762 573.037 613.762 599.912 cv
613.762 609.668 611.717 618.712 608.275 626.328 cv
610.424 628.996 612.711 631.769 615.229 634.679 cv
621.063 626.451 624.719 615.186 625.202 602.687 cv
613.762 602.971 li
613.762 602.971 616.693 595.189 613.762 582.2 cv
610.827 569.209 603.62 560.808 603.62 560.808 cv
610.64 559.854 li
606.019 555.301 600.536 552.565 594.652 551.777 cv
616.065 524.835 671.37 486.565 671.37 486.565 cv
667.322 551.116 li
673.069 551.116 li
678.926 506.45 li
685.201 498.928 li
685.391 499.216 685.623 499.406 685.958 499.398 cv
686.591 499.849 687.283 500.213 688.04 500.412 cv
689.155 498.233 689.855 495.949 690.431 493.578 cv
691.288 493.633 694.271 493.94 694.985 493.467 cv
696.763 492.285 696.732 490.421 698.118 489.34 cv
699.265 488.447 701.895 488.79 702.537 488.186 cv
704.8 486.056 703.719 483.75 707.023 482.806 cv
708.826 482.291 711.074 483.976 712.236 483.788 cv
714.187 483.473 715.09 482.18 716.811 481.479 cv
717.033 481.39 717.148 481.227 717.406 481.162 cv
720.085 480.499 725.593 481.436 727.572 483.304 cv
730.305 478.971 730.509 484.564 732.758 484.153 cv
735.856 483.581 734.528 481.175 736.683 479.978 cv
739.513 478.401 744.246 480.442 747.121 480.71 cv
747.121 480.71 748.303 479.014 749.405 479.106 cv
750.767 479.224 751.497 481.682 753.287 481.785 cv
754.79 481.872 755.219 479.55 755.771 479.604 cv
756.769 479.696 758.444 480.902 758.939 480.893 cv
763.184 480.811 769.401 483.28 772.802 479.993 cv
774.944 480.115 li
776.782 482.166 780.091 481.254 782.876 481.633 cv
784.021 481.79 784.669 480.642 785.813 480.919 cv
787.16 481.248 787.369 483.707 789.256 483.824 cv
791.886 483.984 792.512 481.497 794.824 481.248 cv
797.075 481.001 799.245 485.352 800.695 481.567 cv
801.646 481.621 li
803.718 484.365 805.303 481.417 807.464 482.477 cv
809.117 483.287 809.2 486.342 811.935 486.554 cv
813.479 486.674 816.171 484.117 817.888 482.538 cv
819.6 482.632 li
822.048 486.688 824.078 487.216 827.482 483.08 cv
827.912 483.103 li
828.141 483.119 828.356 483.185 828.587 483.203 cv
830.49 486.981 832.229 487.739 835.891 484.319 cv
840.19 488.651 842.333 488.891 848.19 490.184 cv
849.697 490.519 855.122 493.187 857.403 493.391 cv
857.687 493.417 858.07 493.523 858.236 493.459 cv
858.963 494.112 870.068 504.023 870.709 504.573 cv
870.709 504.573 863.904 487.349 872.478 477.1 cv
881.054 466.854 896.11 472.403 896.11 472.403 cv
896.11 472.403 886.888 452.677 869.191 461.677 cv
861.364 465.66 860.487 470.781 860.487 470.781 cv
860.487 470.781 862.204 454.538 867.603 449.879 cv
873.003 445.221 874.272 444.289 874.272 444.289 cv
874.272 444.289 862.841 443.048 856.489 448.637 cv
850.136 454.226 849.179 462.922 849.179 462.922 cv
849.179 462.922 848.537 448.402 849.179 444.172 cv
849.821 439.943 853.949 432.8 853.949 432.8 cv
853.949 432.8 847.575 434.362 841.45 443.614 cv
840.71 433.892 836.648 426.024 834.052 422.881 cv
828.958 416.711 820.059 408.984 812.052 406.979 cv
816.162 410.191 819.236 414.422 820.61 419.087 cv
816.867 412.013 807.2 404.436 800.433 400.355 cv
789.651 393.858 787.304 391.915 774.531 391.738 cv
783.525 395.256 784.494 400.442 793.534 403.455 cv
790.058 403.478 786.177 401.716 783.189 400.117 cv
777.746 397.196 772.511 394.214 766.977 391.415 cv
754.123 384.921 738.468 377.489 723.639 382.178 cv
727.869 382.109 731.721 382.117 735.789 383.369 cv
738.589 384.228 740.906 385.948 743.67 386.749 cv
741.077 387.307 739.024 386.591 736.439 386.151 cv
729.184 384.913 719.667 383.272 712.34 383.686 cv
703.028 384.209 689.004 386.002 683.989 393.002 cv
681.22 393.178 678.452 393.439 675.691 393.906 cv
664.75 395.766 646.239 400.131 639.826 410.229 cv
644.667 407.44 649.471 406.97 654.688 406.579 cv
652.456 407.227 650.04 408.366 648.31 408.811 cv
641.693 410.521 635.142 412.072 628.721 414.408 cv
624.068 416.102 618.695 416.956 614.289 419.167 cv
611.333 420.647 609.909 422.956 607.871 425.385 cv
604.41 429.514 598.938 433.413 597.315 438.752 cv
600.111 435.893 605.292 433.9 609.779 433.002 cv
609.431 433.201 609.049 433.408 608.706 433.609 cv
607.521 434.178 606.295 434.918 605.028 435.866 cv
601.677 437.976 598.688 440.021 596.441 441.898 cv
584.697 451.707 580.327 464.836 578.797 475.112 cv
575.839 474.563 572.481 474.295 569.049 474.832 cv
559.139 476.381 557.155 482.583 557.155 482.583 cv
557.155 482.583 565.877 480.734 570.636 482.583 cv
575.392 484.432 577.372 490.336 577.372 490.336 cv
577.372 490.336 568.85 488.98 562.679 491.387 cv
557.057 493.573 557.155 496.925 557.155 496.925 cv
557.155 496.925 560.587 491.724 572.699 498.293 cv
573.019 498.348 li
566.145 508.281 555.369 527.412 557.756 546.723 cv
558.054 549.132 558.526 551.553 559.27 553.95 cv
558.736 554.005 558.185 554.046 557.764 554.218 cv
558.575 554.978 559.429 555.731 560.283 556.461 cv
560.637 557.378 560.966 558.298 561.394 559.208 cv
566.716 554.211 573.051 551.252 579.882 551.252 cv
cp
0 .133333 .176471 rgb
f
835.393 777.205 mo
825.69 778.892 802.427 780.038 788.568 775.867 cv
777.578 772.56 765.37 768.604 754.748 765.079 cv
740.188 757.916 728.217 746.396 720.5 732.115 cv
705.374 704.124 li
702.147 703.014 698.786 701.786 695.243 700.389 cv
727.447 760.066 li
730.722 760.669 li
702.813 795.146 li
702.813 795.146 705.256 795.577 709.395 796.233 cv
726.866 798.997 775.092 805.803 802.518 801.513 cv
811.058 800.177 818.261 798.632 824.275 797.064 cv
842.153 792.411 849.452 787.583 849.452 787.583 cv
856.671 774.779 li
848.316 776.051 841.339 776.749 835.062 777.032 cv
835.393 777.205 li
cp
f
857.403 493.391 mo
855.122 493.187 849.697 490.519 848.19 490.184 cv
842.333 488.891 840.19 488.651 835.891 484.319 cv
832.229 487.739 830.49 486.981 828.587 483.203 cv
828.356 483.185 828.141 483.119 827.912 483.103 cv
827.482 483.08 li
824.078 487.216 822.048 486.688 819.6 482.632 cv
817.888 482.538 li
816.171 484.117 813.479 486.674 811.935 486.554 cv
809.2 486.342 809.117 483.287 807.464 482.477 cv
805.303 481.417 803.718 484.365 801.646 481.621 cv
800.695 481.567 li
799.245 485.352 797.075 481.001 794.824 481.248 cv
792.512 481.497 791.886 483.984 789.256 483.824 cv
787.369 483.707 787.16 481.248 785.813 480.919 cv
784.669 480.642 784.021 481.79 782.876 481.633 cv
780.091 481.254 776.782 482.166 774.944 480.115 cv
772.802 479.993 li
769.401 483.28 763.184 480.811 758.939 480.893 cv
758.444 480.902 756.769 479.696 755.771 479.604 cv
755.219 479.55 754.79 481.872 753.287 481.785 cv
751.497 481.682 750.767 479.224 749.405 479.106 cv
748.303 479.014 747.121 480.71 747.121 480.71 cv
744.246 480.442 739.513 478.401 736.683 479.978 cv
734.528 481.175 735.856 483.581 732.758 484.153 cv
730.509 484.564 730.305 478.971 727.572 483.304 cv
725.593 481.436 720.085 480.499 717.406 481.162 cv
717.148 481.227 717.033 481.39 716.811 481.479 cv
726.706 546.385 li
747.105 546.252 781.183 546.313 813.499 547.686 cv
849.974 549.24 874.881 551.957 890.302 554.166 cv
881.007 524.543 li
878.307 515.945 873.694 508.287 867.719 501.942 cv
865.781 500.227 863.222 497.935 860.369 495.373 cv
859.424 494.656 858.392 494.055 857.403 493.391 cv
cp
.8 .603922 .443137 rgb
f
783.747 707.165 mo
766.774 711.382 li
766.301 707.815 774.728 702.275 780.425 700.939 cv
786.125 699.602 843.103 701.385 850.701 702.722 cv
858.299 704.061 861.588 711.142 860.162 710.25 cv
858.738 709.358 856.398 709.408 851.176 707.165 cv
845.953 704.917 790.871 705.398 783.747 707.165 cv
cp
849.219 650.114 mo
849.521 651.537 849.43 652.633 849.174 653.579 cv
839.996 608.503 li
839.996 608.503 829.469 604.361 830.811 610.119 cv
830.811 610.119 834.293 628.119 841.736 640.855 cv
849.174 653.579 li
849.119 653.718 li
848.954 654.25 848.75 654.753 848.428 655.15 cv
839.579 673.54 li
798.418 669.354 li
792.72 668.771 788.432 664.007 788.573 658.404 cv
788.573 658.404 788.704 646.534 790.645 643.205 cv
792.011 640.857 799.31 636.513 799.31 636.513 cv
792.498 610.008 li
693.822 611.764 li
689.878 618.863 li
689.878 618.863 724.61 664.017 742.973 694.923 cv
743.259 694.87 li
751.99 694.87 759.07 701.513 759.07 709.711 cv
759.07 712.104 758.33 714.279 757.261 716.279 cv
763.712 718.634 772.884 714.205 782.323 711.193 cv
796.381 706.707 836.758 716.354 839.306 717.432 cv
844.213 719.516 781.849 726.796 784.697 739.722 cv
787.438 752.152 831.669 775.276 835.062 777.032 cv
841.339 776.749 848.316 776.051 856.671 774.779 cv
856.83 774.759 li
862.598 773.88 868.142 768.009 868.285 762.525 cv
868.511 753.756 869.633 740.179 873.893 728.372 cv
878.35 716.011 909.9 654.516 906.508 611.531 cv
840.713 610.304 li
849.219 650.114 li
cp
f
849.174 653.579 mo
849.119 653.718 li
849.174 653.579 li
cp
.556863 .360784 .2 rgb
f
693.822 611.764 mo
792.498 610.008 li
799.31 636.513 li
799.31 636.513 792.011 640.857 790.645 643.205 cv
788.704 646.534 788.573 658.404 788.573 658.404 cv
788.432 664.007 792.72 668.771 798.418 669.354 cv
839.579 673.54 li
848.428 655.15 li
846.005 658.132 839.471 657.535 833.052 656.71 cv
827.128 655.95 822.511 651.319 821.877 645.513 cv
817.591 606.136 li
789.891 605.219 762.729 604.294 753.354 603.894 cv
731.798 602.974 718.447 600.351 718.447 600.351 cv
660.74 601.795 li
660.505 602.922 li
661.034 602.971 li
659.297 618.863 li
700.41 694.941 li
711.871 699.295 721.572 702.012 728.87 703.683 cv
731.3 698.587 736.67 695.036 742.973 694.923 cv
724.61 664.017 689.878 618.863 689.878 618.863 cv
693.822 611.764 li
cp
f
890.487 608.503 mo
839.978 606.871 li
840.713 610.304 li
906.869 611.54 li
906.869 607.381 li
890.487 608.503 li
cp
f
754.748 765.079 mo
765.37 768.604 777.578 772.56 788.568 775.867 cv
802.427 780.038 825.69 778.892 835.393 777.205 cv
835.062 777.032 li
831.669 775.276 787.438 752.152 784.697 739.722 cv
781.849 726.796 844.213 719.516 839.306 717.432 cv
836.758 716.354 796.381 706.707 782.323 711.193 cv
772.884 714.205 763.712 718.634 757.261 716.279 cv
754.662 721.137 749.443 724.556 743.259 724.556 cv
734.835 724.556 728.1 718.327 727.623 710.529 cv
721.654 709.185 714.138 707.146 705.374 704.124 cv
720.5 732.115 li
728.217 746.396 740.188 757.916 754.748 765.079 cv
cp
f
708.036 546.597 mo
708.036 546.597 715.231 546.461 726.706 546.385 cv
716.811 481.479 li
715.09 482.18 714.187 483.473 712.236 483.788 cv
711.074 483.976 708.826 482.291 707.023 482.806 cv
703.719 483.75 704.8 486.056 702.537 488.186 cv
701.895 488.79 699.265 488.447 698.118 489.34 cv
696.732 490.421 696.763 492.285 694.985 493.467 cv
694.271 493.94 691.288 493.633 690.431 493.578 cv
689.855 495.949 689.155 498.233 688.04 500.412 cv
687.283 500.213 686.591 499.849 685.958 499.398 cv
685.623 499.406 685.391 499.216 685.201 498.928 cv
678.926 506.45 li
673.069 551.116 li
671.335 551.116 li
671.232 551.604 li
708.036 546.597 li
cp
f
730.722 760.669 mo
727.447 760.066 li
695.243 700.389 li
686.262 696.845 676.331 692.35 665.675 686.6 cv
649.732 677.988 635.226 665.719 623.084 653.457 cv
656.986 713.704 li
658.927 710.451 660.372 708.286 660.372 708.286 cv
664.764 714.479 li
664.764 714.479 662.98 716.691 660.679 720.265 cv
666.958 731.427 li
670.176 724.965 673.353 720.03 673.353 720.03 cv
677.104 725.544 li
677.104 725.544 673.435 730.318 670.113 737.032 cv
702.813 795.146 li
730.722 760.669 li
cp
.6 .611765 .615686 rgb
f
671.232 551.604 mo
671.335 551.116 li
667.322 551.116 li
671.37 486.565 li
671.37 486.565 616.065 524.835 594.652 551.777 cv
600.536 552.565 606.019 555.301 610.64 559.854 cv
671.232 551.604 li
cp
f
689.979 675.635 mo
659.297 618.863 li
689.979 675.635 li
cp
f
651.249 618.863 mo
651.249 602.033 li
660.505 602.922 li
660.74 601.795 li
625.202 602.687 li
624.719 615.186 621.063 626.451 615.229 634.679 cv
628.944 650.55 647.835 669.116 668.965 680.519 cv
676.358 684.514 683.397 687.858 690.027 690.722 cv
651.249 618.863 li
cp
f
610.666 640.085 mo
608.527 637.626 606.521 635.241 604.634 632.938 cv
598.446 642.497 589.686 648.573 579.882 648.573 cv
578.816 648.573 577.812 648.261 576.771 648.122 cv
577.123 648.229 577.403 648.442 577.769 648.532 cv
579.653 649.001 589.53 648.645 591.514 648.645 cv
597.052 648.645 602.203 646.557 606.817 643.172 cv
608.134 642.208 609.458 641.277 610.666 640.085 cv
cp
0 .133333 .176471 rgb
f
604.634 632.938 mo
606.521 635.241 608.527 637.626 610.666 640.085 cv
614.439 644.422 618.607 648.935 623.084 653.457 cv
635.226 665.719 649.732 677.988 665.675 686.6 cv
676.331 692.35 686.262 696.845 695.243 700.389 cv
698.786 701.786 702.147 703.014 705.374 704.124 cv
714.138 707.146 721.654 709.185 727.623 710.529 cv
728.1 718.327 734.835 724.556 743.259 724.556 cv
749.443 724.556 754.662 721.137 757.261 716.279 cv
758.33 714.279 759.07 712.104 759.07 709.711 cv
759.07 701.513 751.99 694.87 743.259 694.87 cv
742.973 694.923 li
736.67 695.036 731.3 698.587 728.87 703.683 cv
721.572 702.012 711.871 699.295 700.41 694.941 cv
697.086 693.678 693.626 692.276 690.027 690.722 cv
683.397 687.858 676.358 684.514 668.965 680.519 cv
647.835 669.116 628.944 650.55 615.229 634.679 cv
612.711 631.769 610.424 628.996 608.275 626.328 cv
611.717 618.712 613.762 609.668 613.762 599.912 cv
613.762 573.037 598.594 551.252 579.882 551.252 cv
573.051 551.252 566.716 554.211 561.394 559.208 cv
552.143 567.895 546.003 582.85 546.003 599.912 cv
546.003 625.254 559.543 645.832 576.771 648.122 cv
577.812 648.261 578.816 648.573 579.882 648.573 cv
589.686 648.573 598.446 642.497 604.634 632.938 cv
cp
.133333 .392157 .654902 rgb
f
860.162 710.25 mo
861.588 711.142 858.299 704.061 850.701 702.722 cv
843.103 701.385 786.125 699.602 780.425 700.939 cv
774.728 702.275 766.301 707.815 766.774 711.382 cv
783.747 707.165 li
790.871 705.398 845.953 704.917 851.176 707.165 cv
856.398 709.408 858.738 709.358 860.162 710.25 cv
cp
0 .133333 .176471 rgb
f
821.877 645.513 mo
822.511 651.319 827.128 655.95 833.052 656.71 cv
839.471 657.535 846.005 658.132 848.428 655.15 cv
848.75 654.753 848.954 654.25 849.119 653.718 cv
849.174 653.579 li
841.736 640.855 li
834.293 628.119 830.811 610.119 830.811 610.119 cv
829.469 604.361 839.996 608.503 839.996 608.503 cv
849.174 653.579 li
849.43 652.633 849.521 651.537 849.219 650.114 cv
839.978 606.871 li
817.591 606.136 li
821.877 645.513 li
cp
.8 .603922 .443137 rgb
f
726.706 546.385 mo
715.231 546.461 708.036 546.597 708.036 546.597 cv
718.447 600.351 li
718.447 600.351 731.798 602.974 753.354 603.894 cv
762.729 604.294 890.487 608.503 890.487 608.503 cv
910.123 557.664 li
910.123 557.664 903.878 556.112 890.302 554.166 cv
874.881 551.957 849.974 549.24 813.499 547.686 cv
781.183 546.313 747.105 546.252 726.706 546.385 cv
cp
0 .133333 .176471 rgb
f
660.74 601.795 mo
718.447 600.351 li
708.036 546.597 li
603.62 560.808 li
603.62 560.808 610.827 569.209 613.762 582.2 cv
616.693 595.189 613.762 602.971 613.762 602.971 cv
660.74 601.795 li
cp
.133333 .392157 .654902 rgb
f
890.487 608.503 mo
914.318 606.871 li
921.517 564.185 li
910.123 557.664 li
890.487 608.503 li
cp
f
659.297 618.863 mo
661.034 602.971 li
651.249 602.033 li
651.249 618.863 li
690.027 690.722 li
693.626 692.276 697.086 693.678 700.41 694.941 cv
659.297 618.863 li
cp
0 .133333 .176471 rgb
f
669.908 784.445 mo
666.377 787.786 662.34 781.857 662.34 781.857 cv
662.34 781.857 662.064 780.833 661.69 779.036 cv
655.601 778.909 li
656.021 779.957 656.341 780.694 656.341 780.694 cv
653.233 783.516 649.793 780.454 648.276 778.759 cv
647.106 778.734 li
643.39 782.578 li
628.305 837.819 li
664.66 845.406 li
667.322 789.024 li
677.104 805.613 li
674.229 779.298 li
667.995 779.168 li
669.026 782.439 669.908 784.445 669.908 784.445 cv
cp
.6 .611765 .615686 rgb
f
667.322 789.024 mo
664.597 846.778 li
674.229 844.092 li
677.104 805.613 li
667.322 789.024 li
cp
0 .133333 .176471 rgb
f
656.341 780.694 mo
656.341 780.694 656.021 779.957 655.601 778.909 cv
653.728 774.245 648.843 760.295 650.672 745.063 cv
651.823 735.479 656.939 726.066 660.679 720.265 cv
662.98 716.691 664.764 714.479 664.764 714.479 cv
660.372 708.286 li
660.372 708.286 658.927 710.451 656.986 713.704 cv
653.122 720.184 647.13 731.32 645.521 740.653 cv
642.301 759.356 647.481 777.786 647.481 777.786 cv
647.481 777.786 647.776 778.198 648.276 778.759 cv
649.793 780.454 653.233 783.516 656.341 780.694 cv
cp
f
673.353 720.03 mo
673.353 720.03 670.176 724.965 666.958 731.427 cv
664.293 736.784 661.598 743.172 660.663 748.826 cv
658.6 761.308 660.574 773.648 661.69 779.036 cv
662.064 780.833 662.34 781.857 662.34 781.857 cv
662.34 781.857 666.377 787.786 669.908 784.445 cv
669.908 784.445 669.026 782.439 667.995 779.168 cv
666.162 773.339 663.841 763.377 665.065 752.751 cv
665.713 747.141 667.832 741.645 670.113 737.032 cv
673.435 730.318 677.104 725.544 677.104 725.544 cv
673.353 720.03 li
cp
f
818.781 846.778 mo
818.588 847.042 li
817.766 837.258 815.552 812.353 815.552 812.353 cv
815.552 812.353 798.711 832.26 788.568 841.144 cv
778.427 850.025 732.363 812.353 732.363 812.353 cv
732.363 812.353 749.871 851.507 765.908 868.29 cv
759.464 867.095 753.693 865.509 749.697 863.371 cv
741.654 859.067 713.87 812.353 713.87 812.353 cv
712.144 810.51 710.655 804.316 709.395 796.233 cv
705.256 795.577 702.813 795.146 702.813 795.146 cv
697.113 785.015 li
696.309 790.122 695.532 794.712 694.849 798.172 cv
691.394 815.631 702.812 878.171 702.812 878.171 cv
702.812 878.171 729.895 881.526 744.835 883.522 cv
772.091 887.165 804.004 876.187 813.001 872.799 cv
813.45 872.638 813.897 872.467 814.362 872.279 cv
815.075 872.002 815.552 871.809 815.552 871.809 cv
815.392 871.812 li
816.539 871.32 817.668 870.863 818.895 870.215 cv
833.362 862.563 835.393 848.332 835.393 848.332 cv
826.992 815.125 li
818.781 846.778 li
cp
.8 .603922 .443137 rgb
f
517.407 2049.69 mo
512.376 2137.07 li
607.43 2140.11 li
609.722 2131.85 623.367 2060.94 620.47 2033.67 cv
541.873 2024.41 li
517.407 2049.69 li
cp
.6 .611765 .615686 rgb
f
570.228 1692.43 mo
555.979 1725.11 543.246 1764.78 542.184 1804.04 cv
541.402 1832.86 543.197 1892.96 543.324 1948.64 cv
565.588 1952.99 li
569.828 1928.22 li
620.353 1938.58 li
613.136 1962.27 li
628.664 1965.3 li
635.916 1935.13 643.542 1897.92 650.058 1862.78 cv
560.255 1849.58 li
570.228 1692.43 li
cp
f
518.997 2159.36 mo
519.522 2162.8 519.438 2166.57 517.987 2170.85 cv
507.55 2201.65 501.693 2213.34 498.459 2226.07 cv
496.26 2234.71 497.602 2278.41 500.327 2332.32 cv
568.533 2342.69 li
549.564 2521.64 li
511.928 2520.62 li
511.948 2520.88 li
582.008 2526.6 li
586.178 2485.74 604.821 2302.08 607.43 2260.41 cv
610.372 2213.45 590.804 2163.74 590.804 2163.74 cv
522.367 2160.58 li
518.997 2159.36 li
cp
f
615.959 1941.2 mo
572.631 1932.32 li
569.261 1951.95 li
610.229 1959.94 li
615.959 1941.2 li
cp
f
607.43 2140.11 mo
590.804 2163.74 li
590.804 2163.74 606.27 2144.31 607.43 2140.11 cv
cp
f
546.464 2518.11 mo
564.758 2345.61 li
501.274 2335.95 li
500.571 2337.07 li
503.632 2396.52 508.264 2467.24 511.69 2517.16 cv
546.464 2518.11 li
cp
f
619.19 2031.29 mo
620.47 2033.67 li
620.35 2032.54 619.843 2031.84 619.19 2031.29 cv
cp
f
628.664 1965.3 mo
623.124 1969.21 li
625.597 1968.32 628.151 1967.44 628.664 1965.3 cv
cp
f
543.315 1960.21 mo
543.315 1960.21 li
544.315 1960.36 li
543.315 1960.21 li
cp
f
636.086 1638.58 mo
630.551 1626.77 621.907 1620 611.396 1617.08 cv
611.107 1617.5 591.422 1645.67 573.094 1686 cv
573.938 1688.27 li
563.895 1846.62 li
650.604 1859.36 li
650.379 1860.86 li
659.675 1810.55 666.679 1764.91 667.053 1751.23 cv
667.137 1748.17 666.868 1744.63 666.452 1740.9 cv
662.329 1703.84 636.086 1638.58 636.086 1638.58 cv
cp
f
511.69 2517.16 mo
508.264 2467.24 503.632 2396.52 500.571 2337.07 cv
481.066 2368.09 li
499.01 2516.81 li
511.69 2517.16 li
cp
0 .133333 .176471 rgb
f
516.022 1955.4 mo
517.642 1772.3 li
447.109 1758.37 li
459.362 1973.17 li
516.022 1955.4 li
cp
f
511.948 2520.88 mo
511.928 2520.62 li
507.029 2520.49 li
511.948 2520.88 li
cp
f
606.961 2021.49 mo
542.22 2011.53 li
453.373 2040.94 li
453.311 2040.66 li
453.373 2040.94 li
447.726 2055.62 li
446.634 2055.98 li
446.486 2058.85 li
446.317 2062.76 446.113 2070.37 446.391 2079.19 cv
514.661 2059.06 li
515.633 2062.38 li
446.933 2082.63 li
446.453 2080.99 li
446.625 2085.4 446.927 2090.04 447.425 2094.68 cv
447.338 2093.29 li
512.611 2089.33 li
512.828 2092.78 li
447.606 2096.74 li
448.421 2103.49 449.747 2110.04 451.643 2115.61 cv
451.828 2113.92 li
512.061 2120.75 li
511.683 2124.18 li
452.322 2117.44 li
452.788 2118.66 453.29 2119.8 453.828 2120.88 cv
458.969 2137.56 li
445.224 2181.58 412.275 2251.83 412.275 2251.83 cv
473 2599.26 li
475.205 2517.89 li
495.865 2519.57 li
477.48 2367.28 li
499.551 2332.2 li
500.327 2332.32 li
497.602 2278.41 496.26 2234.71 498.459 2226.07 cv
501.693 2213.34 507.55 2201.65 517.987 2170.85 cv
519.438 2166.57 519.522 2162.8 518.997 2159.36 cv
522.367 2160.58 li
590.804 2163.74 li
607.43 2140.11 li
512.376 2137.07 li
517.407 2049.69 li
541.873 2024.41 li
620.47 2033.67 li
614.057 2021.74 li
607.13 2020.76 li
606.961 2021.49 li
cp
f
515.633 2062.38 mo
514.661 2059.06 li
445.964 2079.31 li
446.933 2082.63 li
515.633 2062.38 li
cp
f
512.828 2092.78 mo
512.611 2089.33 li
447.338 2093.29 li
447.606 2096.74 li
512.828 2092.78 li
cp
f
511.683 2124.18 mo
512.061 2120.75 li
451.828 2113.92 li
451.449 2117.34 li
511.683 2124.18 li
cp
f
607.293 2600.65 mo
630.306 2615.07 li
630.383 2614.47 li
711.94 2612.94 li
701.71 2596.95 li
701.753 2598.68 li
607.293 2600.65 li
cp
.133333 .392157 .654902 rgb
f
534.071 2554.77 mo
573.903 2579.73 li
574.14 2579.07 li
662.285 2573.67 li
643.36 2568.58 li
623.389 2549.8 li
623.453 2552.56 li
534.071 2554.77 li
cp
f
577.986 2582.28 mo
604.087 2598.64 li
604.541 2597.25 li
700.623 2595.25 li
691.902 2581.63 li
669.133 2575.51 li
669.209 2576.71 li
577.986 2582.28 li
cp
f
507.029 2520.49 mo
495.937 2520.18 li
495.865 2519.57 li
475.205 2517.89 li
528.782 2551.46 li
622.675 2549.13 li
600.31 2528.1 li
507.029 2520.49 li
cp
f
521.118 2574.86 mo
521.497 2560.84 513.42 2549.25 503.077 2548.97 cv
501.979 2548.94 495.878 2548.52 494.827 2548.74 cv
494.468 2548.82 494.188 2548.99 493.849 2549.1 cv
494.771 2548.93 495.693 2548.76 496.646 2548.79 cv
506.989 2549.07 515.066 2560.67 514.687 2574.68 cv
514.309 2588.7 505.614 2599.83 495.272 2599.55 cv
494.735 2599.54 494.234 2599.37 493.712 2599.29 cv
493.853 2599.34 493.961 2599.42 494.104 2599.46 cv
495.142 2599.73 500.607 2599.7 501.701 2599.72 cv
512.045 2600.01 520.736 2588.88 521.118 2574.86 cv
cp
0 .133333 .176471 rgb
f
514.687 2574.68 mo
515.066 2560.67 506.989 2549.07 496.646 2548.79 cv
495.693 2548.76 494.771 2548.93 493.849 2549.1 cv
484.79 2550.69 477.575 2560.94 477.232 2573.66 cv
476.871 2586.95 484.143 2597.94 493.712 2599.29 cv
494.234 2599.37 494.735 2599.54 495.272 2599.55 cv
505.614 2599.83 514.309 2588.7 514.687 2574.68 cv
cp
.133333 .392157 .654902 rgb
f
626.928 2654.27 mo
625.258 2654.4 li
624.698 2654.44 li
596.204 2644.08 li
589.783 2642.29 li
589.945 2641.8 li
563.267 2632.09 li
473 2599.26 li
494.322 2634.61 li
531.173 2643.9 li
546.779 2636.85 li
557.981 2650.11 li
626.309 2664.93 li
703.217 2661.28 li
703.559 2648.61 li
626.928 2654.27 li
cp
0 .133333 .176471 rgb
f
615.269 1984.87 mo
615.269 1984.87 591.152 1979.01 570.073 1976.95 cv
548.999 1974.89 521.922 1974.89 517.194 1985.12 cv
512.469 1995.35 529.122 2015.87 529.122 2015.87 cv
542.22 2011.53 li
606.961 2021.49 li
618.166 1972.71 li
615.269 1984.87 li
cp
.8 .603922 .443137 rgb
f
618.166 1972.71 mo
539.08 1959.67 li
618.166 1972.71 li
cp
f
456.181 1977.77 mo
443.413 1754.11 li
521.12 1769.46 li
519.449 1957.93 li
456.181 1977.77 li
cp
612.629 1963.93 mo
565.295 1954.69 li
565.588 1952.99 li
543.324 1948.64 li
543.197 1892.96 541.402 1832.86 542.184 1804.04 cv
543.246 1764.78 555.979 1725.11 570.228 1692.43 cv
570.459 1688.78 li
538.59 1603.22 li
541.827 1602 li
573.094 1686 li
591.422 1645.67 611.107 1617.5 611.396 1617.08 cv
600.643 1612.36 li
495.658 1593 li
466.188 1644.56 li
443.061 1685.18 414.418 1735.91 412.275 1741.73 cv
409.192 1750.11 434.473 1924.58 432.947 1983.25 cv
432.676 1993.65 441.49 1988.1 441.49 1988.1 cv
537.97 1959.51 li
539.08 1959.67 li
543.315 1960.21 li
618.166 1972.71 li
628.664 1965.3 li
613.136 1962.27 li
612.629 1963.93 li
cp
0 .133333 .176471 rgb
f
529.122 2015.87 mo
529.122 2015.87 512.469 1995.35 517.194 1985.12 cv
521.922 1974.89 548.999 1974.89 570.073 1976.95 cv
591.152 1979.01 615.269 1984.87 615.269 1984.87 cv
618.166 1972.71 li
537.97 1959.51 li
441.49 1988.1 li
453.373 2040.94 li
529.122 2015.87 li
cp
.556863 .360784 .2 rgb
f
481.066 2368.09 mo
501.274 2335.95 li
564.758 2345.61 li
546.464 2518.11 li
499.01 2516.81 li
481.066 2368.09 li
cp
507.029 2520.49 mo
549.564 2521.64 li
568.533 2342.69 li
499.551 2332.2 li
477.48 2367.28 li
495.937 2520.18 li
507.029 2520.49 li
cp
0 .133333 .176471 rgb
f
517.642 1772.3 mo
516.022 1955.4 li
459.362 1973.17 li
447.109 1758.37 li
517.642 1772.3 li
cp
521.12 1769.46 mo
443.413 1754.11 li
456.181 1977.77 li
519.449 1957.93 li
521.12 1769.46 li
cp
f
202.659 922.47 mo
211.175 892.976 232.866 873.149 251.11 878.185 cv
251.581 878.315 251.964 878.63 252.42 878.789 cv
254.869 877.691 257.466 876.88 260.222 876.474 cv
270.926 874.846 281.736 878.892 288.519 886.958 cv
301.771 902.725 290.366 979.898 275.44 997.871 cv
269.039 1005.58 259.049 1009.95 248.644 1009.95 cv
246.093 1009.95 243.52 1009.69 240.971 1009.15 cv
228.217 1006.45 218.808 997.549 215.182 984.736 cv
215.042 984.24 214.991 983.667 214.872 983.149 cv
214.319 982.599 213.733 982.073 213.252 981.455 cv
200.192 971.934 195.344 947.805 202.659 922.47 cv
cp
189.596 933.784 mo
188.745 936.772 169.535 1007.1 225.576 1023.99 cv
279.916 1040.39 307.432 1000.77 318.985 975.692 cv
328.435 955.127 328.687 934.817 328.687 934.817 cv
328.687 933.044 li
374.242 936.348 li
537.477 912.282 li
517.84 900.205 li
494.562 885.807 458.271 863.093 453.312 858.327 cv
452.765 857.805 451.403 856.922 449.652 855.888 cv
427.753 842.956 316.709 795.584 238.342 846.778 cv
207.365 867.015 189.058 898.461 178.378 931.59 cv
190.217 931.59 li
189.596 933.784 li
cp
.6 .611765 .615686 rgb
f
280.066 945.568 mo
271.55 975.061 249.859 994.888 231.615 989.852 cv
229.998 989.405 222.965 987.753 219.703 986.621 cv
223.512 996.555 231.242 1003.56 241.687 1005.77 cv
253.401 1008.28 265.626 1004.29 272.799 995.658 cv
288.031 977.304 297.213 902.664 285.877 889.183 cv
280.74 883.07 272.948 879.577 264.858 879.577 cv
263.485 879.577 262.11 879.679 260.735 879.881 cv
259.447 880.073 258.291 880.566 257.08 880.937 cv
257.445 881.171 257.774 881.465 258.131 881.723 cv
260.11 882.333 261.795 882.864 262.453 883.043 cv
280.696 888.079 288.581 916.072 280.066 945.568 cv
cp
f
207.619 1051.18 mo
260.088 1051.18 li
260.088 1072.13 li
207.619 1069.87 li
207.619 1051.18 li
cp
299.174 1078.46 mo
299.174 1078.46 357.54 999.005 360.504 990.448 cv
363.467 981.891 374.242 936.348 374.242 936.348 cv
373.493 939.5 li
332.076 936.617 li
331.807 942.088 330.335 959.244 322.113 977.135 cv
312.07 998.953 290.392 1031.35 250.301 1031.35 cv
242.453 1031.35 233.895 1030.11 224.577 1027.3 cv
171.005 1011.15 182.802 947.692 185.726 935.039 cv
177.786 935.039 li
177.786 933.433 li
156.615 1001 166.846 1074.86 166.846 1074.86 cv
299.174 1078.46 li
cp
f
256.636 1068.51 mo
256.636 1054.64 li
211.071 1054.64 li
211.071 1066.55 li
256.636 1068.51 li
cp
f
835.334 1154.73 mo
835.441 1151.27 li
835.758 1151.28 li
836.229 1118.91 836.907 1057.9 835.438 1051.17 cv
833.427 1041.98 815.794 982.896 815.794 982.896 cv
815.794 982.896 804.967 987.334 795.252 984.269 cv
795.252 984.269 825.318 1055.83 824.756 1063.65 cv
824.362 1069.09 819.364 1118.47 816.347 1148.11 cv
818.643 1147.81 li
819.103 1151.23 li
818.661 1151.29 817.482 1151.45 815.987 1151.64 cv
814.077 1170.36 li
835.448 1171.34 li
835.706 1154.74 li
835.334 1154.73 li
cp
0 .133333 .176471 rgb
f
656.267 1196.77 mo
670.366 1224 li
684.052 1224 li
672.727 1198.11 li
656.267 1196.77 li
cp
f
616.512 1191.79 mo
636.273 1195.65 li
648.811 1226.88 li
631.947 1226.52 li
616.512 1191.79 li
cp
653.961 1230.44 mo
638.78 1192.62 li
610.66 1187.14 li
629.683 1229.92 li
653.961 1230.44 li
cp
f
684.052 1224 mo
670.366 1224 li
656.267 1196.77 li
672.727 1198.11 li
684.052 1224 li
cp
668.264 1227.45 mo
689.334 1227.45 li
675.071 1194.83 li
650.335 1192.82 li
668.264 1227.45 li
cp
f
694.971 1201 mo
709.53 1201 li
716.271 1220.7 li
702.33 1220.7 li
694.971 1201 li
cp
721.098 1224.15 mo
711.983 1197.56 li
690.009 1197.56 li
699.931 1224.15 li
721.098 1224.15 li
cp
f
901.983 1218.38 mo
889.838 1216.2 li
896.578 1190.96 li
914.185 1190.53 li
901.983 1218.38 li
cp
885.524 1218.94 mo
904.061 1222.26 li
919.523 1186.94 li
893.908 1187.57 li
885.524 1218.94 li
cp
f
932.532 1220.7 mo
919.348 1220.7 li
930.524 1191.19 li
944.907 1191.19 li
932.532 1220.7 li
cp
950.11 1187.74 mo
928.15 1187.74 li
914.361 1224.15 li
934.824 1224.15 li
950.11 1187.74 li
cp
f
711.795 925.467 mo
698.597 943.788 li
577.739 911.797 li
608.287 896.854 li
605.698 877.402 li
708.896 909.447 li
711.795 925.467 li
cp
601.546 872.508 mo
604.567 894.834 li
567.899 912.77 li
701.132 946.166 li
715.461 926.292 li
711.916 906.777 li
601.546 872.508 li
cp
f
904.842 872.805 mo
924.813 916.287 li
850.378 894.413 li
840.375 875.184 li
855.894 856.762 li
863.564 868.294 li
904.842 872.805 li
cp
846.342 862.743 mo
836.251 874.725 li
847.979 897.257 li
929.937 920.932 li
908.259 872.054 li
905.183 870.896 902.198 869.793 899.282 868.726 cv
865.533 865.048 li
858.708 854.771 li
856.057 853.892 li
856.057 853.892 857.044 854.238 858.708 854.771 cv
856.217 851.021 li
846.342 862.743 li
cp
f
728.829 951.962 mo
734.054 926.224 li
730.518 926.343 li
725.456 951.286 li
728.829 951.962 li
cp
f
768.448 958.949 mo
772.267 959.491 li
760.704 925.328 li
757.44 926.434 li
768.448 958.949 li
cp
f
814.453 960.305 mo
818.283 959.563 li
786.938 920.932 li
784.269 923.104 li
814.453 960.305 li
cp
f
815.359 912.633 mo
814.547 914.231 li
872.05 943.353 li
876.516 941.75 li
816.11 911.157 li
815.359 912.633 li
cp
f
684.968 1073.29 mo
684.968 1077.47 li
615.041 1118.58 li
613.533 1109.68 li
684.968 1073.29 li
cp
612.479 1124.09 mo
688.419 1079.44 li
688.419 1067.65 li
609.705 1107.75 li
612.479 1124.09 li
cp
f
967.517 1106.5 mo
921.193 1069.98 li
924.229 1063.84 li
973.582 1101.48 li
967.517 1106.5 li
cp
922.986 1058.55 mo
916.854 1070.96 li
967.568 1110.93 li
979.137 1101.38 li
922.986 1058.55 li
cp
f
260.735 879.881 mo
262.11 879.679 263.485 879.577 264.858 879.577 cv
272.948 879.577 280.74 883.07 285.877 889.183 cv
297.213 902.664 288.031 977.304 272.799 995.658 cv
265.626 1004.29 253.401 1008.28 241.687 1005.77 cv
231.242 1003.56 223.512 996.555 219.703 986.621 cv
219.066 986.402 218.525 986.193 218.248 986.026 cv
216.938 985.235 215.912 984.187 214.872 983.149 cv
214.991 983.667 215.042 984.24 215.182 984.736 cv
218.808 997.549 228.217 1006.45 240.971 1009.15 cv
243.52 1009.69 246.093 1009.95 248.644 1009.95 cv
259.049 1009.95 269.039 1005.58 275.44 997.871 cv
290.366 979.898 301.771 902.725 288.519 886.958 cv
281.736 878.892 270.926 874.846 260.222 876.474 cv
257.466 876.88 254.869 877.691 252.42 878.789 cv
254.047 879.359 255.637 880.005 257.08 880.937 cv
258.291 880.566 259.447 880.073 260.735 879.881 cv
cp
f
219.703 986.621 mo
222.965 987.753 229.998 989.405 231.615 989.852 cv
249.859 994.888 271.55 975.061 280.066 945.568 cv
288.581 916.072 280.696 888.079 262.453 883.043 cv
261.795 882.864 260.11 882.333 258.131 881.723 cv
271.192 891.243 276.039 915.37 268.726 940.706 cv
260.21 970.202 238.519 990.029 220.273 984.992 cv
217.702 984.284 215.396 983.017 213.252 981.455 cv
213.733 982.073 214.319 982.599 214.872 983.149 cv
215.912 984.187 216.938 985.235 218.248 986.026 cv
218.525 986.193 219.066 986.402 219.703 986.621 cv
cp
.133333 .392157 .654902 rgb
f
213.252 981.455 mo
215.396 983.017 217.702 984.284 220.273 984.992 cv
238.519 990.029 260.21 970.202 268.726 940.706 cv
276.039 915.37 271.192 891.243 258.131 881.723 cv
257.774 881.465 257.445 881.171 257.08 880.937 cv
255.637 880.005 254.047 879.359 252.42 878.789 cv
251.964 878.63 251.581 878.315 251.11 878.185 cv
232.866 873.149 211.175 892.976 202.659 922.47 cv
195.344 947.805 200.192 971.934 213.252 981.455 cv
cp
0 .133333 .176471 rgb
f
858.708 854.771 mo
861.451 855.648 li
856.057 853.892 li
858.708 854.771 li
cp
.6 .611765 .615686 rgb
f
908.259 872.054 mo
922.283 877.327 937.717 883.469 952.755 890.138 cv
960.717 893.669 968.536 897.337 976.06 901.134 cv
976.176 901.191 976.295 901.248 976.411 901.308 cv
976.358 900.951 li
976.358 900.951 978.842 902.424 982.885 904.667 cv
1001.92 915.229 1018.59 926.17 1030.17 937.723 cv
1030.27 937.816 1030.38 937.913 1030.48 938.006 cv
1047.59 954.737 1047.41 958.531 1047.41 958.531 cv
1140.75 940.614 li
1140.75 940.614 1127.05 864.951 1066.81 830.629 cv
1040.33 815.544 1017.52 807.249 983.775 801.459 cv
937.178 793.466 887.721 817.175 861.451 855.648 cv
868.65 857.986 882.508 862.584 899.282 868.726 cv
902.198 869.793 905.183 870.896 908.259 872.054 cv
cp
f
1096.61 1500.04 mo
980.756 1508.13 li
983.775 1568.46 li
983.775 1568.46 1018.34 1569.15 1038.24 1568.46 cv
1063.52 1567.57 1101.3 1563.99 1113.13 1562.83 cv
1116.86 1562.46 li
1130.83 1465.37 li
1122.85 1462.21 li
1096.61 1500.04 li
cp
f
999.304 1498.97 mo
980.756 1508.13 li
1096.61 1500.04 li
1122.85 1462.21 li
1115.46 1456.09 li
1089.95 1492.72 li
999.304 1498.97 li
cp
0 .133333 .176471 rgb
f
572.631 1932.32 mo
615.959 1941.2 li
610.229 1959.94 li
569.261 1951.95 li
572.631 1932.32 li
cp
612.629 1963.93 mo
620.353 1938.58 li
569.828 1928.22 li
565.295 1954.69 li
612.629 1963.93 li
cp
f
845.149 1924.79 mo
881.776 1929.43 li
879.861 1946.13 li
845.149 1943.34 li
845.149 1924.79 li
cp
882.907 1949.86 mo
885.604 1926.44 li
841.696 1920.88 li
841.696 1946.52 li
882.907 1949.86 li
cp
f
211.071 1054.64 mo
256.636 1054.64 li
256.636 1068.51 li
211.071 1066.55 li
211.071 1054.64 li
cp
260.088 1072.13 mo
260.088 1051.18 li
207.619 1051.18 li
207.619 1069.87 li
260.088 1072.13 li
cp
f
185.726 935.039 mo
182.802 947.692 171.005 1011.15 224.577 1027.3 cv
233.895 1030.11 242.453 1031.35 250.301 1031.35 cv
290.392 1031.35 312.07 998.953 322.113 977.135 cv
330.335 959.244 331.807 942.088 332.076 936.617 cv
373.493 939.5 li
374.242 936.348 li
328.687 933.044 li
328.687 934.817 li
328.687 934.817 328.435 955.127 318.985 975.692 cv
307.432 1000.77 279.916 1040.39 225.576 1023.99 cv
169.535 1007.1 188.745 936.772 189.596 933.784 cv
190.217 931.59 li
177.786 931.59 li
177.786 935.039 li
185.726 935.039 li
cp
f
602.287 1148.92 mo
610.674 1159.02 640.035 1162.29 674.586 1162.29 cv
730.74 1162.29 800.375 1153.67 815.987 1151.64 cv
817.482 1151.45 818.661 1151.29 819.103 1151.23 cv
818.643 1147.81 li
816.347 1148.11 li
794.75 1150.89 625.727 1171.76 604.957 1146.72 cv
582.524 1119.69 537.907 914.311 537.477 912.282 cv
534.106 912.996 li
534.153 913.222 534.246 913.651 534.354 914.15 cv
538.227 932.097 579.952 1121.99 602.287 1148.92 cv
cp
f
996.675 1105.33 mo
997.12 1112.19 980.836 1137.63 961.639 1146.24 cv
943.55 1154.33 839.729 1151.4 835.758 1151.28 cv
835.441 1151.27 li
835.334 1154.73 li
835.706 1154.74 li
838.589 1154.82 857.881 1155.37 880.912 1155.37 cv
913.014 1155.37 952.093 1154.29 963.039 1149.39 cv
981.899 1140.94 1000.72 1114.51 1000.13 1105.11 cv
999.601 1096.87 967.253 914.963 965.892 907.245 cv
962.854 909.051 li
963.193 910.938 996.162 1097.28 996.675 1105.33 cv
cp
f
1123.38 1150.26 mo
1123.68 1145.3 1125.81 1106.71 1123.57 1053.73 cv
1121.51 1004.82 1112.91 985.202 1110.21 980.201 cv
1123.18 969.175 li
1122.31 965.374 li
1105.72 979.506 li
1106.57 980.786 li
1106.57 980.786 1117.78 998.204 1120.12 1053.88 cv
1122.08 1100.14 1120.68 1135.32 1120.11 1146.65 cv
1116.96 1143.4 1113.52 1140.47 1109.7 1138.09 cv
1102.31 1133.5 1094.33 1131.41 1085.94 1131.6 cv
1082.57 1131.68 1079.16 1132.03 1075.66 1132.88 cv
1053.02 1138.4 1031.7 1154.09 1014.51 1170.48 cv
1011.78 1163.48 1004.91 1145.52 998.198 1125.07 cv
996.293 1130.28 li
998.372 1136.49 1000.44 1142.44 1002.36 1147.82 cv
995.041 1133.71 li
993.429 1138.11 li
1011.67 1173.24 li
990.186 1194.38 975.815 1215.82 974.764 1217.46 cv
977.197 1220.7 li
977.415 1220.38 li
979.839 1216.72 1025.93 1148.56 1076.47 1136.24 cv
1079.71 1135.44 1082.87 1135.11 1085.98 1135.04 cv
1093.73 1134.86 1101.08 1136.79 1107.87 1141.02 cv
1135.06 1157.91 1145.72 1204.48 1145.83 1204.96 cv
1147.51 1204.58 li
1147.14 1202.97 1141.09 1171.39 1123.38 1150.26 cv
cp
f
698.26 1337.08 mo
698.491 1336.92 li
701.252 1335.08 766.261 1292.27 826.383 1298.82 cv
886.833 1305.49 900.382 1327.12 900.488 1327.32 cv
901.419 1323.12 li
900.907 1322.21 889.326 1302.28 826.761 1295.4 cv
765.809 1288.66 701.095 1331 697.879 1333.15 cv
697.594 1333.33 li
698.26 1337.08 li
cp
f
707.775 1402.83 mo
708.017 1402.65 li
710.674 1400.61 759.49 1363.86 806.04 1363.86 cv
806.432 1363.86 806.837 1363.86 807.24 1363.86 cv
855.07 1364.52 884.821 1393.69 885.104 1393.98 cv
886.114 1390.42 li
885.817 1390.13 856.581 1361.08 807.295 1360.41 cv
806.876 1360.41 806.459 1360.41 806.04 1360.41 cv
758.847 1360.41 711.094 1396.17 707.529 1398.88 cv
707.182 1399.15 li
707.775 1402.83 li
cp
f
714.515 1463.58 mo
715.354 1462.86 759.171 1425.36 805.354 1425.36 cv
806.727 1425.36 808.115 1425.39 809.506 1425.47 cv
856.715 1427.85 867.485 1455.32 867.58 1455.58 cv
868.998 1450.98 li
868.58 1449.82 859.37 1424.53 809.666 1422.01 cv
760.541 1419.59 714.673 1459 714.186 1459.42 cv
714.515 1463.58 li
cp
f
853.015 1507.36 mo
852.86 1507.09 li
851.701 1504.95 837.908 1481.02 800.256 1477.98 cv
798.719 1477.85 797.171 1477.79 795.607 1477.79 cv
758.547 1477.79 719.18 1511.44 717.442 1512.95 cv
717.611 1517.38 li
718.029 1517.01 759.814 1481.25 795.687 1481.25 cv
797.115 1481.25 798.559 1481.3 799.986 1481.42 cv
836.379 1484.37 851.431 1510.77 851.689 1511.26 cv
853.015 1507.36 li
cp
f
718.806 1578.01 mo
718.806 1578.81 li
719.132 1578.45 754.186 1540.7 785.919 1540.59 cv
817.213 1540.59 834.838 1569.06 835.099 1569.46 cv
836.364 1565.32 li
836.299 1565.22 li
835.796 1564.4 818.931 1537.13 785.919 1537.13 cv
752.67 1537.25 720.206 1572.22 718.806 1573.75 cv
718.806 1578.01 li
cp
f
718.001 1615.58 mo
718.001 1615.58 li
718.662 1614.93 746.288 1588.09 779.158 1588.09 cv
779.712 1588.09 780.264 1588.09 780.819 1588.11 cv
814.197 1588.99 822.609 1611.54 823.028 1612.61 cv
824.262 1608.9 li
824.154 1608.61 816.622 1585.6 780.898 1584.65 cv
780.305 1584.64 779.712 1584.63 779.118 1584.63 cv
745.475 1584.63 720.493 1608.19 718.251 1610.38 cv
717.956 1610.66 li
718.001 1615.58 li
cp
f
540.924 1267.38 mo
540.924 1237.23 li
592.704 1219.51 li
590.682 1188.62 li
587.229 1188.85 li
589.092 1217.09 li
537.472 1234.76 li
537.472 1264.6 li
407.961 1293.17 li
408.715 1296.54 li
540.924 1267.38 li
cp
f
433.99 1206.61 mo
431.96 1204.5 411.06 1182.85 385.074 1159.6 cv
386.007 1155.01 391.937 1125.48 400.031 1077.82 cv
407.206 1035.6 406.464 1001.21 406.194 993.727 cv
479.71 979.51 li
490.924 1065.82 459.192 1153.38 433.99 1206.61 cv
cp
523.547 1242.15 mo
518.771 1170.31 li
519.776 1169.8 li
518.697 1169.18 li
518.475 1165.84 li
546.003 1155.59 li
546.003 1155.59 543.864 1133.27 528.81 1087.99 cv
513.752 1042.72 484.953 960.295 484.953 960.295 cv
488.016 946.028 496.81 937.394 503.004 932.907 cv
474.191 950.141 li
476.372 958.751 477.954 967.417 479.198 976.101 cv
402.595 990.91 li
402.675 992.414 li
402.701 992.786 404.645 1030.06 396.636 1077.24 cv
389.329 1120.26 383.785 1148.46 382.096 1156.92 cv
354.691 1132.65 322.361 1107.42 300.57 1101.48 cv
293.171 1099.45 285.214 1099.39 277.108 1100.49 cv
265.084 1102.11 252.745 1106.49 241.214 1112 cv
241.666 1109.76 242.959 1103.65 246.06 1090.74 cv
240.351 1091.01 li
237.094 1113.99 li
213.088 1126.16 193.767 1141.95 190.563 1144.62 cv
190.395 1144.76 190.024 1145.07 190.024 1145.07 cv
188.652 1150.4 li
188.652 1150.4 188.946 1150.16 189.093 1150.04 cv
192.869 1146.91 237.598 1110.68 276.283 1104.3 cv
284.498 1102.95 292.455 1102.83 299.653 1104.8 cv
342.456 1116.49 431.538 1208.74 432.44 1209.67 cv
433.087 1208.5 li
432.035 1210.7 430.992 1212.88 429.969 1214.96 cv
515.418 1171.99 li
519.906 1239.6 li
406.006 1271.92 li
406.948 1275.24 li
523.547 1242.15 li
cp
f
563.895 1846.62 mo
573.938 1688.27 li
541.827 1602 li
538.59 1603.22 li
570.459 1688.78 li
560.255 1849.58 li
650.058 1862.78 li
650.604 1859.36 li
563.895 1846.62 li
cp
f
828.285 1686.92 mo
825.736 1699.63 li
834.943 1864.49 li
907.862 1872.56 li
908.239 1869.13 li
838.232 1861.39 li
828.445 1686.18 li
828.285 1686.92 li
cp
f
501.701 2599.72 mo
500.607 2599.7 495.142 2599.73 494.104 2599.46 cv
493.961 2599.42 493.853 2599.34 493.712 2599.29 cv
484.143 2597.94 476.871 2586.95 477.232 2573.66 cv
477.575 2560.94 484.79 2550.69 493.849 2549.1 cv
494.188 2548.99 494.468 2548.82 494.827 2548.74 cv
495.878 2548.52 501.979 2548.94 503.077 2548.97 cv
513.42 2549.25 521.497 2560.84 521.118 2574.86 cv
520.736 2588.88 512.045 2600.01 501.701 2599.72 cv
cp
528.782 2551.46 mo
475.205 2517.89 li
473 2599.26 li
563.267 2632.09 li
589.945 2641.8 li
589.783 2642.29 li
596.204 2644.08 li
624.698 2654.44 li
625.258 2654.4 li
703.559 2648.61 li
712.547 2616.38 li
713.062 2616.37 li
713.008 2612.92 li
630.383 2614.47 li
630.306 2615.07 li
607.293 2600.65 li
701.753 2598.68 li
701.671 2595.23 li
604.541 2597.25 li
604.087 2598.64 li
577.986 2582.28 li
669.209 2576.71 li
668.991 2573.26 li
574.14 2579.07 li
573.903 2579.73 li
534.071 2554.77 li
623.453 2552.56 li
623.374 2549.11 li
528.782 2551.46 li
cp
f
766.636 2521.21 mo
744.312 2346.94 li
783.216 2310.15 li
845.916 2316.2 li
831.424 2480.53 li
783.575 2479.98 li
766.636 2521.21 li
cp
832.499 2508.66 mo
787.006 2483.06 li
833.986 2483.06 li
834.715 2482.56 li
849.664 2313.1 li
781.977 2306.56 li
740.67 2345.64 li
764.542 2532.68 li
781.83 2490.89 li
773.086 2523.7 li
775.699 2520.85 778.806 2518.82 782.209 2517.94 cv
782.548 2517.81 782.829 2517.61 783.189 2517.51 cv
784.242 2517.21 790.345 2517.04 791.44 2516.96 cv
801.784 2516.27 809.859 2526.58 809.48 2539.97 cv
809.101 2553.37 800.407 2564.78 790.065 2565.47 cv
788.969 2565.54 783.506 2566.08 782.469 2565.92 cv
782.321 2565.89 782.211 2565.82 782.067 2565.79 cv
774.256 2565.45 768.047 2558.85 766.211 2549.5 cv
761.363 2567.68 li
805.773 2578.97 li
805.691 2579.19 li
808.926 2580.4 li
809.144 2579.83 li
913.063 2606.24 li
991.924 2593.4 li
1000.89 2561.93 li
1001.54 2561.88 li
1001.39 2560.15 li
1001.25 2558.43 li
931.031 2564.29 li
911.472 2553.26 li
989.934 2545.63 li
989.612 2542.21 li
906.216 2550.3 li
884.669 2538.14 li
957.229 2528.54 li
956.771 2525.11 li
879.654 2535.31 li
838.179 2511.92 li
913.564 2509.78 li
913.456 2506.32 li
832.499 2508.66 li
cp
f
1058.07 1593.15 mo
1027.1 1595.21 995.439 1584.56 995.127 1584.45 cv
996.138 1588.34 li
996.421 1588.44 1021.44 1596.86 1049.86 1596.86 cv
1052.65 1596.86 1055.48 1596.77 1058.28 1596.59 cv
1089.7 1594.51 1104 1587.92 1110.25 1585.53 cv
1110.78 1581.48 li
1106.82 1582.56 1088.87 1591.11 1058.07 1593.15 cv
cp
f
1001.22 1607.84 mo
1002.15 1611.73 li
1002.41 1611.83 1025.39 1620.25 1051.49 1620.25 cv
1054.05 1620.25 1056.65 1620.16 1059.23 1619.97 cv
1088.08 1617.9 1101.22 1611.3 1106.95 1608.91 cv
1107.44 1604.86 li
1103.81 1605.95 1087.32 1614.49 1059.03 1616.53 cv
1030.59 1618.6 1001.51 1607.95 1001.22 1607.84 cv
cp
f
1060.16 1635.22 mo
1033.59 1637.28 1006.41 1626.63 1006.15 1626.52 cv
1007.01 1630.41 li
1007.26 1630.51 1028.73 1638.93 1053.11 1638.93 cv
1055.5 1638.93 1057.93 1638.84 1060.34 1638.65 cv
1087.25 1636.58 1099.53 1630 1104.91 1627.61 cv
1105.38 1623.54 li
1101.99 1624.63 1086.59 1633.17 1060.16 1635.22 cv
cp
f
247.799 1604.62 mo
248.204 1604.75 282.743 1615.81 314.67 1615.81 cv
318.162 1615.81 321.601 1615.68 324.957 1615.36 cv
359.132 1612.29 382.771 1592.94 383.836 1592.06 cv
384.213 1587.6 li
382.951 1588.58 357.717 1608.95 324.634 1611.94 cv
291.524 1614.79 247.05 1600.67 246.62 1600.52 cv
247.799 1604.62 li
cp
f
258.816 1642.95 mo
260.146 1643.42 290.571 1654.1 318.797 1654.1 cv
321.934 1654.1 325.023 1653.96 328.037 1653.65 cv
358.745 1650.58 379.986 1631.23 380.946 1630.35 cv
381.279 1625.88 li
380.151 1626.87 357.475 1647.24 327.75 1650.23 cv
297.998 1653.07 258.036 1638.96 257.646 1638.81 cv
258.707 1642.91 li
258.816 1642.95 li
cp
f
331.31 1690.26 mo
305.144 1693.1 269.472 1678.95 269.119 1678.8 cv
270.346 1683.05 li
270.651 1683.17 298.191 1694.13 323.436 1694.13 cv
326.196 1694.13 328.911 1693.99 331.565 1693.68 cv
357.965 1690.68 376.289 1672.25 377.902 1670.59 cv
378.107 1670.38 li
378.403 1665.92 li
378.263 1666.05 li
376.76 1667.55 357.093 1687.31 331.31 1690.26 cv
cp
f
275.663 1728.37 mo
276.622 1729.06 277.369 1729.59 277.587 1729.74 cv
278.193 1730.16 278.867 1730.34 279.542 1730.34 cv
280.631 1730.34 281.723 1729.82 282.385 1728.85 cv
283.463 1727.27 283.058 1725.13 281.494 1724.05 cv
281.494 1724.05 280.891 1723.62 280.127 1723.06 cv
278.235 1721.69 274.369 1718.76 269.328 1714.51 cv
250.587 1698.7 216.175 1664.65 210.665 1623.71 cv
206.519 1592.97 219.611 1568.8 232.282 1553.19 cv
233.935 1551.16 235.576 1549.23 237.176 1547.49 cv
240.626 1551.37 245.26 1553.78 250.392 1553.78 cv
261.024 1553.78 269.642 1543.58 269.642 1531 cv
269.642 1518.43 261.024 1508.23 250.392 1508.23 cv
239.758 1508.23 231.141 1518.43 231.141 1531 cv
231.141 1534.81 232.004 1538.34 233.4 1541.5 cv
232.251 1542.71 231.086 1544.02 229.894 1545.38 cv
215.512 1561.86 199.03 1589.1 203.816 1624.63 cv
209.841 1669.29 246.912 1705.12 266.134 1720.96 cv
270.415 1724.49 273.694 1726.94 275.663 1728.37 cv
cp
.133333 .392157 .654902 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 23.0.2
%%For: (Maksim) ()
%%Title: (2010.w301.n001.18B.p1.18-temp_01.eps)
%%CreationDate: 11/17/2020 7:19 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3XXnfC8\5^97&L5\u6aHEkn8-n*_`J,k]E%'\(2qnr$[hmI&/#RVJG'0,44(aa$1<\KY.ZEt<)H`aU$WlE:J2LUN;bVOk3
%@sM,I0u*[*C$EDmf/k3b`/)@D^li</f@4$\S7S#Y:+'I.9WPMa9Dm:C^([UUB/JM*hIr:kqr/'e</3ZB6h)UB2"\.h279S_MD1ig
%Ij1F:3m\6=^gk"TYZ5H1b'FQolfH#2SF;Oqne:h^f=P>(&S>SdU\"Go)]?R5Iol*aor?F(>$BN3>7X"&N?(W5d_+GfkQr(7`e!#I
%39a*$'s6*O;J^^_-ogPtI5jX9QYg5*L\-a;,*r-^p+QBa.fBS72pC9r!SI8o4Q_%(:S@=?E_2dRUAtqe'1=h)fcA^h'4B!55n\HF
%d$sEWf%#U&,uK\Y0YPQtn9=)c!tOlFTY.AA.@&j9$7e_4Q'^G[bGsX(%6Vu<rJ.*H^?I`+[Ba]'U5iC4]^Z@t8sI?H+I9@[T(a/7
%FjVtU^d'rP8k!c0QLtFsWBEkbTqRS(Cr/sQU7bXh]aIGJ2L6d69qT9Vp:8XY1Saou;):4ZP&+?@(!K=&DjXO,f#P[A&Pi#(K#%-q
%7<51NTim1(Bf`$K&3,1rZn.uJEhJRubGZ>]bqLfl&PcedB-J.S<CXChG2G't"1=CST0baJ<>!4C?ZlA&BEJpZ?+o>RL?5!>-\INu
%-?>9Yk:"i+c!j=%J;GC.Q;`/<U)+%bBI1'h#4m_2!j_[?(]W/7-H3b2cf:oKiMW^8B-Q<AniZp5Gs':AGa@OWflW[)VqiU)_'B?%
%8J6VH&qW\Q3pd?UWX,B"#c#6Il)q#lVQ'oV8,.pKM$/DV'%f((^b^fM_PGY*2P$-ZdQO-jJ976'U.A4I.7SDSH5=+RkBS,[iu\Ck
%]'pBLO=l;lH4GeK:P;$.n<;5eY_.*g]'pBJ+]8#k6W%ICTogc$,dcS42BuKe/*/5!!5XaRr'Zoo)VZ5\&`bC=.5*-Nn<8$le5HDs
%q@l"P5=+-<Plj@&&.E9k:E56!P#>'$fn.*D"@F(J8Q43ec:B1/i\r-El2c@faC>m4+rJaaT2_1W>psbC"urNU$Nt`FP8qtI'IiJ_
%N&&`<%AfX/5`hnBd@'7ONn>b9o7J_fTVJ8Q+R)WMVl,YHr'W6=lUW8^$ginF#_N7HG=Tgs9;:dJF&5STeCd\;8+-`S<+W"+3(DoK
%Q?&VW7sRmCVT^:+4+_J9UZ`qi1HunO%RA@h*ufK?W)U+&lm[SN&8C]&<I&!NZk%8&XES&b%^Q@_5W.B&JUo/2mK7<H/:SdZLXuWB
%+AND.8bW6Y*-<3cSXJ`XZn'<Tj9P_=Y*-2B30'RKr1uUh8''$70E$IiU.CaXJ*E"Fe*hq(oLDdBG=CcBY1PtD(d0bO97Pr@qL.k"
%r]p3gOu<dKd[sKrINSKa5>;*tp@B\"r1rn[hjn]X0@IoJ#sh64e&^(5:ROkR@nJf($i!duE[a`f(8u7'SV0qg#2Qg(,Gl1[)+=IE
%GVY!/)1f5Z?O"ip<&b[iVaZ[I_P2FCU$fup)uuc`VsJ:Vc5U9OQ^&4=<eLl0Q:;^c*f<3pQ0"g_b+^F6<!(2f\/5T=0f#4(?%;oX
%!Z4Lp@LNZ5dK:=B&YnrS.O0d"Qfc^);!3p-$/e\a.jYX;Gm=:)8IPh:P@UIQ)#5iEE&'0R"p#3k4I6-AOs28oS1Lu>J';g2FY]g2
%_dR'Y'>Y61J:oD1aM8W[8WZllIJ>H?M+A\0QUR%5[%`Wn/.n'Z@SGj:38jj5LPX&k('FtMPG/Cd-mGr,R)&eb&i,mh!Jn"N"AC#<
%dWo@PJKd`RB*j]$"?[p*.-l[[m*dA6"<n-l@"gR\R@XGn_n:d;#Z<#/`;C!>-9j3gIT7YDKpESO::6**hgn02O=#XtTSO=UjA*;g
%(lSrq-)ts@4H_sa"Zh5318gcH+fRdJi<f'G4j'!49Ypab#7SP5JY6!TE$5(:$:KOu,(Z]a1)UU!+_W0P3B0Ndc91;_aC9]^W"B"Q
%Jjds>'h"7#(@p0K&f=0R_0;nOW&P9A0G%_uSD@2>oFej7,k.IHJ-i5+eMt136`En/7-)g1U7cG?2Y7&k'(I+.;)KZPTV-gI$!!AF
%K*8rb]Bkodr?"c7^,"CCc:6tCP"?8.;[C:;&O.I`U0Rn\VuquR/W0NT\=pkN/5:0[7(gbED57Q$#*$WJqrk*!hafZZ8NHnO7F$P!
%&TmCensqa``/>a4LF.Z%J^K!f@"Q$cO%<Q,isHbo6&>L.n4WZ\H7&PYV'R\/6""MoEe2kbdQ+`^Tb-!!cBH"2E0OW1MPuujmLJN7
%_2.[7)M6c[lA?V-\iGh!\,Z.^N]b?jE+!-p1":1Hh8!D&)f<Xm&PW7BP?`?)%d0g38rdhdl:LXer]3feO#0!dHu5_!d9ZZM#2b8`
%g+e<lJV-j4;I;r-Ra#n'6Ai"*R1?F>+l4aJ+GC^\nr@>&qU2c'OJCN*eJCDZ'LrQF`:u;R,W[>OEB/K%G.*BrUI-8\a?#.bAmgK5
%F4'E;-e&\!)+laen3`\S%2MB%SJ*^r,QKD,3Nb?4Sa_=k3='99ifLkTeJNnR^OmaX+bA).nd&"K[,X5f4JF>h_!hRL)$-KCL*l3;
%UpLfg&j5r7PS%o#Z@`k^P-U2tr1I;FXpi:'FEWB`30FheO3&!g@Kq'b=[j:op'15q%$<PE6DP1Y%hWlXMB&k\TC#C91e&He5=*":
%0Oen)SJKmaD.Ff;fF50c_=W\jDMXqQ_1n"\C;Rt]LcGQ)GChB(aC7?l+A3@p)e#aIP044Ek40cT8it+'^?"FXPFBkW#lSX'-.9Kq
%!i3Y^NdtUVG#3=KRY[*Q9ElfR%38SkAWUST[bUb3U/mtDFBG$?QlZZh22!U[V1p_Gm"i-7gmA^e`?\:aOFa>2R*T.iL<4uu-AS9d
%e3Vi&&4a%I^pm[XRs#d5U7&6,%DiR2g8HS_186OC;(*(3\+Y5"`JuV^n<:Wp^mGfcGLgb^e?_,*p?c$/%Q[$4*(YqI?2`!)k&;Tr
%<ZG-QDhBmh,4u4@SB2q$n%/UeB1:G5!':3c<;Xd7MFJSK=eUHdN(eL^Q'Dh:#Z!0:I8l^V-q1I71+((5FBmf*<?`dPN?@A*J1*!-
%&2Q`rW(q(u#E>^?5b0Z%`D^k\-Op^(O[Fib8oE<,nhJ['(PO)BMC%t`-FD5i"HfG,Fm+%KC=4[hqOPK$_%GP!Tf<;ko^((G+>1^1
%8>\t[hc<o.O.dj@)@P\rR.6:YRjC)()KT&.bZQ(iC6X:p@9,0p!O@n/gK99MW"Q%uA;qJW_"OQ^W\J5hPZ92VjV5`BW9$sgPEa]P
%#A>Lc(P!50Z*"dQ(8P^,d'F@-ZLP<.:nB-gFTF7VXO%*')Crquae6SKnAl2Vq;;>\1TB;GAgPp/K=hueasdX+1(IkW&(u-*P]gf9
%33"Jd@@U;Q7/O^gg?B2Bb;6aA__=X%_nhj6Jgg?!.)d&6M@da`nodJsb8g.$5Sm(,-,*qE+;n(.o$U:`W,/EKg=6igl>6Rq=btnU
%5Vg0<+eF`E2t;#9+VK'u?@noD7XH#r+'M5JUJ;G95RiLYd@.hrGpg'Gh*jhNSE,>;`u&=_`_(ZPP87%tA@k>m0?p:`7uj%"1TWq\
%dCOmK3_;O"_@H^"_d'59mO@MUOU[i=G1^?=J>^Vd3Lj"riZo5,\dOXdTgB_pd2=@u^hpER<gF"T`/KO?#>/KbWm[^SKo1Fn3-LP,
%jTZ<"A[`sV/*k+l<Q/"ulY$mgN/n!l->@Sp@,Q%(_k[>\X#;f@U-,9T65c_Z/KR[Oo0suXMa=9'e@C"gW>[a&h>sNA4)&J[BU,pY
%#>lhi8MnkYb[/9M%6I"?#ItWg<pC&GAc$a#!+S@^TT"F'6#D9d#:geB8Wo3YHs]lA8&k9!<8Tu>1W!nEc/c7,F\[p,HZWlXGDRKt
%18ijgL;hiroMAiI<tV%44(SK\+K@7Jd<<AfB7(UhL<$dBap_s]&tq\A'%dZ[GWOAU)OjK+Bt4.G6J@99IC>e-)i2HkADRVr%Ok/E
%JQNK/,AK3%>pfr365g9_JH-#B6mqt434`GJ+4j?tg,<meN*m;G3a,><W6RJ))Gf\;6&eM,_0&+[li#oNOiCe@Nl0sH73iMM<JRS,
%;-Y'iN^b:p,m4NtJ>U^-,<W,+&uA91`l]RoElbC>amcA`@*(%:Tb*DV^9@,W;EORS!A-h_:FeL1\O]YB;SS,EROd%-&KN_uT8Ht+
%nUPd\#.Z(ONd+_W8IeZ!L+]j\:08Xc"f[&#:.*h(Y?0KEn06+bhCilh6sI!`;QV]\DRBugAeQh_GP[Y8F-bK5X7k5_(NM.3GC/`7
%kf%/^n8rD3#G[!>H[kqM.6XRkjVg9A\SmnLp0k"2rq=+W=P57j^.Z/h2(djT?M7rg0CU:O>:!K#Hj*.n_&2[T%hm?LG4:[rdgaRM
%IIo)_-"!4X?MZ&BMJ4pQ"45Uul\F=NgTH)VS<jh/%BZI05'!A^@)hsBB/JPq?q:FM]@WXoe?)IbfKr%N0Q4u2!5Na"b>]@Sokk&`
%VHMa49rj9UCG^?JgPT]6oKVuo7a0KWDQ3>Q9Y9snO.+P/2.+"i\&t7*([0HOLQUo0bmWV>XjJi&QI`2V-"#HmF_\XBBf>g_O#Z$h
%aaK2>_Ob'\c2VSqc%aV[p8;o>jFBB_WM/L)G.P7DmDI0c<\)q!r-;(l%If[6R+8$]^4cI"4'TJOW0uT)1sM1:&^H?(A,'#Q*kQ\!
%B5rTp.N;d.@iX!R0_sT`E!@2Tpkb[gRk$t/%!^r^7TU\aVV,eGc9PaNVR:PU3=]SK0VnIH&^;?$_Vn:#)9^Bjq9/`DdHKR:ZAnjg
%D\KijT4C^AZ;-FD7L=9bC"CU+:2Tf-s(F;oE&%ilZ&E.qX+MX$#Jc^<Bl@EP25=$WoG3#9HlIhP8GX_(U\b_H?:UD'5/eH-ReFZ(
%I2dGK\lBaTrLl)p2QTas"4P\e'EiA?T_34IL0=ACLd+#KnAk9c^bT5Ppt[?BCE<bdi?h\K5<Y+uoD;'48`&^c8,PA9'k6N?:T+NP
%L7fnulY=".X`ZeRj8c?0_g0[X+qnD'cacp&3dTN.?[I+"j@+p_^jh]L>@tTb5kt8I^^bq5S^_!<GR4/XM!Oc9@LlB3P5[Ie[+D3t
%o`tLTJj(R$dQ>-s(W1=p^Pa*"F';b\B"$4>IX"aO2m>eb1CeEu,K)h@q0M!UeT9^J1&E>#d>ZX9#nEe^#k_IQL3:UNA=.5)X;lJX
%AH;R4"Qdn"<RUX+C4R05H'6O`gC(!s3i"7s?nVHj(*rYN*.a*F?L_l,9dqI69=]<s2_X:TV;/_J@j2uF[H<b0jAg4897t0sEG?D_
%GqCt<R.%3>4Cf?$>&Jp,D-kE1CUn^B2n?>$>lUKVnhmOcr]Uu3kJH"*e9&P9eTBXn1>u6(2i7H6lCDCZ2pMZRBTCd1QBV.UK07`+
%;fUh%s5#kgXObWk(9k"83ZUS'`Q.<&AEV2Y[&r[@5*`l;5^B'>MaoFMk<`INda>ZKW6mH512ib0>&6>p6o:00hS9,P]D5([nTqt%
%`n)e0@HM4?b7^!JpK^tb@Ga\TB2u=%ShFg7#T<dE0"Q!tHF>b-iTC-tqpKE&K>rK3H4A+krR!N-HHV4ghKScR!km'L0O(*Np*KP>
%?)G!e#ij/u;d\+2ahuN'^(q3"hT5KRJW*snSn$hTUXdV6X4u8+3Ag<8WFkM0@4IJ40,C)L.g,AGk?jut>&'Y4?0.G1&+BaB9YC%6
%QI2floraWsBN+!r4N-[a\.p&D,mZ?L1lP)-LM1'C3pEhpZ'+rB)Mo7KGV:oCha^&Ok`X]YB.,=V[fH>Kc;.V[rQ9`bZj?:l\#MK0
%E[nC9muCm9jmeC@1#M*ap[.NCQt@R\l2!%Df,uDiMiYA)oh0ie4%hY_4Dg+Hn5[a5aF,$!I8'&9Ig3Poft\Dic.E@,)t@kX\##@L
%SeoRk!5FF1%r+"6L#n9\.6B8dFq(&mkTNDi?l@tc2N50cS%GqT?Ho@eNQn$G`&Org\EdZ@2T0p(`7,X6Vcsh4_n`0p(MqJdr0qrk
%B"UP%q;)#@]DEtoTVfb"HO9Y7^,=T]?MO<u$7=>)VI1?@ESU8EBo8T*B]s]S<TJMq&b.'*\Hi+8YA\`sp6;LiXd7hblOED/%kj9D
%hKAWHqT_6/mJK"nn%3sgZq21,G!deEpu7VRXZ`3uB,2PGf[O:g&!oMY,%5)2cEH]m+Zjf@3Pje'9+L+bI[aR9TSCo/UV,YP;mMXO
%^mfmN5-h?upMV+QSVd)Z?AOselgSrTkVPK8`)@r[S#q.fXGn)6CY\69HIWZJCq/pHB>ron_huiTGhYmApc`.*7SD>qCr1on[<,l(
%fh:W4r@Xg4&'@rHo#MgYoj)+8ba&Jkdn6HCZhM:r"#iA\i,=g>LNM>DP)Pmf7t]Cf?2NkPb93U(29TM!V3'S'P)%ELeiII7;aSCb
%MDkr._'qjm17MV*2?E\-3\6i'06iRW\SU3)8\KqY&,NDnL"8#JSt+L15D?o^4IE6-'0B'U);'f*71rNtU!7eU9S@E3`_Mco.g+s=
%;'ogbh2=]rNKa&Mq^;>/W0aFCc1dr+XKbI8?Bikhlp^H++]$3d'JJI5]AS1&M"tAAq-K:W#s%Uj-khn$J$K)d2YWqj;8_XT;=hIL
%PN1P4@5!KS,,W@@Ap#baVarip<r[AMV4#=d24hJ#PfRmV+.hY00B$.Ko7nL5T3qA)$teo&Kh:iWR&@]Eol1o1f1\@Ua3-7#ZofXI
%7\@?k`M^r(rRt?NRPabS1[3LRaE?q&k'h1@r*%6pQ?g(8^Ju9l0k4O,Sup8Ng4.bUc',Q'oP3u&D=5sRP?uL^7HiuShD6pHcHQG!
%rp!M-WO`'h2l!RGOZYQI%kO*;dG0];RShB*6Z;$(g<Z["\/Y%SnPUNmnVJ<q/5fa!4mcEp_+q!01KnA'@^O.iX)_m/='O:f8P`.6
%E5@!i]NH>g`A'PWKMTSms0po'rbfOYh[F@-SY>68=F/F9q`odJHi?d<NDJL.S=$:%rXS6_gZB%)q(AsbnDQ6s`T-34Em=N=0,(nR
%YitHheru]\HR!$8G45G="oC52L<nKk$`Eu494,D$1%G"XO&_`b]cpK4Rr,J6"`1X1i=5N[j6&NoT.+a_#tINblifNKk)&g5RUpSV
%9tfl3V+m4.n?BQ,+*Z\f9aLkq1(E7ZSVLld^N#OS!tAS<V#H?Cie<,,Hd%4Xi$Ta-cI0T;^D?G@F$Xgb01:1b<Mr9_o/lp%BD_Po
%/3L.XIf4J>rR\sXo9<P\-1]&+^`9]B;>0Ts^>Er'@tq/^cK%&gk1>"$dPJZ#qi?gq^ZIVmju^\cmZX6hc`d/iYPEY!MT=4Ro.:oH
%9$b]X%jp-Br6uYpoCpQ;Bc,B((BD;uI+Y;$U>C(g[`m7%PKS<#;Ygss[hZ%egg/7+5l0E(XC:VeU<BlO9hf$lq_-AnWYsKq9:.:Z
%%9d(Ko<*kh\27pY@"qb(BRJI4>.WSE!aXBdJ68R]DZ)95L>Lalo^\;^Bs"Yl%d$Dso;/ehdb.-^FoK,7q9ms2CdoIdq>'m?8CHYd
%B7JUl.3>XtBtoU=Y<2.]MF/"r+MURo,S/u"%J](*h8oitc-%q8K;@THF;NiG2^M&]KT,<-VGce);4clLQ<@LTkd:!qA0BJ$c@JPl
%PjkDi[K'6UZlqa.Zn1a]bI8)I+gsA_IUV'oI@'cHbG6`&fZPgfiPf,W+mUfQKpVVPbJ-cqI,SYNnFCL]2.(Tr0>,LF?N+j0Rt3.!
%o*(rc!n%ksakI!F<3IFhg+DGCpR$fj>V#X`<R\5UEOm5MiI1U^jElIRK-idUj?"G?iT1(FPQ%3]063HP#>KH:@F?5Sd4i-lbo"&V
%4cQ.T7c-rrh8/W>q8tfb:9mffoDgn$'%:@oaB<a#P7o'Okp]<_KDp?Q3)8N,p+NB.[)d=foVM6<B(5%Xq3k>BJ"OK%kKc8:Bc9.`
%N8;eIiK7R?gY!r#KM;@3llKII=WZaKL:4qrnU6kfKa&'+>9uPlk34C]No!2^ZLkFm,FKI:2Hrs-cOs+R(MeOcUSQ?_eZT\iP9u\8
%?&kLXBX:s;c,.A<_lUB?3>l-YW,GA&=Fp!-`:$1Ke#k_NDR(SJ,p3'1FRVNbb[m+7U3AKNgEsd$i-ZPT&s@]X^5ap2M:U1[@jj.;
%No>\Hq)ZNC*FlgD0jhtgY@GeZ;!.'\e$>"]eNE6DS+p!Bq/p9[9Ie<(H5.+`nDKP*f$Vs4rn>h*,qfSf)u/lrX_$Y,7^k3lNG>E]
%7(@irnFUCQ+mAA=Y$u+AY1>Qi%52r*d!hTbefT?M%;KWmK@8Yi0lCGB3n3FPZ_3.>4IM3KGY6fk$pSE=rh,^@$2XW+e]aXa1QJ%u
%GYS\]naPt7Y3@5DS)6`T$pJOK9*.3R&)6W=b?$7$l,@i[YjVrfo>_(6F3?1^Tk>*e%BtP#?5/norF?<ghg[_cVj3An=fVGS9j[FF
%da,<GG5*n55YpEX`LNqs[&*$Eo#8i"Q7jnebVsoD_M0^>>5)CWnARe_q-s8$0#i*"9;nb*.38eaTuD6e4/r5DAaF[o2m;>?Z'P"D
%$0Kdn]UH`Qc9qRdYN@/XYF\g:o4i/Lc2D_6S;68=b_s$R/*:G_B@Vs+Euka*?I$g=\Tp40B0F)DSGNh`F'#5AY$.81eXuV?0$MU-
%2(-[G2<R[Xo6P9el8_XdpKso_4PoEdkoOiaSgr]m'U[mX9$H(MY>bI+$1jp]jJU*1bTHI;ImD#,"Ij+F?@U9'1;7BkY.(kK:V>;Z
%1nZh)mnDRh2RHA1b=A&G[T5/p5;ta-\p(_M)dX:sD7K$Yet^UkN&UN,1J4FXVUCA$giHpOIZ^s(*l",1&Jm0C9=?XI+a=Gi;j&=u
%p\XNo^J&h!S\X\O:\X$2m$E6X5>jj-9lE+@(O_l^%$iP\Sl2+&kjP7g_sXd)c`1Y)h()XGi86tiB=jTN\,H%;G*?Z1[d4W=X4,V=
%^:eDt2;rB_O"k@sU&je,Zg`o(QM9<>ZsQ;/kNN%O+7d&-OZYak7rQ1%O"9'>fPaNWOp3Y/N41<0li/4S`.g'k\=^o[DUrm%=j7_r
%o[`;Q`\;[66urKuqP.o9FAFp7q^rPP&in$^+X_TnAX\gWGtp3BM>hi^;;Sb?WD8?5)jD^t[<jg<T.a&!?gOA_7Cal:!h*\BCJEX6
%_rmr?)gI2(ol1fGh39&/"D?6WEA0a:Y`gXD032!N7O.Fi_mlV,%FMt@*t8[SS(!>$-.au.`YmUs3o.XBMttLX5YeU`S+H^FKn`/0
%OC!P:U^'FD1s?'_"I&JMMiH2qJinP9i1q\_ZY*t#p7B)ldtmf%=\1>%IteKMj*REWoBDHIVD5RUa'P?$Z'tjX%jq,gd53]tcGO-1
%VSX(P50!RBFjt@*S6Bss71gQUn"P%KH?VR*`ANXhmjelr=qXSN'A:Jt[PlfV@RfglRdI"`bZGH?p!:\bcbd"7_B(2AM1<$'G*[%e
%S]rIf.=T@VT@((r\99iQ>O6>)*Ml`&Xeu5MTgkCbB/&/2#i'agiBG,X;)HkIHZl;BTDk9lQkh3@qLfd+Ea@(pZsh5-!m!;]lq*C[
%="AT*_c3^4E]t#Wi.U#]YKMtod,41ad_/]GHn*sn/1F^ip+a9a=0qk9RXMZ6Z*WoCinq=-KTnH@bB(MJ>+LP;2^qFnc@:*Qqg?rS
%4-F8,VAW%%^K)@K9@5ZR9-7]f>HH6IB@L`9/"Ef3hmDV3Zu*)GLG8M_99>HKLFi%]C6eZL6R$@k2EdV"XW39dShUqfgZ*V1BXuIe
%p:o'73N(5F\OI)nZfK(VJ5E=`(3O!>l?-jU'<S*2Fj$,Zb(/Mb-[kW'6>JE:.LkT"BYcME)t;N2eOH(c#l5`'69rIC3r]1oA+2hm
%`aK]0>DH=@r*pT7ht?m@j0-mP0rpea-Y[e?*fjOfmk+)>NH4\%oK`Sgp&M+6$>MnD2K(G,%D<:jpp0\RCidJNCCOLni?KPQ4>-t(
%-6e;Z.&qM7W<,)A-(,>k3+,lqk/<qq7T:)IG9+S@S?5`A5OmJ?*5+Vln%^%&M=9k`nWeTVPNQU(0Qe6e,hp77O51/F,)9F1Ia5<j
%f$M$7SPke)&on+Tk#eEG<`t^7,r<mP#:dUuU28l$H?TiDFLi5j0a@=p):uWbV8F[0qd6K_MLDO,jRHXMF=oaB[u]%jKU[NQLBRIF
%-PYW;l4UT7E\d[$=Yq'WeGjU%OZ0E&B!@CmR\a=(C6#+@"]d0;D)`!'DtnH'-n[Y;^5[2>C\Urj%:(V'bk>W*ot<M6N_`._Ila?+
%L<b\%g&6Y.e/ILr]@Z7+f)Pda=/[0kfD*,d_#;XSD[l:sbq^n</NnNL@4XRD0"3l;5;]FIokA^Q^j+kfEkRN.BDCfBZ`40d[hgYS
%bYhaHoO1c''*n0u<89]6@*rZH]@fC*":MH,1O6Z\8uV8FW#P['</SH9PRitfV'g2_0Q;H_P@]!$oX??ff:Be@&+=B:@4+G$Oj6k.
%dl!U.i;W^Q(#A4iQlol-#!;I[WW._/j?MP6ol&kH>Gg2Tr&t/X4U%FidkFD#j2Ut!oQYq6'D@*hCR/VP:J(-L8md1gi2+0F:Kj,u
%">M+jT9As5mV.9kcNtc<.okH_LJ&1u]b1#9klZt[2pIC3/"0bb0!KrP>"82V"^6N%qb@fg8.Z;'f;-NhS0oPFJ,hM?GVo)r<e_=S
%Da6ejbK'h/p&^4$ST@*#O#/2T@;M1ND'S$W\E):c>:VdX/E9i$;sVrj>"Y]03`?=XGU9\)^$VgW$s.li47pL<?.4##Fh5.qr6jJS
%`su*V>ANPjY@BD9NPUq-JI*Pl(U'172%-$#i2^$N)8LadDo@]eRaj!YRT9%jT%?1`)pA'tIeeq_#nuSfa;deIm&X*)!iLttd`2B9
%?WN=<o&=mrp.MVjImN$l'WRJU=1C!7eQZXbDYCXAC\HIgEGuHd.2E#=fc_>UQJU#k+1eYKs3^M9b!oG_)@`J-6oS0+'tuo:ZQ,C[
%>!KAhIN[6np6/ANbEe7PpY*><aKDSQ5]b"g?(YnlU7X[og*_3EelP,2@(p\&7,N(Mg/*Q@YM08qIF<faq@pS4/u,hS4fta]Eb;r0
%I(,ac?_rg5WF</bVc`*[!BdL$*1]A3B+B+rMkCjbTpN>5Ln`JIaGmUr7,dR_G(a?(d&f4/'R.QB$o$K9U+r1l^^'O:A1(0S".\d!
%l]*5ZV9c]BDW-6?]#G8/*t7duX:;*,kRK`(nD\DW`6+e8iUMP/8:<Rc_\hej&$CcGN,+_LGaKX4J42;RQL='jC5r:Z>bG9$C\Y];
%Bb$n=3Bk;Jgq-_SZ,:[ed;ZU<$"sDciTrPT^'XOZ]lB]fTmOd1BarSM%KRE;*;#qUFPSuO%`,a&(Jn-l[7=hN\s?LfV^-l;k%uV9
%@aB?=g9<6*s3M_`8O6`1djj\F&Hqth:<i4rH'XT[d5.H51#&HC-Jp&j0a"2n)1UiZd#!Y:-])t9OHqoRC7ilt`anP9TRsd;dE>"_
%l*B<(i/i<EHk<;AE@ELd_756R&OYq&KT9JBSBBs@QOjWC#3s4>r<@guCQP0`907TU0Dc6E"M1"Sm:OY!gl*2>E8kB[^?$O%47%__
%Kend!e[m7N:?@7QOVnDd@d%GckP0po61V_Z@MU2Z]$W-^l`:=UL9j/(Xc@:^Mrl+66=e$!iXMsF64nBT%EF8/P'mRk=6h#o]T7ke
%+e@9PLAl"8VpA2R7`%*Qd?.QoCfO0$bDjU&)qi[O\T(4$:jaZ$\Ug^]IK]UU>t=4uB<ki<l4rM_p(`)ROqr]]pHB$F,MHubi_$"8
%=a"9#>:?6Q;M\GXlBP@5L@(G4OT-B+KTNs<p:[Z%_7:=C5+B"^;=[HP4AtlA])_b*Q-4KoW4'(l,\d1DB#SHI?3%B.dHEKrp'7gT
%E0BdAb+@;u)b!aHa!!A`LN[-c;@YNnS`nb*V"-Y]m\LAH@6^%j>pT3\7M3"$&c@/N#XpCtI-;P2h1cBiDEHO_,&lR=*$Sr.E]BYM
%ggIqf;Zf],P-RPm-o-31.On$Id=*c)Kkh,(ke/H'X@RC\.i\jn10`Zd\le"dK5g"$5OLU,,pZNVUbETna!jXpE,hrY.,+hH7+Z+#
%`*34^iAu9CE:Fr%E[Pg0X(AjhHnTLAjlD&bO'Da?m'TIBEYN`L5MD5qUdPF=>F;ga5@>ZDeEOBGOQhl$rL"`f&HF`DSW@A/&EVb]
%&1-oMOT>TND]b$kKnT.Pr>@V]XbS1aIAF2M3FZ.rjMmfPBS<GeL,IHVona:Q;eS^Z9(e8<e>Xcfc(?)S:[Mo'*[tR/kBQ2F.$A\#
%6p:O@k\?peU#M7b+kh$tDW>6YD%Gf7eA`M\A&-0FS,IUs"oRm&mg)mlebM2s,AnWaL=Ycg4&3AX;S,g&l#j?TT8_>Y)FO2ABTWeZ
%l3Dp6T'DNpJ3\9sf:2pWiC4&m"GAacM4m#(Nuc_jD%HOQ[UagM:C%@Uj9B/6+)uY#o8oFMkCR1j`heTfApp'6%$0\roVAb=:!K\^
%hVmtWd-a<R_q8>6`'*lDIT0M,8@d-V.csPj3>/LD.s=+6VK=@j5TQ8.FWs6VWsK`"*t?\<Xa,ki,K+-6YV7h\U1p/h9<W*?Yk?[g
%OAiUmfAf=nXqU'L1al#iO-kXrZ\Y4H@4op(RD:1q!)BM;hZ1fogcC+p2_1*OR.sdkhCbr@Y$&C<[GHIp!OO)NCRK*gnbcN"3='h@
%\+]&)!%i+YiVAo+%93TRXQf=K@VGOC7o,R"ZM6JljGu;ah*jPjR^4tKbPlo_.qA#+dop=0H$uIgLO3U:RZCUY(V)<jISG6(0"MP^
%jiM0p0=-(P"lH^[Ok5'G-W$r_m=t$[@s2=@7UF-XENh;WDE)DHZ$bR#:_An;#qp\d=hijdlD_=hplk_iGF)*CA.R1l['jN4`:K7X
%5_e/Wp%tjA`kO&ES4>NEdB75[:[W]]fpc;"]tBtOs8)E3mghT0rVj3i"i#Q[BE<if`(VZXC[_GTppm>GG0%P:U4lq^1&7NsJ:j[S
%pfLAdj&(5s@^KB-!&8fqn/?t4PnijIoisO?_QR2)CReJ7p@)j`!Z,`IS+sBZ^;cBn^'t=J$TRp)9ZatIi$c*f?OJR4r^nHE%U[cu
%C>jPiWIE"-dJ>;8:F1rp@0=7W<5iD/4PYL?0MB]g'>!jo?SCna3;'r]\r$_2I&LMEWtd5WPu=@YDN`Wl!2L9nLRhf#XjjMMM?RT8
%]q+N/,(+!@NK8"2F0WStB.9C/YAqAHeV@+DEUtec=ZKSV*r#G"_DT2+*el$T#fQlE)OESI:UoKFh'V`@ae&P/[G5)qU69V/<2DqV
%k*A[9_sr^iF#W1$"M3V8,%q\L7E$&$>5aaF]$;p3^n&7BniHD2)R2B2*s&>ka,eSR2]Ub09b^Iu$-jN^%hP%`d_sK&HO>7P)I`C#
%2n.tToCCaY4LGb4#Y(kWlK_q.\Qdr_/Xt@-qsf$t3F:SoY=Dr<N4;NU#/b%Mhf**B$d-Zcf3$M'p<q^[_lP+(QS&rkcG=*@Fcp1.
%YBqQUPffdt-%<+#qXnX!IWXoem<1)7k#1MY1R;C/[Lu';N42X)c26<f;X`toWS:$+*o/r,WG`bX6A""*@kZ]sF0]r@3QS(Tb^(pc
%HkWH/4C:GFY^1JZ4=hSW^i8g5[)'d%i_iX>2`_[;AsEkZ:gJK76WlB1K"3[L/Dp'N6LbakfoNC=3##)g'Os`pZB2/@n+gMljCJ"e
%?u:c",0Ki,*sf/\IfNr5J"_8ZiqFh("AiDTiV2d]FV3(+>@>:TLBW1so_R+Q[]-DAAZ*r[&DMM4+7NJW]kT%@0BjtA#XphkWe..c
%W9!qhs2+?EVE_;V4S:@JTq[$."tO$:abja8/"=bsIs%r7k7=H\VLRuX/)h)1/]@VRQ]IL4n9sT@+";qsrf*q_j(Fgk1I'WVF[$u3
%0)GD#L#a&:[u^I8HJm1(ZVQloM4X3c2(]gC2_Y)iriHgDCWaDuHmSZ6GE9'/]uutH5MBR6rqPVZd\"#W4S_q!etPC"H]@k4QJ2*4
%_e_Em57[Esrf";Xj?MH."oYuCl-Oo\N#DWmiJHL-@'20\QbA^hs0]D/o%uXue8UlRlO2DGGh0D!58V7\J+<(lmk8%W(]BWiDT6$>
%[B@9YbT-DIRl@O"1E5$A^Qu$/rS;Va@)7>kobIVrprUBn4KuK&>._LN#UT23KlC\hH%A!'[MF,]U^>L$LbG5f$d._VlGD+al[E8d
%7GD.)=uWVmM;!6(+oQX:/0$hn2AS(B#MFfIq*\=EDk+3N0"RC'Kc:4#\rS]a(7t*rVhJRnVQO_UEXTkj%+#Ei*u<QjjUe?SY$=MK
%KtOf1=;LUFJY5lQ$AA$!6%J'8P^p9fLB:(HlNFYg[jlsmq9*UtH$Y\a*9<N0+ELQ?$0:O#KL"L--QKW&"BPX8C3q+sjYSK\=7a\P
%$[;LMdf`k;M-?RY*31\EAG7R3/*i&W@d%gH[`E8*^FY9AMrpa[s7En4Hee<J-Bd`<iW1,/0:mj"`5V?@cHbELA937jIcE2mW,2b,
%(+UcQ[Dhu`Vmk=HmRNT@>J2&EAnh);1p[n]XkYS7Vcmk-lGc.`gS`6,96$hl?eV]SeWrsjGCiJ53>,W/=m00F4Z;T/9B?sW>'bI?
%c7QFSV<5(uX9m'#p%$dVA@^B"(?C1Ojincl[i@87X"_fh^3"Y5Hu`M2/Jj`)GF!0np5@*4@gL7X?+aBZ-*JN9]l<IUA[ujs?4#p:
%f.4`"6Y'coD!QNrIV]?ALY7'#-$R,9[rQ&][T=Ms[?Hl5F;%hlAe(G6](P8.HGc$(*WKlMU0b#qWjK=Jo:g>.;sCFMeJ%G7X+aT'
%H1h/C/$5+ug6pJ\S<6jan`,>]8mF"Q2\Mfh:sNTpK6rZM89"Sdfa6dbolBQu-ufuL2Z:Z^A%.!;"CE+*\@.WL%BW'bmfI:Q6h5A:
%mm*hT*Uo!`g=`d2XkfB@j'&^]h65@gLV'ssq/dD[#-/7X:,/A->6bPT;"C$RKML-_NR64t[2%+*3_Q05'.":V/tC*=c2-^(+MQ-t
%%o:fd_rfd$Wfo?lZ_^E)rT59DYEtjVe9\H'^BuX$$MA@_Bf?`l2oDn>m.Bs#I,(ZfiCi^4%mSrYSV6<ko3/Y*]k&C]pt\M0=tV]W
%d97KeM&]m*?:?J&gPZ[2pu3FE3,1</(681WNUZahEC2/[`/R1Ri,L!Rg#Y/109.)45TRh'fA'ku=^@#(1]0\7cKpBkRQ9Zq!mG45
%H,UKDG`c^V`9bq2C'LPDg!ej`]9<cVfL(WY@4t<B@uG0?A6T;L95a"ELiM4q8r24Z;[r.SnT_rWY=8/qZC[Dnf1]S+%jpm"?4qk9
%HpW4pi,`r:Ljr5;U\mc^WX&u6=U(`82S+a,Yd5o7$V*.L"lXcEYq,#sM]JM/06Y91IB>$"=7UsQT1CMi(E;&#=:/+InTB7SQIaXH
%H]l60+%YYk7U@R7kF\PZA$mJnW]/,lg:\WNC9X5J#e0hYHnA^nEcnp/R;6i@N5=X%H_kO#*42!k6sNQ+GIL<^j#Hn0#-q*$jn.T'
%)IL3pX(SEc[ed'YK&nN;l^M\0c.V5kHGL-[CN"^o7^'3YNP\F'VV,-8DO=Wp@R%Pk9WiKG$H\(I<r)#oAZMjd=51r65hqAH?B"8V
%X`V(T.JL[Gf?3LP:3c4SZ*V&C%doj%[F3@Ljl5f*qafdlfCt?.h48*H@JBD=m;Vgap&nB'[r&L=pVPlWI;el0HJ$EL1V#Y#]q4#c
%g6rr9aR3t7@kte3c*&bqUZH+$*V2KZe76.7B>d^0Rqh;iH<#g8XD#$:b'*_0Y+G<Tn`)N;`?4.;JU#p!Kj^?;jE-AW`44$/,2_c/
%,q?n4bN.Z*YFLi`Vk)mG2A/SF>h*<*p@Cj>[B[A[UuKO#0QhC(O/7fCk"U0`lD9^$g8M"8;n[XB/nV_dIK*nuB3u&tO8F^K;k.J"
%@B"@Sru)5J#E3u!3(W25qS@;+[<p8*CK(hr$cfl7Z!d(_nD^U83.+TtXeT9b4$D<J"/2K;U%WG)]@;%c=0m+Aj.4rFb@@JL<,eEu
%2m]Md2jp3a%dup4jB#f+RG-cYb=Rfg?_6U&n\e#X_Ve0qi`lE2OBeoY`h_,?l'3)F4`,)o-aSr!oN!mGaDfhEL#..L2-"#*EA]>0
%45@I:jds&Eh)#'uV0Af4c%WL*]"/$nS5hmRn9f@'a.2Vg0Cnq8ZE\W14M<_sDs5@\q>H<E@fA)$C`!!WpS!1:f\8%>2HR5=C:@*R
%==[Y]0&h)qRhrR0kh1YifW&;9O#u^i8T"4_ZEg!H\I-@J!_dYMX&^jUDO%&P/$#tF\s<gI?EUW.eZJ.PrM4NKH<uhSOq/AJRtj(#
%\b0`-j`[trft/i;Djn/[<%rC6<]Y#?a*dRMY5DDW]asOqr:c$oj7`Jdf\V&G5=CfGRYS#oc/QX[=[)Fb()lb=TLj^TXT,a"BZOs*
%:Q^QneC3A+.mK<%CSBpaE7fM4[+P6Hj'B-i/KP\r[CtecQ$++kjgErRm]<p@T$%j%bEoc6[8oCC.AtupR&6,:Y]hDbpeWJ6ld_?m
%=c'E+c-*_l/fZU?T%gf8l]&j6H%eJ-/QK)Xf=aei''6/V`ue?gq;nM(PjA;eJ(E>RjYiQo[78uX%,jC[AXm%BhANHE$mqi);Qb-:
%P.qMb?eX&JS[uDf.+^,90tH.dBkr^qe="apl*5PUiOZSSN,IgJbssC7e66!T='DR<p:aP\@!9b:3RTdG%eqQ\<nuMKF%eL=cK1[i
%gLeNV"Ok"5cb&3&eY0EZq>#ha73`>0f$g)#h[(o8eGn8D/.6F"%63t]QS1r(aO6fP'jUG'#h]'rm@LESiO0fiP7%1?D##bgogYhu
%.@ImK76"rUj02PXiVh7nlQ337:iFnhg01Pl)VAC0Ge7N=hg0L+q^k?t*9J/CJ"?&Wm1"8pNCJu1BUb=VcWnF1%>keB-.>Y3lQ^:#
%CNXJS])$I&W-(;b+SI*Cn<2r&/UGIk+^XMq(!Z_EkK!fYV_`akG1n^@+R7iYX'RL7+"V4gh41%5Z'&Z6[;JJ2WEX;MZ&S$m@^aKY
%%;$iGhQ`DaO,[2n';bITcOU<[#[tRqf:;Q3\j+0.F4Xm4(U5=2<gd3'4"Q#/NJc+jarH&=a%`S/f6'S>leNbToEAj;"S@Dkcd$3V
%Xc.A2S9qT43-'/mlgE_-"[8U:7=t"PgJC7%d'7RlaIMZ%b@mJ\<rGYjZV'dCD59["mrT#M74;e,N;c8eO6:NUo'D_0a*df,FnhE-
%A-SC"5,--L34s@[GtZ[Xd`Tt^.*1qqd!^;:H@36Cp`k,N;]9K_+)0Xs:8E%*6ESij[PXcLdH-oX`_pd3GO]Z+_S1qg:,l*i?UX%p
%cY12i-b?SeG3$UaVaJ1"7+%I*mQ'Qo(Bt:n+;`X!?0iN_/RC(dL@8@Acskm7qNnk5+<HM3FS+\00ANYe?*!rs7#JT08:<%5_Q>bK
%+2co1[dSPK?DI8*J)gn%jQEaIJop</T"o?Y?ApE?:As[Gh#n4ho.V63YX>_k#Rg.(DM14aAlMJign+%TB.9m8)FRmRp_.#DVYf^#
%Im-[QHu)[#pNoVQq)[4?N!!8,LUh;aoQ)co;HRTQ4@u.R#1N3_H&DC4s5:]^fqJA!#6&?1Hu2E_I:+3Z#!&%Sd@c+m25B7h>-spJ
%Q"I5s@,h.c/Ki0e20#:PmPDrO#+D`hd=+=ML+BC^#%aKofYOJL!Q'Vo,hYsT(lZaVcNbHV!S1joJ<81KoicKcJllQ2@cIU@P%D!b
%\L-2-m,0=qo\u^@s6`24oJoZ9l_EiTI<XW9+7k!d1&q$qSsQ^j#XPEFeisI`!o\f\H/#ZGH;"_;?*.+]o(0cT#p8t`Y7CB',&G=(
%NSJOD[Ca@@/ZN&6OJ:m#d+\+e5!sP]+FlX4UJCFhcF:bI(;j32+QUI/j*lU,>'kJba]kEu?:D1A&!nq`Xuo(;L[S"u15ijtZ&4Qg
%/`OYuo"n^Vq(B%&[Bm08?*>@?bLphsC@*rqS(3i)..(AK>tGl:UpDIT*2KCGB(TP^pI*ZgbhTCl7'0ce:8bT8AVh.T!5ioA0?NK?
%ZP_MEN3#IWf@uj0kEt"SBqefL^Z@^$FlV#)ZV5IFd.7QRB=F+a6rp>Vk/rp,?pZlA?J:W^pUeP6LU_:B?B6tg9IG"Nn('h;;P9@O
%$B&!UQc@/_9TuP38&^Uc/]qfs^-'$>Nti:ibOMpMiAMdPg\(2+FL)WpL6Cjq^%CT=\H:4kI\iZ&Dj-HA.iC"E?>im([;M]chm,Th
%H!X73fZ\,QHZ/#'%Ko=H&s(R5'98AcnKP)"*`cS_A,1):7?P+2auu+]I9@#E;C1jL2,P$Y[^K[=r,O37])IXiB.q[>]skFsGnd2o
%PtG4#O,Qo8P,Zj.=_:$b/S"<rds*u)`u@Zu.q'rMhhu(:bHFH%0Y2C+_lNX^f&]7UegddY6TZZ")fkP!`u)Bc]ZKl&/1$?<QbYV,
%7@13&VS$Ug2Dbt#Ha9sr?J"3H3S1&`ggl_FM8S_r<GGeSnH*Y"n4j>WapIYo[!c)kgZ46C#;Y^bCC*PcQ.?!bQ94>'3bon>G2r7g
%'XebKZCG@ULVQK%6ebpBqa7h.:*\_S7ktDPJSCM2_P'6/KQbi!p<iS6lBoF9el0n:2"$)[":`(W6G'k/FY:4+h6@3rg=b=4^RRJ#
%C%a99nZm/^R0K>D7su'm"t6^V46HmG$`$Mha-0;Ph0;4mOD^n];QPt-#ph)@a0-pd>?QnX`JZN0[rd$1b9l5ZA0l0,7UI5qX*F#<
%\1'O;L>GPagXHlU\r7$KZ"uJsEqPYN?DNR_8opu#:/oeHi8O+1/>&9R_1YG[[<Wb8B%E!ka^Fq3El[,r2$$[-DEDkSg:Pj@.7q.7
%U.)Nuh1\tiW7uYpg`,Ce38k/'g@@<mjhZPS$+s`=\h,R8\``@n,a5s'njF"sT=<9@d#ka/:u#"lho]`%\Sg@e_P$2#=6oJaT9'sM
%X,\t4Z)8h4kfn:L^%In%XW0i?b]_s2$SFV\;bVp+,5'5]4h\G^%OPr=Gs)nb7+)0c"Zs4KM6k=%b,D79Ycd+D&/PU!WjPerhC;g$
%a5gImlE)%H#E?p#_&)fDiUrp+8h=^_5>K!NZ,0'm"O:U\9u\tJohkJs:`%pdNEcME8T>0J0:][VT5H8%bVciW8b&)SmI!4!dk_6)
%!F;No3gCE@\.m4p'&O@2%kcJUXN?Ibp0.Bj>AhG"X\1HNW*M'n(rr?L!:A:IH-2tM_t%+"]M_sbD@ap1.?pgbXttn2M^6*iXAP=O
%]"C4G4?C]*r(u>#dH]"7qYTGd;5dd>/s],#@CYFOH/Yp"]JRL[`4HK<!_tNO0TVUgG^Zu:Upp*O<L9c$4^Z[nCk:6uEnr9Fm%ma,
%?EXQqkKR./kgch@"U+Mr3rnA&Zut$#JH%5*`&QLegr8j17g]'o)LIK^+!`$1npCcC+L<&#DgP9bI'4Y$c4XOWC!b:e>,BJT.PeK,
%DVT'sAJ6Xu51TeZ;>2]c*3V8!n553%a)!b*O,e+$<&hJGKf1OJDI]_edK?CeK5,SUj4.n]l1kBN5rD.og"i2:kWj6sFrK<4cJdt5
%8O71N[QR>,6%j7h7&FZFhi?Y^^Ye(M?;B5<:n/(Y1(#-iVP06;+VCha4AX_ud0O#g)XRHh97<VncC3Fp\HCkhC@:e#h2f/#D1K4M
%K9*X3S"!sfe]4W+aR(c"'.?Ll=&,;`*b,<7i\\R$)D0jM$KI*k#1IPjI>;0[WXXHel`b,[,8>%bPq!5?+.W0j''#q\+r3KI4`Z:a
%cOP@lh&s!@UE1N@`iVJcVJDhXn+fCIOD.2SMip`#iGc_(2$/j".o?ioeM[pC9RBDlFL!:\O"lTRb??@2GIp5KicoRrlWn6a"-F%N
%QEh$VV!u0Y;'odW-?_a<E2tIVlc#/!!dp9hT.1</qDBSEV.kAB%m!R7X=!q21(pkE"B200S&X-6;V!iP,U"=q<no%ac3`*3L!/LW
%3kD%%TFRo>meEKq=qEitRIp*mc">\E(;[5pkf$98aT029OO#3<dAt&O2.8U278p&ZlS=H:XrKgqk/N`LmT_#Z7EQXPeqP[rJnhS0
%%dq`70R"AH*sB9NHAi.u03;3)7'1Z^Rlil`NOqc>5O#HE<\bW=5?c%`aMu^V4$65nPSTad9]KhKr1#\&T&!KShEdi]fhRg`$QF)"
%SI<&%9/^+X-M=dr_'%h`$.MgJ*Uq(ocL-t!X1E@b(/VbT!N\3-Aqd+!mfp9;TNg((3'"a7+_$g(5qXhIrfuK^6fgWIW4uHIGc4l;
%FKhsI@3gjKejC2C@sq1i.#j%*@*@M<WG\V.f10hDi=8sI(i&1?%oR=-("^9Mni/8(^^S%gr%*0'(-c#Lk`So53SJ--&Zg#>.Ra/X
%V;k,;n3tn4SAW2GR:hF#eiJmG)js#DHZ9I/%q\FVFF_KCRY.nf=-D/2G-E',8C]e")o+:_o&)[2H8`<@?dcd9cF.`gUBF*Qh>R%6
%;,otf_WgR"R5$SCp586Rp1*nf1^)X8YAEHN0?Zd;r2O&J(=mTc='bT3EIb['#84Fks!D.Oo]2sd6Nd[TTGNF9:I7mVj=3LR:c>Rr
%G`:7b*WP%c?g!j%EjNTTW/cT^BdoY1:>JG:UWD]?LUBB.e`riRE_C.GU&)12\8eFfV9Dg7//QQN_40SdNG@oo.<]m'^Vl;j3H=`/
%gMAd7)7eTSk*Sh(db+#!FmI<%Nd8@,rU6<rVWhl.3bhg*$XrYfC6-TC`U%G)@f_s).Vdti20cPM5DT]\35_n+FSnLH\9j16>K>_%
%M1Y480k.Ln9<C^dKqj:m>&[aIf6%6#d!E5+iT`OrIL>pe81Pe</j?_<=(e5gbuuN65VuGILq:3Got.&\K5gD&>'m\8mChBO;nEaN
%DokAAGr&r*MCk$R8ChT@ZXeNh:AM.4].cN,L2,,;,`Ia,Ol_Af*@)B!f>O.%4fejt`]`o\0R(a.BD3([%0EiW.fNB=!l:@22g0Sd
%QDlEZN_dj?E`67f<,cs\b5"1IR5bK!i"S*J]+MV^5Zc^CG/R,RH!.UZFcb@62^7E9%%;*s>QgptF.Q\d&#lJIV)prWlAr[!+'8=_
%XObuenA3Q4&hl[9`#)HJ'fU#iiQR&OmlOG,gEA[X`<8fI3bdc4j#I:.\+u8[HH[.s+Cj(khbsiY8g3=\-EO4[i!QY%RNL2Ro7?-!
%hSjO+Y\Dn3`QRR<lte7TNL^kP\A*<=C&^JZf@dIk:1.acg"An;hIY7l"$%_Oi2a?YUX3'LbDZ2g;dfDJ=TOi-)p7/dnn9nj8lD73
%(Ehs2Ff>k>Te:.](A"pGZO.7EcTA,QRT+:I4-WhD.K10t>jQY2;eJA><PR&.Up2>,MhO]HkhM&f3P=,([`@Te>dCMZnkuH')CoGJ
%OR'$hd`Iu2[8FjO_25\lGjE2Y]Di0%E_S_LD.VUTD!@"s3a$[]4KWK=WHIfu"ZIm9Z+QHQfPbrb<Y4\qmqgkF;P4,sjePApRm$"^
%5B3.%gj>e=p9bFSIg7FqlT%KsqW^Zlm@fmQE;0dtBg]%qN0$C0%/!_cG1*Q!gW;oS*$iV6+<L^bA0q7l-B*XI&bK;K``g!0jsWYB
%Z9d<iR\dH=;V>Gfg!/#dF=Z3kVr]gSgT+1%XS1".7q;*Wq(u5OT/TZWH?]/o9@XhoV#\'Aj%[b!A_3#X_^a-]U<(s`!W%>thP!SB
%G'>3\Pa89@=K2preT6mL4s_^l*=UBGCY8D'"O`.Z6T(Ej<mM9lGM'g#\l"NJ#)TIq6n\q'>'`9`FeJnd3Ns(N][EiXV/8AXV9BP#
%Uq#>$OVd4ZY3)!MRf<hXZG#-TBngfmr<&!;YI@^pI;/602,bN#i]dMcH!-/6<XM"Ai4IE70,Zc'LWTLDY07nM$IV8PQ*;pto^2?0
%`o3bMGSB)qO9el*)`@TafjV?B\2eSkm3N8a4.YGY0qI#./hUF[7c(etS(V*;^!`E&5WGh%Op#NX>m7,R/3sbIfLT$M(=[t1V<KbS
%_p60kr_hI"*45j/h.4L3+sZ_\KfE6Fil.VWFJ?(]&'W+oD_P[_EVYot?KoGp(PC\bH7c\B];.gNTh9Fg[WHfLl&WHA?9KiH@0(\8
%hVpSqDa.\Sd0gCu`;X<lIVgs@Lt:,l,YS"fYq-jWTc2gh8%3]s!Okoefb#3h2dD;P3pX9'mY-a[M;dJNF;aG$Ba>D=oeF]+7L#iG
%FJb<QM(P)U*!qY`f1J`^T;4a_2n>:nX/q>L#.T/aN#Q7AOt*??GnT*[[MG2-SkO;uqeb#F1P#J94jsRU0!o'r\!K8\eTth*V&N'$
%7M"4V%e.&dM4R,CC&]O6+I=1@PU!PVFF3(X&;6a4GXIKDP"NX++=c?8$$iY.Y2amc>hQR^[(=j=:(DkL][:CW^T$g1RcXt=`DhuQ
%??,0&p5fnM&Sl&@?IK2<`?$@LDJ$K%p$?JI8YG@^52&BoL.nqD.P41%;!IbWF@nPXGaj8s*h6k63PAF,/h]S7ruqnMU_-bG$2Esg
%KErQqq&n);\k7[^.j<j0A,%:Yh%R$5j$f=r*>p^l9[fX4._=G,#Mf^_gX5TP%1mCP20#'_T1OP>m<3BtJYPWbM,`lDScs&:JiVX@
%!h7qfY3S?LT,JX]3)$:`Q*76fR'PW6ie@#DHM&\6R:%\:SLo82\Hu6-#Mi>I^,AQ/8NcWO8KW,H]pM]6='ZDi\DQ$sm/W;7PM)u.
%FR-%R2V4*2XrdOWbX?MkQ/e-0o8npoe*1N\PWdnSPWr5ZM,_KJ'3HQNJ.>k)OJH]b3-U:a[>(P%3gqPk(7s`\gQ3mWDj1[i;bN/Z
%ol=3H]QgqcjLrJtU39UE^_1H,\p_R_-BF4s(])aShfcn"/ZgV&U0A-EOHI[u+bj3N/V2BcX[<r.Zt&8.nS6,kCY-s/n9Q7'I)L[2
%#NG,JhUU9^OLpbc:V@MrgZ8NoSRb`b(:MhApP-'P\s@q'C$ddkSM&Sfg%SKp2s%OsgS]2\RNo9]g53r[8[9370R641q6IPjWHrp]
%0g&PMh(4mcKhY<HbJbE/[]k70HeebVFQ8#H572H-=R;lV+*oebRlr3l_QEK_5_S)33(%"=B\uIt&\\>2?`_7N`G2=>kD"_=jI.>D
%](TtLNI(tWm:-ZOGd@N*m]8?,CMVX(XDf=!#4,:Sd?b7Qhn0k2k!Vs/?U;nN1S#AhIG/irU_8-q=1/LY2.NDg]mb#BO"'CM38Url
%e.A\Jk=O^Dmg.!0rDJ_e`CmK&nGus?Xkk0J\07Bf(*HZAG?`ddM0Eqe2c;;%l',p$WQ4>Y"o+\Ybm=)WkotKK@QU&QqL7ehl!S_Y
%9U2EH(dA<2%CpV+(*WqZgL]_-a9>>e/"kFN\#JkV;N2&cI+Y7s`oDA&<_.DbUt9*nD[.cU<N*X?g#387UTEG!i`jCHqG-Ut\-][p
%XZm@GruhS(a,Rp--#1hJ3-j.I>eN]2)"-`SOBt)1.k$nBmCMOk_9`P#eFsOZeu3&X=@e8N2`W_f/LD,9A[9bO/>h4&AGLpYdQCGL
%?D#nEC!SHuZ.>L2Q[W7hi6Wn?P=PTZ1I0;)r984e0RIakD-gQ`JJp[gkDl3S[bj&RE.Jkt^ECa>mp>1D2?OJ]FtJR9;^cc$;Si2r
%lX3A>:9([J!(1$C[hmSQeD6j&]u!A[E'(imrQ&KM:b-Z#bMaBBh0\HmpB7W/2W`@-JbU?OPJY"]hR7ceU"9[d^['/;b1S^,1L7lL
%U#J4\^U[[M9'ubU0<f$TpYFh9:)&,^MZ4NcLlIh^DuX%$=+e4\Meif\=kuqnK"<p8qDNa)OHRpP!TZ]LRH97\'>AUT]O1F0pCCTi
%bBSI20&u94=K"eQ6Gc<#UGOsq6Y(r0iEPEQs(,Fg\L%.jId?>k(,<lLQ;\'egcQe-51UsR#kSerR9Mh0@1cO?H'\1Z&V4Lmo'0\@
%i><>;%*UE2/95^&OB,]Ln;ACh]PKA?$/iHM=&mcVcg[)NbR1?_J`96e/rsbmN,8b?ZRi"D<)-o]'ZZ%B:6Yo%LpTg<^l`deU*<B)
%,HhC*`_$h?jCo:&atd\k,-3>o^;QCYm3rp8L[QE)7[,.1%#El,N$LeN*omRnZ5=1!$"&$2UIO_U%onXo/839="BORh_m;<.cRKMu
%&J8+G0!gF-k[Ynh&'3Ob,p0o'8!/p*3u=#^;'PBYb==rd,42*;;0\A&m@4aH<Tjj46<@K*OT@Qd;0c"cLp.JBj&Bi*Tc<*b_u_/C
%hH.Q+TUeTaOE=;773o[A%Osc*it\3o3)',qM@TYs?pA'M.mc%cOQ0@!&W^C0U^5=C(lAO9!/cG"^bApL#dDAONtC2GgqP"a@/r/b
%:f)E`No_QL:uF06&dUsgM&)#DUl\Nf`5i:oE("sP$Q04M"\3&><M<k*m`R(Q-ilpT7e@;W$+rSiJWZ*<qCY'/1:4?=A<4OL[e<$D
%X%KDJ/2Q408[F)/PoXP&J__kLWou8qc6+=FOIIVDW^\t%&U^T06tD.Pq@$:qTL1pT'_IJq77YTKcid>QQ!d#6-3EV.ql1&c_b_(\
%Ka<Sq$RN#=(D/[-`m?7DJj;SH<`\QF<E<,J#$.Q]6Sa6[]7U5HRBm(##_8/>JBS.MbV#hB-JA\'A4V`R@]CV?"Hej#aUs4/dm9;h
%U-aS[aDmBTNCW'G=cr-TAfaEAJP;.I-P0QQlOcRRoo68U`(,RUhC^ToNHgu4O)to-[<].EO0b%t7ePU<Df!2^f&(&YBKu06CHW)(
%8[L,cB&ndB#O-7'b'R!O)%n2?Q/U-^K2^^u#7k>OCsFpkE(MI)(g`Fd&1b8dk*YiH5mJA=Yai(QK>LFfjF\(d`8?EE)rQmAKA^c0
%?DJeoTK@+KXpR3[G_,$L],G)]R<Rt%+-u\'cu+OSW/.mWW4(>]]Z!sgq'87^8-7hY/)Y4]T!T_DGjp;%qSCoYFs@A1Nu6&R,91FY
%+s:`3@N\t`&Q.qXH*ghL)>GW.;*iPY.oGO4.i;$Y"2f(?QnrFj;5U^_phFIFJLW.'";J,'3*c_^Q6FfeQ3hj^dWg;6:#lUF,p)).
%Dn@n](GZ7,hEt]W*Q5LGU_+;HA0oB/crh)GQeeeUJV]uSN'..X&Z7$VcV_a<NFW#!nDkuB#/Hmi?k&WcQ\[h_1kJY9m7)X=D,u6c
%Yc)2**8l`].V#pqT]:2W&<=[pYS.b6iWbUfP":F>7ETir69P_*&_n'GT7fkAB/C@GG?#fX9S-q-EPN6$'Z"fi63N(;Qa_Sf['Su^
%YT6CKI2%[ei-6Q&WiUlY_/;a6()>R>";*?5N3Nt0RLGW2E=8d;I"fKeR-KLW[K'AOL>^5.joe(<KU/Sq6-N/)&]H8PMkht4K&EBG
%/8'lB6<OuIE6':.fd.!(aF`6h#ngu;3%7-j<-KRP0<doWe6ub3;ZWi)&Q:sGZk:7"fo;X=S1S*@!qQqu%Q3'c]k@BS2)fV_!hf_(
%"g&T]!*??:`<"s8N_0Po+^.=VG2Bkp0LQI<77DtT+Mq'FKCi+D7mPr;1*t'NVPF3QD#(eX]T\YeKNKEk"mc8!R4T(oAn3<//.o7/
%P/^'CQ*1Mq(L8\%%;no!37:@ict4\.Q_6$-]1dXGaFSOZ#*+\#,bRA"6(?Y(<$!/0J\"[i=bXTl8$rqn6f;C!CkJfqZJ-Ldg@5ah
%RNi^sOuU]Y1d/m<6FC#dM+*ZEdD,u)5t.PXGY/[[7+,EGV+(Yd;1S*8M3E+=YMeX3BL`r5E&]>Y4^]ch6Eh%MOX3)iI*ZXkG[:4V
%H(fi&5aKLniIrjT&Mjm7=U%sEJ=ZIkVZi,RS;rJH#mk$jI\*7l!YPf*ihaA=@Aqs-Y\P,_$5,&n8^WP8XM>2cKTVBOB4Q*&&]t@h
%%&U3@"Vrh:7tcG&5Z5!/"c6Z%,HFY9Kglet5'mDTM5OZL`:+,(;H8\T7/7s6JA<AM,gN.'W<?KEXIWsca:XQ!+5h9l2"7drLBTob
%OsEZ^m#4Sk!$TeW9EpP1UIM2tH:_L9GGn5<-sfI`#gIrf*#^`9i8uGd9'$5?6g[30A2o^[J`3AF5rH\R,a40/KEA:`=J6o`(_U%a
%m"H^9G5sVB;#uq^M33@l!D\kQ*`H0pjN>8dhB!86&5TWVJWXc%A58D[$s$6maakWA+M^ds,Dglmk];i@2\,:FiXB@`p]Xhf-l@.B
%hB<VK#iILs2'HZ83K#*C112^)ZAg:`K:*sXTWA2lGE=1IMm@tA$419!j;Xak!!qSY&eZqe8u)Sf0gJTrJt=FT?YRXc^^?VS6R8JN
%ZlOh#Yf&Ps9GNC^5b^2jIDn**&pl?"5b1J#'@Dg_h#+C?G)co1`4u`-=-[`Y66Y0YIKaS`$4,H%KfC@Y"%UF1H:<\](*WpXLnGPL
%3+Omg8//.!e,hc_[:@9o!H!QdUb\aU+<t?=:*p#]KZ]-."(P1C<>Za@MNB:i*a"RJa)Fpk_k\1GXcht>b#Q=2US:84L^-4F[AQn>
%-]UK=!:!,&_B=iX$FpI;"Asmb"pCqZ4R9q2a;mPRMCf"1)SjD7[WXnR?mga1,hY'XE<gSNTq3:sPHu,2.?od5&7?p4=M(,&ckkXl
%eA]PN&f/qBCfD:8KOH+K1NoQ!"lNsX8k6br#@Z"ZW?+=PUaRd.`+5.76HE9t6.Sd^7n"mu2($Kr\h0LoN=uRq.^"6A&lg3U,A8<i
%PI2!!0d._C5X^bMFI\^#e+?O=OLn=dP%kL%b,R59JY`N+M8NGIfnKa]Z8UUFIO(c(N!VJ0+<WVI;OO=S1+$;>^$#JT%K8Z#*?r].
%qPYUT,i\qM'Ze(+o7tJM-0?_/j>jS^.S`'`Km$i,LROC2E@.q"`t:$0ZdUp<8B?m^n=hJeeLE=DVJ*3@.L(T^6@pQeUEAK4ZQdr"
%TMdG%Go';6@8Clp(AKdq,,<km3bTI3quZ^J?LZXI1=\W\,rqK`6rQo,d<75W8>!%O!MTYA;=i_MS7UrJQ&9"0C(H([m#@PTW4%H^
%[=kWAX>mnOks+OR]b.hA<e53bKt9mL<[#FDGVY+ZR>NV(jf,u0CoXUVi9_Q@!k1d#'H@p2>,F#S<p]gu5f;qZh5pP)[Fp[&7+6%'
%T5]`_9uc6K,En]Rl-VT$Qc=nrS3.rkEtV1a?k*YJ2_K8]8>_(J8dC8E;EJs0n3e!4]I0M"1n.PmiY#W9`.o@=3g]1OC.+UUZ6Fd"
%]pH`=qP.S@j")gt1WSW[diDl[+8CO%?6h>HiJ_nS,9>GsY;aluNq90DI.%>FT_,oVRuuhj_A7u%"=tR,+GV^?Ar&/L=J7P#^i<[;
%ArnW%;*\A*Q^hUt:]QpG4po\"Ks(;-\DW1cNE$`[!?-5L;Je2i-Y[5<\4A$r=G:N'4K8.r\^utXGbj4$'cNA71e4H8j&2o)l.:_j
%m:L`\2^T2cT/G>^:s6t(^;Y,S7?#=(0\ID1Xc:Kg7PGuo>M+aBVtj21oKJVaN(^cPUhGSVLidNFg,C3C9[F4<D0(HSR?7V61P4Nj
%.63=s4<k2df-8#WaSZYtXu%qu6!ZntH[m\'[9BM(3.WH:GXXn6Cm1.2WbISCA*ki#m0rhr;W3Nl"$l9rM0;:-kcFBhcQl"O_Jt2Q
%.N>,#mgGi5R$q_WH1f(h](*3A)c<i!/+#f*JYT6a&V[&eQ:eGG&`sQ3Fj,pO0g&0._/jQt3/f?)0#pq-,>5W\2;h$.3nMZm\VZDT
%iF3*$a5fKPRj?)ZAoqEXp`EbA6uieHVipA_YB*]LiUEk'7)C0.!=8WRb"b7#6-FIk3U!q@+1@"5%BgV40WZ_!$m6j]KM,5F&<suu
%\0+6CXFaO!GiDM<15-H6XAa)k!XA]U&:']Q?u/bQh^G!eKQ9U5_%):M<?VPQGjPR;"obh0$%OKb!/M`8)n;Bb6.r[Poc5XmMPM,V
%cA7Mu2)JU);QqXe&/43A)5;I$=081-"S5)_i\3iaV^]aG[op"K`o0Oe`02be1AE4,Rm?R*%(O(rCk]AJOCm!,Wa49$M\q%Z1\_L7
%N1L`I(_1U$aP$b=7RKV\[#`*^C(X^F%jNGI\ftkK;8()o&N6s&7L3\IV*G3rK+T?;YmmEV??aD&/>s3K%PA(,L=2;@>B2Y8/om?M
%+]hcNQP)P^'s\)u."inVJB).=O8b.Nb+`rX'riDc3ZQ7ZL8p@q#B6ei\WkGOLD$c],6()#+eqBd!1B8A)^Q/t,+)t-X@@Y+H48(!
%%RF8D:Vee&RUoaK"Lg"YWu"aP6-'ls!eJ$T0`QYM(`79pU3VjD5mect<fH8End=+cbeuJ9";2RfgG#lu5JZgMnfN]u+=#[tJ;V5(
%eH(KXKN.G*1:[D0$+ORsasq64U_O<Ad*/8?TZrQf#r7X[:c!i.EpXr%fn(Y&<5h:2/1&.JE*8;.R4&^/#'`-I&;IChVc@)2Z5gsi
%AO<LCP5p1/Z3n/pcp7i=,B0$2!`rOKqFM<Y2Sb+UD2.lt=A.3;]aS^]HDaAK8L"F0+s7L*=@PV5LFF[*YP7uKl*qj#!%$2(!CHbb
%[(T+Qk.%^u4+]6n9gE:.MZDHl9sr.qgG5h\;RaYqn[Snt,6$A@m`OA<CR7Ifr(.H\#S.FVRS%Yaof5[QRH3aUZ+\]nqbWTH0T)E;
%h-o]Eg+;_1cZS^4?1"#<JqjZ3@#b'"-V2iY["8TY!+tf\,QmXie:u36eZmbpCr#5[/84JQE`(kLY"^atTkV+9Y84lqJ<%D2+!Ci6
%OKu\acM2b"cK;sQYJaM3fAWBNCe`5A65nU!Zs226?F8k;k,pEUlTo;$d!og/1rVaJa^4(FeoprBEhr&$*ghXVnq@`SZHV.HRUtX6
%DeHX^afN2]H(Pu[8`N)G:9Rk4?]3B[g3$:![SFi)!W!KM&&P@^4j-lRi8`$>;YjRp$&"tp>fer$Y$]C5S6$.=8c@rGil"Wof4ZKQ
%S4o@#SDi8J,e`gq0%3q(_kD^TE;H)-kWc4R?_R@;;%DNq&P`R(<ussX%[Q.\DH%9V:94_6#7HRC)DDrlKF$R^P-;9Ji/(HQRd*3d
%<1XMr@#?MgHJ."VS,b7,,!UG,IH5s[*G'&XG\_ELNL+>lX1cG<4sJmo@[4A;aA>@83YSbVY'",7mH2e"Vu6R,1OSArJMh&Gb(L<>
%OR%!j+1BE.rqT`j5'C)1:?M8XHT#oAQnp0D0oD8M$/`S]c+RKE9Y)=hr9EtYhjsC`Vr5Ni2bWk@lrZG:0V=j;bH+gCSi2f)4iVX)
%234A[&=A:oiG6+XhdDl'cHpYN!0B)Cr>(1=n7f(?jdT!Vhf&YJ-`K:pGVS4V\FJ9dZ6*MggZ<IW#sDo`fblcg19ZI<0CjduV;mN.
%;&49L[D3"F@hcTenho"`OZ>dE8H*cPR+6EJ30A"Of2BN$iNATqp2nN]fL!<j3eZ+5j0;?GB^ht52W+0?adY3`<mguMG@<u[2D6/0
%(W&l.Cjf?#/H`%*)sGWE3SEJ#[.ORfl\hg!FaY2M[OJ^i;hl7"^)c+9YqXa.GZli[qYWB/Rdj'3;glF]e7Y`'M&md)H6sJ;Er2.)
%$89LGK59'2fh7SpjnE%>RJ&=R?Io+&?>%k#TB8!nU7:n`o9/hHeAh%4ph(O)ioQl_n]6X@3NkM72r*c3:V?:i[r1n(I^>YZFa0Of
%;gilbhu*\+?F_[s:";`@5YWC+j"mhTb?PFP-Wi#8,]Rf#CTSgf<2s1bPS$jUFq=K7VQJ1Ao3[#fG0#k(%rGY!<78DpE+9R")/!07
%H'T:Xr@6a^+N8D-Sblu)S&=l=5EG+?M&h%hf5&tOI3O=1p#)3V!"L=F1(\)1fnHsINMtKVg_\GurNT@t!WW#=-FY8<I-C(#YSF\d
%q-XRQ8ATHj)RKVG)0hk7\I#IE8*D1dbcBp,:QT-o?hlhT[7@DJFS+2:b09O)g9[[uZ/SVj*V40cCiRDE2RADKmVmEC4s7ugg<Mtf
%%mAWegt)jT?D2!!]uLeqg!2+tr"5:0`d@W>@!@b$K)f^,X6jB-:&+JRfL>1J(.q9@F`kEaG,ZN!W'I1bet7$X@UOUO4uT%qrS`Om
%)][]k)8rpqf&(kr#G:seI=V@s><$$bkr'X[os$lg`t\O+T@<7i:\=rV!$#LR`cS5I)Onq,#EUa^Cf/Jn*Pa@8R*(Wa%JX[dkl0,!
%/$N*ZSEmgNbk!!b83"/j,oH*+6*%CQ:@A4RU2%2lPMJJAF]LBZL=<11n%%U8K<,:l%NjTcIk@k3#3Yn<6QO306&Ic\mgnEES9Qe]
%YV2o+K<MdsU&`7a#]EOu@H(X>S]iP$jd^X?.062j[qh]OYk6+$8]]Si37fnQB>"9,'bOLEA<4r\@Rcuf3UgT:HQ.dWFPXk\0^rqF
%O&Fs[L&@-gk-'+O*&<Q/)LK!.Es"7(e(*U+DVN'UBcl<]rBXmF6I5@Np]5=^Lg8dY7ta+IGoiT].MR&oJKV/NY=lH=5ip'-B(%qa
%:NetuqIeiJJR>OZO#<6IAQ,Q5WLU,tRkM0mX!0ZEp0#8i>\b(-Wpk.$fS4roXN,/Unk=Um3tTgkq7;_\M/@)2f3b^mD/Wl(O4qg#
%+Y*Okam%!P?s*m5HC2f"M-k.U-d6Tf%[c\Z2CjZtIT^;sT;4P4T!4eul*;ln:Hlbami2]#s+&%"$q2>5J^#iRn5c(9*BN0X4!;pu
%:QCo.]F[&6Lins[X*2jVD3Elj#0Peu1Sc>UbAp^O5?>\/p<o`K:S)IIZkdfTH]-%9_gFdodth(rPh:`jHB%;H0A@bK&Ir%qnORGj
%\#\<NVW!"+JBQ>(k4R27H1??$Eq=RrlZ=6qAl[*i'Wh3TEo5*J[m.:XIQohOoBP/_q[D9)eErd_bl6EJH1797&_W0!UI!acO5!1:
%IpDsgCuk)X%]<'ej."oeJ;ea0?0J0,D\M5LUVTH?j"A3]8##aN21GIrf#"<paF2+,'sHFDGHJ[:54\D[[n0=r7Hi(nj@lQSVm86\
%R2\_elm%;QHtL\S\1P`5:)B[s8mIoVG_sVV#2_@JWsTCC82;Bc'@/8)P<kim<5&C09uf"6&KM.(&?EI@_!oH"l)UnAo'AR;et9.J
%7R78Yo/n4:^)SHV!Peef?(#mr.lolQYd_Lk"Qns>Be>9ipmBhGe*A+6)ZfC2"*Y1b*`BUhq-qY!A>1)[a@T1gC$^cR0oIfSl_(r6
%(M$jAjmr:gk+,B0YTQ?]VeaF!P6V;*p%"s79!n:P`1L-Ng*YJMp!CAW\1C"hE*SGK#W'(OHi6J]rqqC.RBo1Vr5Jc&iUQ=8:rO0r
%qE.0[&TS/rqY^XA:!d.b:I+b,:;&s$_gD^)G<ks5;L^FJhLdLG#m\AAg8'/7]ZUlD1WeASn"X.W/S0<*0#-bZ&6beITQpc55Cfog
%FD0,l22Tc0-`-E,>e0j2E)JtPn5Q=^W#sja;o)O/-Nf[VX<0`N(U8n@O#>AeduK>Ae0%nKa0J`L%^&,&\En!&Nc'.L[9`\djK@o3
%.6%K`M'Q=?i`.b9J^;:Y6tSNMcrG<7PI+`bQXY7JL[$oGSffNUCec*=In<E`.<9!iS:qe4SN9n`.:<"J#rlt2\9$#OWGl-9k7`7Y
%X^jF<3_.Ij?7C+YCIB9e_@'Vdj.+;c/9CbMAM0n%+OlsFo$F")q%1-%!DOPC0Omd)R\G0e-UA7(9?+BJbD:6"s(0;:aQ,J+qeT=,
%"\/Ds@V=+I,0d[8\/?n]pbo"ei$Y-u^9GHk&krKEd,FA!8(Lh`Q-C9b88u?<lQ<.5g$R&Q&%;#QNirOpF#`LrOj/1Cp>BW<m.J+7
%J&hLufM.pW&Ea-\oFDrM5J?L^fDj*#fmirjF(ISB5,RQk4nek/iUnT^p)od3:VC&_oUD>[(,qa7e^^il]=rEPG?#!/>qgaVVrki1
%m)sIn@:.?-Ib9/*k/UQX<U7E3?@J^4Jo&Ccc1P"!NY5>"6Y+]SO.W>-W^pdD;c?C3@>YPd"T6*=q<FE]2<7nPNfS@K`Fe`LGRD4.
%R6T&m=u?*iCeTGm$,+mn)/D6Z+]'&DFa,2YOO*3IE!G;>:lN:NWdZ?YFq&>@<<C7ApP:$["C8@7j:%l9Uqp3GnG4Sl$&FgkR_kOb
%`XiQYR.s4P<TfY5+`85"OqrNK4GH+;U@!'YWpL%&""S-.<0,e4l?_+&K6kk./gK.H4i4L+,sPD/R?D,E8@@["4p_"4>H2a)F/`K8
%4`j(iOAdMPajd'?I[u=dimMJ\IqPc9@$P7Gn1teIXebr)D?F-O_YPi6U88-aSOm'R2QMb/]r"HCgdC`;)\nJjM.e@P/7.'l.B]^`
%^/75k%0'^`Lh`OF`5?qnCO0T)g)LG9q<J.Lm<&.u=/M4;UqW1oo2CWWY3?\6E;hnXGk3/,D%`A+Tuobc8]cjCSAfe$LRX_]i<QXs
%RL^sD#e$WN8N@r0`@UJa2U,R)esM\PMc!$3]6:VNNd#mb:LCcQ5/LS%ohZp:4a/Z;eN>L+\,2)o77Mi^3/;5[&d@Hgq:K`=:6]^s
%^_'#Q(VlN1>`R7d[>Q)4=@b8ZDgW5hE`2]uJrmUQ;F@.^>XY>nqZVdSH=CV_$Z@;R)iZo8[SDQZY+8O9\DU@DrYB]p'Yb<*<g-pr
%(&5RoEu^<nmFT3+6%A;V3Mme'">C(CUeC;)>pcRlrl(:'C.%_q!Qk2FNT6dY$g?D'Si&<m;Dic&;Ge!n<<t76D(PgZnZ"p/##/,l
%)4Z9Zq\9CMn^#OkGEZ-r>EXb[XE6eje?%SY23Vp'-N$kt4/UM"ZY>+MdjAM6CE9N=T$!Q]B`&lm"`#/k+;O#*]V()1SNeanD^V.[
%NpZoD>$_`@$m'I&0Ft]HC[t=F`</uUL-S*QBk2ZN.@)iT`O9-6c)<Z+aPO!s:/c1m`>X'u`Wo+$B9ZImBW9k<),Z:E3>]oZ;:,g9
%4.iP[[n(&EcQ$CWe4.BB=t.HoHV=Vr)#]Cb:(dA%VS6[YIlGro<;JB1p,@878f]5@-.]R.(&CeZ-KkFDm_na[9krj%>V\UECQkHE
%G![Zp=_/95$#?d;9elk]qY$p-YG@<Oo&5U+IE)aDI/Pop4GRPdkM7i"(pi/aB9heQW/9RFP::=99_2Apq,`ORFV(Xh/jP:jVk57a
%0\MUG,<2L;e;!GC=,80o&C@6Ei:-ABf"/S,&qQSgS*VW4j/Of#74u>.V/0M#iO$BpHW"/oE>T;:+4MuD8kBrePFoB&_MndtL39UF
%"JaPR@1*]oq>'Yd?j1P#(@FORf6;,fr:$k?`lBcA'8Wr;n]qjsA$Q&h3N-<l:0u:<>>h?a%.ab6OK6!4=`6)d>V.rFm4$8@e=7V^
%E;utn*%@F`4QKLQ&q/UOT)TOE=9U?>jRHcZBPYPeo(?Fc4El5'$GWB=NbNN_[ILf_<SEh,074h\L;'*"h4F>Oeer$9c9C(s\N$B+
%S@M5uSnN8Zd+8,]mpYhPe%W);>uHX0;`e6>!]3'HG!Zu"]%tV)onSJ@IT+XO>b@Un>7V\+ejCa+9\SSoY)/<drur,a(!N6AX$\^[
%Y\LgYc1=Pud]![i`?][mM@)TXHhY!Ws,LLGWu5+8#k#Q_'^/tX!RSGD\M5\>`C$%T0pLYG+AaLa>Z4Me&"lL;+s?I"<S8R?TTlh/
%WbP%P6L>1QUhh6r:9Z2t6?_'`3t89n>h2YQCRkZ*hrM97^AlAh0Ea4T*8^Xe:dh#jjCZATjfA4-d)nCTolW'gQ6Sf5ZrrE:1Z.Zg
%a9;"nk\3GLZ$o6kh[,LH<""eM\1ifR%LUY!jeoX\\kHFc._]`TgcBlu.Ue73d+R[upEBObLG18sF,!nTU;T/Il*\[h^^?WTKQ>eB
%1eaCXmag!ZJu\SV&<XakA:-1a;6"W._R;ktnJn-3AEu4gJ*l\9=ntEq%#_iNm.FaUP=DOC60iG^i:o9g>(JeFlUMKh-;^d-2"5!<
%K"l]JFWer/3/]dY8[oUO?L+>_dDL>Q!BZ.FGPXK;Ns<45F-CjH6GZu%JXB'uc8HC&(4D`^K%!o9;D6u<F,m*WB&;>=1Gmu\ik=e*
%kLYN[V^9MM-1UEgH+tD8mJR\R5X2(BhF!fE%@Nh1fMXalKSVu3V]rO5D!;$'U@>K[h`0tS=*;aQ@[/5hDQLus/#:IlS4b5DlM4>3
%,)`f2l)><MeObkrZkF:(ftYFi_te@b?0fiBfW,K9=JM54-H]\n*?a@)mc*W_AZpl0hK;:Np3OAjrbu#H<B3.k["P`b%?].GL?_.M
%.c6rn:RrS"H_87s3P</(V_uEoT^"*N=Z8Sf8eZb_)Ve#1D-^cX(]j`BMS-9YUG^iISoQs0fo<h0#G'>PdQK$%\$R1XCDFkRBkR]a
%E$B!]Bt/lHZIEcTD<jGGW`1RQp@;U)@t#a>0fTI#B9MMO/jf":,M,V@Xg1&h!UQCu<Q*VYS:,ZF_/C"OfDjMs@."."IpKkCO&n0t
%!Ah[C)-Eg@7YJHZL'r>3B_.Fr(hfH2qQq9![ogO4J/9fq/OHe_EZP6G5]=Vs(kj^&15[B8;[YS)mEfsA5C*#6E.hIi@3J[d)h:]f
%$CAukZl]GTR?B$#'^:Et3sgCG@KB_%&-Mk>d3V'ma"W<h&1uBMG;(Yke/gb2(/U0sa:LI%0s`3P@mA?rl9OLH6IEsB27B*"kl^Er
%L#D>9=F>f[rPP.i2T"#0<E#J:PFs&,7/bsP!.3CHZIf+7qnE50hF$qn45(<ddhiZ#.geQi1]`eS%kaMrUC)f?XmDsb0iRoX=S'i[
%14&s0^iY@,A3OFqfM!#B'u^l,1]p&0i2l9S4!<hM+`-ht:[";7f28#;f)Rd(,f>[:\QeGR,@HnAFN'-(/]tTIkJbMCSb]*6WN4Es
%3@mFB;P*t\r&9u!c#JMQfu*=;K$V*,l_OglW-K[43$-P-Vop?KZ#p-[aN#b-a#<:M6d[lL(1-q%+6Ei`?[lkZY-r5-]rCnjQ35$f
%CeUBW!M@)bNHAZWnACR&'ObX>NO=X?%1Y#XU=qI170PG!8m$unJ]dU^+S4([C9r.rW&mf,\BCC,7%^M>)--%j@TCDTFW\F+MHCA=
%'='gR<o](cIV>>j@31Y5]\8kqU))l[Fh.Qo1Tn8.4-Grlb&mI6'`8sA/gUFsW**m<CSI%UTb::PS<P5<9JDFDA*gt*h0X7I"qnC^
%<_N:p)XPsGk=+\TCC3B_\c;@#3b>+)\gGd<Tg^tk#R0_Q\FbFHY#RrrCoif-bH0N;fZIH>\YVpJd\oCSNSul[kTBrGoO)@/<HTPP
%\PSR\^"8PWY0^]c>@"J1WNpAqRMpJ._h8Z.ro^5GMIb"<!S?$YS%bN%&ojufD@*;,Y2[:&[p.ZA?Zq!]*8i/ns8FFsIqJr_lf?i`
%X#12=o#"V0rZgJ/Dudk+K48^iaAW[B1YIc#QLie6.0e)SWRF.l#3`oSL43<$5;9DYA3]i#dO2D<%pTPX<`Po>G_b4TWD>_JL;X[i
%>%ek@$04RriM#W-ad]G<BBb3BAb0GXn;Z^Y>X"`Y3alf(,[H2_VcF1,rXEb#ilfDM^P?b@dN'Bn6u">d2e\GPg3JOmW;?\_>2%0u
%ods3(%&71@\X%t7V3SQ>NIa+0koH92G'M]20QkF4,Vt6T:?etD9;@E8p>6"hO>T?-0L;JW@V%qFV[+7B,Wem/+8Sb4fWmn''Ct6T
%!rUe5-E=/cM9.Ma@%DM7_ot;>:d>%QF$0U?9S_U7EqSX`!(b[>q(7#PFe!>e#SMrXX^Xi\nr[FIMBb6JLKj(ec$Zc'%lm]+i,h)t
%@@0LJ]?Bj/Wr+'8nV<B#g))(M]@so:R^/rQ.!"aq]8:o8Z(fk6XF)5I6`_KF=`O->dR"TtC>aY^(4c^71eO@U,#5(pV!YdW,_O#k
%:E![g*OPGV,"cDN9i)*22:XJd"Y<Y[o5k[K09=NK&YMfpie5Aq(^pN&aKE:tm:k`2Yq[:)Zm0*>aokY7nHI9i)ItSAg7lNYZ9&KH
%fo_,R1f;a;TCt%4-^-)h.Qq+g-cP8/o6go!EukUUM9@X*XqsAR)4osV7,?)_QZah7WGnAL-st(6-haZbGP8fEiouAXM,,jMQ4*V1
%@6Ui).5ag[4G,2:-DhE\V0#ldC.LrTcQ)+$hcPF`E[.JF.7g@hI74\'cT'=._TlqM7r`O<XJOV&_XVFlqQ0PS^^J=o?&oS.\Nq)U
%Hg!-Cg_g:GkM\#"?"p]<-Mj/!Qe@tO6Zcn_#.Ojop^5\K3b3m1ITTd@F)mgjr%6G@lfLuC10&R&/!._59?U9_:`Pi,1Ji@4RTsAd
%+k6#SC$X9_b@Q<IC+Xu7Rf6imOHAhhbD_G7`&6?gqrMKK8pb're5dcG;iVbI(p.5kH-s(egYVC7:E7KTmbEi2Q)Kjt.&0IaS+_qM
%c)@d;G/+EOf'>g=X.lQfCo)Z_3qmgLpc4@eU`B`0ATdAd'YqUH:Zb]$AB2eV,SgB:BqF8j!usq@&SiHH#N"qHM<=?IV]%3RE''Cr
%D$D[MbM*#38^<EjYqqQlYE\bR%ffSlOg^Tr`9'=%WrsEh+">HK*drDa8aBQ[NffZAYcTng7G&g2g,tRs_)f...@W8[:9sWM/nl!6
%ODUbR.$N0r2&:+i/ePB=)OkIYF+cb,Pp!2W\dY[HLU/uik9@#4I`e2KY/_`N-r/CMTBUrW.>hPCnm=np80Br&p:2$,jW=_5YlCQD
%Z;BJfk*0PYK'XAJ[8j;:;0hHR;IdO(=PE[Hr-hR6<5'Zar%eSgS!9gk;4&R?37P]0^)$riq3%.k?j7@:_eg>@56sS%5,\cqQqJ?;
%om3c$gsCUn]`-1`fr-mM6Q@V:-$D?0=R%`J>b<D2qb8\?UEGrSr6(E2d-2YqB]@MG$_:V_(P)Iok2WiD91:0TQu'C.]<I>\?;ko@
%AN\%[m*Zi&n*^fD@)Eb*J&iDY>oi[M-i`&tBu3S2n^iigUHi_#]#6U+,7<dQUO/0tLfp*6-(A]#SiTd*^P*]"5Z_@p.7Hr;P+Ibc
%T6:7nYK,V]5.95LU5rd7HZ].oO8WQHLVa?OV15K2=X-1INqH^G0#&&WE,GZ1n2SPVjn=i:7D(q)/2o[>G]sDb_aA.6-6%@pbSlqE
%9PCL8[/,[j7:EJH7EiR=BI#TV=U9:%Aer(06qWmM`Y"T<Ln*Cm3r=jQjEO2#Lr?cL^gMpLCa"Tr=RkDLqTq_bVL_*g#9d&+!`,^\
%RN+k,I^>u_K_WWPl0F%8`dBL`\/4tHV8K,Y9mp"EFIZkOg6;H!Umu>=#LCTH@2+pq+)Ef=\m\.W5r!!ajm9!J+XdpI!V<kA!rpCH
%jp=0VH,Y(T^Q'-Pl$Amtc4>!/9o[^n?VJLA"5cn7b&Mm8=tE.9=XBe/0(BP;[)8fM37],@$@j[@ZC#ErjT<LuOW.jq%V.8d>ud$Y
%TJq\fa=\-Zg'WLq>Q?.T_:"CfT7I1hS[7HnMCMZtXKp)"8G<51d?t<R+<qR<([5G2##6igW3T*KmOFGn5mekoSu>5^A(fpGSGkX@
%+9$?U;lTU1lQ+#WUGQUSF'5;q%pOFVe;nO7G/ZFE3Ye`mr=4S;+dP3#o)T-._b9a6l;%]Z`C.Uk\E+"QEF//TqR(,!AXME7/6AmP
%$?N)fPY1Vi.J7R8k;%)qXUr^Z7!6''cKf`NXm8mFY%gLZ,)&:fC#=Ftq'kFFl)^Q'L=Du5QmQ>c-]-?#]6$d5F_N1;V:P8YBDlS'
%Y;qb2s3F>(et$#D+n?d6O)Bu:D:36H$,#,>;^6.*!P0t2Ut_\(X["u7L5q;GL[V7je2%uC]1d-DK1K$.rOd*&Y_,W%Pte6$DWbT#
%_ppYE;je97q]'iY6V`u??+E;qZFf#do%;-S;M!AU3>%eT8P<kSZC"A?L<.G03i6J4?pd&7h=tp_!;X_pHJQu3p@P3=EAS_u0cj.M
%*cX%9McABTQ[+)Ap=qg,Ism*A1UZb`2W!-16d"$`Jlu*W%3^[a+F?-3:LCoe$9+,eo[cHprg*BF!puSnoOE9`e9Z5PAc/XnP'0I[
%mUi>I9tAnWT1p?pGP:JM.^+RMr6%\"Z$=@#>VSgu.g7mWWA5+hB@;B063%X9FB7H(CFedim2lMco\$=SJCC'*)i0ZDAl:4?J$T41
%3P@$`>QCXd,pWF*l7Mfk=I.M(Z\Bt%+mue0a)Vd%&dpm]eF3#g[+AutOB$%n/I6DeU'm<:3=mB"$pqDUT/(@UEd!\1k%SolZQuDn
%p<0pGOofC\3[F@`*;KoH/sUc\5#<gWrW^sj%A8)GU'FUbm212sLY4O4r*Nh;B8BurYb(X[68GQJ*;'tY>J)n9N_&#&[YeT>W9[LB
%Z5^;J87`[SLNKeKK(L>*a5KLIn-Dj",TY2u\`!\REgZciOX?LM6t+#o(9D6fZ)M*Kdjn=KfpnssY'`-HDOOHu90DLZ8P,ErW9#k(
%9)E^Z.NBVgOm'Na#-^YV`]YVJN2uoLSRK#S6P^>IIF(<@6Y]<SbmNmX0<NZ9PHD++5bQu$R<bS9L4>h6g/Ds?je\?+9,Z7UJ/-,&
%W#>[LCr6X[&u+oNg8Rei';*O<Ls1965gGkIQX+#LUNKeh<(WR"Uq)nFk_lBOF1[iYk0:RarZ.*5,/U4AEJ03E\k"oe#?CHlC'%][
%eV$bJWPrSLeC.EV&W0>q>JL.g,lGQA_l;,=o=O#>RZ+$0L[H,%QIF/r_7O#JO$g])S.8]*i^oN%ATNS5V1]SSGg-_851Dk7WQD:P
%Ju,p2<nBg1Z@>d';57Z*G`c\:!7!"N8X3'goLJ?2QYT=YWH8-2aq3/L(XU^e=@H$(Ek_ZJ&l>W8''_e+N2-/L&uFSk<k*kTcpsa1
%k*YiV`SU=Cke1t-?-o$nY%F$bX;MrP[Np)[=1(J1Q>i`EY!CL08Eb.q2kutfDup9Sb#)G2GTIL#"n^iq!@G*FqEco;?!FW7>!]Fg
%7&4VNA][@eV3n%c7f#W[6SjmN;!\3XE(a?IRO%_S[C&SVm5&=CPhI_V[`QfX/CnP+30h\GA3bZI/I$iXL\lePa)3ZIIHCrO[U>5-
%2m?^s]n_[%4:sWnC9_4.I$O;u"k[!LK2J6(<dSS,)k<;O]u,u*7:Yi"-qBuS#V->'J+jh6JjACR:)>t838&Va'Zemq+B3AieXLo8
%_YHIhfm.%mf-huFc`DP4`(HQO<lH#R.,LXC-Tpn$^p;#XL-4Pbes?cNc0aAiYMRu_AodA)hKrH$jj=P;0lctY>4qh[rfp;TKJlre
%XAj.RGnB19[i2)tdO0(#U`/W\CUCCIZC$c<rD=l#\tP"E7TWqDpjUok.NPjo$$qNph0pqkc:>sm.QNt7q/E'PbL/L(PauL+4e7ug
%!Na^QD^q12<5L=<CuYDef1i"e4*6f`Le.hOqgKtJo!mt.#?[[C3P0@4@dT2\pXnu<6uc;QW+LCg_T,B%jJJ76AR@O1XY[X/j8>iI
%h3>)!93bgdQ"ioGo1G6g9abOP"Ntp9PFkerXXQabWQcuAM;<^8UA9=?AF8gXo?COq6S2.)k-CX*=\r086,l!N9@SOBH3?F$HcI1\
%DPY#a=scW6_!*0mj,<Re'):FNY<`e6cg=dniFanN#]Z]o>UU)OKesZVIbrG0HG&@;9ee#2pKmXj\uuZn:eSC!3o/DcmRgXV7Ba>o
%fNiCUQe;R\#g=09f&.YNWcnUM#r,u;/s<?:U\HU][kI:FOe2B2!L*!rq>V$rBbNh,aJLal8Z"D`?_FdL,htt!CC2lfN^+hEr(SK;
%J4AFAQ\4Ya:Yo[00jfQ@\RBCD(nNt6TJ,2Wq,D]EO=(lR/k;]VnHk`e#=;RP0=L@#\o.@ij\SRa?FFtrau0;@`7=uH-RalO`/qlk
%4j_^$N9<2MjM[?Y\iN*6H70/`X`bfVV"cU-Psd/]_(3'/,4fEW*Z#?+dYg_YP\(8lb"1D@HkA5>Qk(D'Y:g2>S^EZK_T*[.j0,L=
%n)N0!<,nKFq+o^Vqj-)c+cA9+n=;E6lQO5l7p15!@^;Wm`Z5G-6^S!ng+`A0+*.C1Z3:1b896!iDKpq`K&W?C\0F+"i^W?LPWQJ<
%"21S&[*qJGl@E-g<`j)e5dclWg50!M['/mA=`7nlh)do=3_!qS9CV-1P90-H$756G:*O@C,Po)0s4.:%8b@L+7#pP,rr3"!@)jbl
%q[j"j^K/n^%V&D^I(CuE"EL7.KW:QC-Oo4NmK3<4WdBeC*I0JX.D%M^gX58sQ`TR,L%Q_Zb/&8:7#C<"q"f8X1S\A"NT&KZbb>I@
%VcDJJQ3lE+p4XP&(iOlEDMg9(:Xnn4N7"n)b,SAdp[.87*B'U9PahnIo]+BYGh0;k[hnP;(*-pAfUDbMbiOe7S%\s>n'(U=oH8%p
%dZc10*katpmWpI0;uUosP1F;t7Et%'/+o_2f-D!(+#0VFa]j6a_SMpL=7'r];V.jeFGE$%cQ+*ZPo^,_e1S(prfuG7<\IRcQ*)_k
%b0^$D+s%Ne'al(G]iGH"7N\o['hc$`Prl=La4Es3,`GZH5>A$G:sKJP<-8m$';&&pW?LdV;ZkE1(e/^X'n+4J#ToA#N^a!KjeU"i
%?4I!&4Vp>+-:b)Z9Xdj8j.^@iVT[&DjW@96/H4ptnk?PJjm]u_:piK'7X9pI,e.E*>s8V?'aWdAo:rcUMohDVb[uo\=!%Bh6CoF6
%X^Y9gC#+oseM[3p6&+_J:hTu6oJ%CH9I.VX'#k$QBr]41"FKahZOk`D-p#r@Vb#j,p!8.n<K4_DZm\10UR7TNhunK\lF?1nb3F',
%2k#lnp[XjpCSaBXo*PJ1-0"%0ob7al,)loS.30m`pF-*<\/p<)3hsH`_VO;_'XbVpDaY4#e8=g?Pli7W%[-Zq>8]Grg"[I2\gJbC
%GFMa./cV*=ghrI*\,!`]mP`AXA*r,\qkfDYAOP%7<-Y`u7=Tb[mtf%;<6`g)R_@H1*RTV)Q(+Q74Lc.Z-TaaU_1papabd!F:=$)s
%)M2pF5h"Lbrd+AYLNB>'7]oH_q>%F;fi,6'E2`U\%ebNbiu`FjC>Q@P6L.[gjL[@OiGAN*4Ln]$Ctd+G*N7>NoP51Y>dcbc/`b@/
%>Qa@5n3M95j@5FD9e5K+\u32N5+*Sn"6poX3u)lI;pKa*mUZ4ogR"Le[RFQ7[Z0*KYMZt\XmZdEiWoASUL!l8RBSn@2Q)Ne^7S'1
%j6P)a#EpRE%YP/0lEMidYPfI>ds.Zf@cn?el(_!"d-fl;j+Zn-As#!CeN3G,IaAb:)CMpP;-=-"L,E;mm@,`L,^3,_3NOC>fTs\E
%9iG2;q+t#RdG7h67?AR>!\b)='q,N@V+$!CI3t^[XGX+;B.1J3U_)!^T)=7W-XDi6opF5r$]Uo0TsB<?;W95aic!/^3=cr:FAKAi
%L#]+n*I*(>2o+/ukJuWta,\qh'dC2)"G$#.85)S/>8%UXOZSj[rsGr.]Ld:K@J)k89n4M1n!PX4s7/K`Xs>5JGR6il,]*,u8UF<l
%<,dnOh2(_gglf3QBU5!IP#Bq%NmjTamfqseAb>i:N0@S_rKt)?0Jp9A)'ZCEB]IHtKcm'<f$ce\k[?kXGg?505jN:GS52feQ$ce5
%9X=8N.Q7#$2Dl@3+$)>B5Nm[AoKRS%f4OR=%tk+u;0hnbr,W8g%/9254PU>5gSS4D+OuWb9;_@gq;Y=8Lm/NK%pgNT&;+9P5\R't
%Lg6T3BIGq'VQ[E*4+1(o4I%4?K8o]W?h%+#L-PF#d_i8urSY/an[BV+k8`2M[E\Jr*f3,5bkm%SojB*FG0PK;mXMpXgc'i^I^.R/
%fGe48Qt2#`o;T('jD#.YUgr'FP^`5GG!F>t#QOb`Ie.i1RQ\i\;Wm\-S&g#mH*B0r!Ub=0qgPl$E%Gg$OS`J(pf!Adf(DjB>]U<U
%Xb%n5J+ut3a\$r2/Gbf*n5T!cbs7X[co-'&8Bcp_k5X(]4,%j5eSRkDBL<$HAm>nfX?fam9e6mQ?Y)ED>[oke#hpX&ONl:>Eea;5
%9Dl?*WUH0g+7pSk@R_.\abRUt+6bX`(24EQPsk$;F>g$;mS#+DBH#>sane<e;C$+u$)W_R-_s:rF4[L(@LIXGbrV"/RP.O,Sjdj1
%$UNe,@]N?X)o^17.`3Sh3FuMZC\!rE%":N=&uJkcc()o:^6*CN%JsQfKmW%AC#GFQ9\'H.VFh"!Z/oedk`"9tTsj^Y-IjNBJr=S+
%4W*hH:<?TMa%2[-eD<fdU'LuY-bEA#B.Qm=+Ko!YR`:%3G3Ho@Ht"p!aHPa$\m^/%QH`PY=O'8WGu6FC-OrgIp"2r,]%P7KHq4h&
%E/Ab.UH:R%`Fj@/LP<pi>KGeh2>aTq*"j-hh1YVL!U/Z=^KUs72CZ(uk;LTAp(MI*G@SDc3R\_#g_[qYnSEtl2hJZ(Ie6?Pbd%]X
%Cr95!Hba@Md,0<NL+ES7_o3B?In8QBO&ld4'I9f*P8,k%VH#PIbEs'NJoOdQpW8=j\X:M6*'oi95%!Vu[sc5up2dS;:RLU_ibn5_
%Z-C9O:FDS<jT_M+GU0no0]Y7uHjifV0Oc?Z8EL8q1@%@@-l!4io]*QT9uC<uZ627p=Z3CN]JZDXbC51QB_S.J++qq,<;&<uF/;k^
%19*@P#ZYNukps]0_`FnZKmXO`;3%B@(!5eSc,U/SEJar0W>md;.g)2<e#&Qh:MXRkj/LW\PHABQ$fosYSnc51k1<djQ*^>r^+ecn
%qGEX)F*_9Q;8Z)jcQO`B,Z/QTet8.ta[)h%:!e3[%ja4B1F]WCO2btn&^\<(kP4;tk8lJ,F3Bt(MQ7X(0QYPX'(Om[K,5icDNT4r
%@2lC:+`*N97-YaH^7oAJd'd!3EW*H0F3b]c9V1LnSB\C_[6](C`t/B$eKuH:Ujf><j=BDQW?rG2?u9*8LbVJ5$l16?bUJF'FM=iS
%Up:%V-WgBl+AC7YrJ0BHDLRr+I<hX2qaeSJ0DN.V#C^fmiiXN=di7.:'*J1OP=:/,OCcUMK,MPKr+95]s5pYC;n(^O^Y@N@adCos
%Wul;bGBE3mXa@qcJ(p1+pU'K#rHuL]s-M_r_g"3(OJf8pr,6SNLu2AN*LK2)aEj5C_j,59^l,0hO0F)<KT[?-e^g7'bA?`1OE%<d
%!E;.Nc0Et%@RpBQVeQT?AVS["2+2RjR0uSOo_T^Bc*s58*Hup)F8qGpe.eD,eY:l_>+'(t@;;SVjp@BUTF!g,Fs%nQ`_sTWim5O9
%(B2?Jhoo5_[EU6&25M<m<_)"ifab7S!3sN9>?6VFEk*mjA'4N\R3:4Z0porA<LB&PhI,A@S+%([hkBFuJGC4?^Vfn,Bn85/`S])n
%]Ca8n;o>5kJ0*E3Gg21kLM^3"aH<r[6?]#p1iRpUa&hH"no/oHHlYa!nr'F;o9-.<daN)#Gg<RuVn8fK&Q4N_BlKGWT*$tAkca\&
%W7a[+BIihp[@Rqc6G\q@XWaCt8')$>8J06W[3f"C(6$L,`O8D)=7o'j;i[S($RIZ%U6G9sV]X]U9'3a404m;NFh*8O.WWR/UV<tD
%%-O+>Jg#1d^RE^4kN#NOmB$[@</n+[37BgMr-^KOOB/loA-l3K[6F$R`V/uF^R2i2-pIWV9>j[(\).Z'IgaD?3hF!eK)fLj'7N?C
%hi!)=q".ti1Y;i,\Z[JpHM\i&O#pmRLd+[oJA-XN#l'ZA*=if0YqIi^W4pDteM.<,$;,!m74OhST^TZY9SUra0erGrSL?4V:F[1$
%C)2_M1=7];%Spm"/)q&_Q7h=HH4:ji$=V49>dZiqEf``sNY:aBZ8:s>UF+oTd6tjVLmmU9@QS!/jI'UAD8X8oEDF@b1'&a'Wpp)T
%;l?;/,uK)p;=X!in$7d[6!K#t^R@`mAEiHV;qZ0!_Fi5<\857H#L6`[W`022!:+bg]07/K0fA$UR76ACIaEXBEQfb1BfeU!K^Bb9
%J1`"BKQMGkmY8pK>OX)4A;=:DAAbB9IBnU\39?Y`-f;HfMFuC*<5T6_=`baYLitZ;:][^@<AJr%H2CqH6dU[P(Z6Q#9#$rrrOsMs
%HXmYPFNF!?@Aaksr!<464]FgY4MTQk^i=]CAsZXQ<])OEXi$T&]3)t9(8n`OR+o]F:!"*U5(#a$&gb?0k(u\Z#?7_Nj:LjT4O&+i
%?O-;lgd\ioq684&C(uAHM-[kTP7D$gYIQ$,JDiYei/Zr!XMUVb]c^Ecjq[?.rBCno3Au&_1<p)4o(uqLlbRSH4aQftr94)m1-&&N
%V80.![(gt#s11,_d5sR;";o7UGUUpjE$<8?7d/5%s1(+;,L?#M6LCXL!`i;<^o12\7\3t-#j8#u#Pko&<=Y':fQVQ(VUnX[pn@5b
%;1cAD;\8/212'M;W=0ArM<n2OgO+uu%'"!/WaG0;2K;Z4HSmPRVnCbR"E(CY[ulrfC!UWQl<[.U-Ao$8'[/oRd7kquj$ld^,J&)#
%kBdMp->gtg2u?U/aIc*:K7:D,LF`aZ;0&;T#aBG$-5`]LehbgJBG@f:+dZ<+Y.:<pfu<#T&@#-bBec:(.02F#Vq:=os13?C]!tMQ
%"rlC0f<)jEI0TUd$9_+c6`*V312C^JH;3%E3\Lfo'ods$2NZBc\)sLN`Y!$s7rg.q\BV?McPe+L"@miQk/CTOl2j\;M],=_Loh^U
%r2AX2I=K2ER+8RGf"b.n5lt-:qBdsE*qW`tm&jL"&N>>L/4OuNs/eM)3Q_6?s6Et\8,<.4[_05]m>kthR=(K,q@Y9Bh`k4jL"hsM
%I/i#(fRC!J8%j>!r@K%o39,d6\ZEh8<Vt`Ea!7RR8sLjOWc1*0[8GtX+qooj<+/CZ,S.edL>o!1ZV!>ZSZj)gWtHq#=N?2]QDucA
%!Pm&=j8^cW;3T$S6SnYlgWXpUb\1NQLY.ZVJo#ViU)erIMk%%GK=o-\MdVtTIp%h/G=t8.06PZ05HVNSCf;[S+.Zbo=ADuaW=>"3
%eM`rmFr1]H5Je[ipWY#!Ej-^W;_8L,l4?q<SqDO$k1!b\>p4jSU/dpIbA%X5Z%Gq,E5<)*!`'i4_"qHp"XElo8P-1e%%(JOg/Cdt
%?TrP^Mt*t"l5k(Sop[<Dma#F.9/Bi^Wd<.jA2m>9G;d:FCM/,oc2#Vupr3eggH[^Pm!_1uY>\ko4"-7+iKgQ&gCi&[&qHZ.jbVX:
%'>Z#\n\B.n)E=^cV;p;d$o(TZ\E[&0$Z2V.Fr:^4>_1SH$Aq7-)0nRa)Ke&nCB`bN:'KMqQ3Tt,MgtJ#\kC15B8o)C'SLJ]Ef;(s
%V)tCFAj.%H(DRiE!QD#TOs6^^F;9N%3@_ab="C_*Wd:MbU:,VpVnS.LrKFBp%hfg&+@h>:8SkBSSbZIq*^HS28AQWRkEF2kOE(Y5
%O>!L:l/bk:a_Y\sCh*gqVq;Zm:*iNbRRG*"`?1d`9C(on8jMPN(CouGW<-:LFi-pL\_dr`%@*fi9^]gKq03[DK_L!KT#JTMo,P`c
%-5,UJ_R.a.<YLX[-b'BVXNqpIb73-WqIp+:3/5ge9Vi^rn3@o[C+4:HD8jqt$"&BsT=2>\XMH56aF(J%p%iZB<[/3!QprrG8?n(5
%,4>.bl5)kjBrAe@GdC%bLd!!mfp^-r:c+t\M'UKO9074X<KL9CBZ9NTP-es1`L*0+["a`?q?Bn(;q4M;nWmu(C>N7a7SSci<"I=U
%6l6V>K8=NZ\N\n__Hic(D1d.YERg,plufr+D72qK`@&=r&qbPZ3Wq-]W#iH!6_-tr&VZjsfd,AZ,_1G*eJPql0[H2EM)1Y'`ZocE
%J2`abI>7'6'N^(\J;+N@*3(:IBp?Y=gW`o=19$W1F-f5%j*J?_[:JN*/>q%HPEK_J<J;V@IUGeD:W7LTou&91F<<d@\IO>E;lLk0
%-+H^DM#2Jb0W5s%*_u"0M2QLn>dDf1/fH*&jHWR":ugFETg\oa0lC&/A3WC\++rPNVah[.G-284ajr@6Y3l2!2W<nk,4G)B]3$(#
%lD`]9-a(P*'(Mk-1oU+(EpmX^_2!J&l]FFa>ht1lPrE,2:/BSp-)S\jedpr;:'g&3mlg7i2$0A5U.$fTGQT&!Lc4:65GQ>-+h+F3
%=`[rHbJSU*:>DjJiIhGm/#CZlOdgWk9K7i[Q!-dCT/pDN#NnTPA]6'#<-SW8,V?s;J9t#Qc`a(BB0sB_F_0P`Am4?Xh5n(mJ#j)A
%p!s51O_4[H%(q4oK%,f@,X8ApN-CWpc\V-4neOD?kh@9Tq<$+G>NN.EhZ6g1l<Q'cpZR]#'nMII!m`AW"qC'Q+Z`W;h5D7tLhCF;
%ps(<)-*(R-%Hm(6^-6'02BV?g;,F(:d(4;r$!bn+`\sm)'#."uaijD`G&sfflY`9YJ))H$N<%\qlUo6@Wb.cV*g.M9\h>;CHIB5;
%'$W2Z,-/=d4K6P818HC(ZN#*2E949c943S^a6$*"'-20GpPi)22#T/?@:gSMd.u7u][HJ'Gh,Q`kI#$pVsX%:$hZ%HlUr#^j;Xg%
%qSUJ*jL:t#)P%[EF2U\9Qt$WPF+jJPZ;U>5n.#GY&uLP4-)N,F6VJfI&gr_fcPe<E!YEF8=>,Y4O"tf&8</QPKW-;RB=+H[<T&WE
%3>p:BKdU&C'7iAecDhPOcD$ls`@">KbsfX9<Pf'+eXR9$e4pPEC%uSmHd-irKMcC6AS"k2=-]q@UIp\L;S=<4b:AMWqg=?_dMDK;
%XlpQG<]bt3A*OI*B4;PBN%)#K^:B*GO=SW^4V5>(M&'$@*1''Wa<Vgg31eM6*lh85/13EYH/c3i*<<b<D^RYf,r*T2icZPW.A\V=
%%U1I"0%e`04LKt[pg*I\iWD_ZYIj`o[E0V\9$i`4dnMX`2W_#<EmT@39@/%+;/Eoe-u/S0\_kr[.`\/^GX^,F2F;OLRhRYc/3Y`_
%rF[m;':2%3oO:Z?_V&msn2re'1M'/u3W(L4`o`C]5&@o960r`!&#cLEqMu%c&U]eqS[n0!6^";Mri8GSX8MbY23?=N(Qjb4on]jZ
%;p(dm+kTB0&'%mT8WYn`36Um,%si07FTe8"'@tiHOA?3qEREA?`tS2eah<l#RUI6+^H-a!aTYYodip,)DUig.,;`?#j=(dd`.]R!
%#?3r=/`u[H'+kaK;ho'eXft;0E@@ZAA0_g<,kFP]dBWsZ3rUSbG.M5i;:$"?Ld..7.MsXL$(Xq^I5E.G39h&bajR'jEJBG;Ef4?T
%+Y,^?4oZ?:?5QR!FeAMmPFCJ`dH0]=P1;A"_Yte!Dlcb4KW2n^Wk=lMJUc?^r[_F46a*q=/`u:C3RuZ00#_I%.Tu+eeLu@K_OEtn
%&#jM>#*iUq3D$UbIj,>9W1HE@\uJ%:-Rq)RjQ&-'faQ3#?))ViHua9@#X5D(8Z*<'X*""PjP%pF7E@XboD3F;E;K4UY#Nso/+Ap(
%I*p%L.ndZNT/N:f;2%X:'T4a2B;l:W4Z9<@i\dOU4N!%$'p9C=A)nR=<5QS?onsu#dQk2/5]_=Ije?muCd>AMZ2(4@IqZ?hfSNE`
%7k#CT9`CAPe>Q%)oj^517gVaFFt!qF%]O!_Z;Z[-RU/>FBM<@'`95O9L16Wt`1aE\p@[(JaJHf]0L.q>hR"hHGeO2*Y3>#T[=M6W
%-JLuO`(FQ#O^Y7R?]/tLDq8N`cf:2uIuL[L4U%`o#,[$E?*;)K`RD-6L&97l"a]5C\DAC.S0iDOOek]=*D>^Akp4CZgI`\gKO9>S
%$($=?G7\J?gG.02VP;L#L_t]?[:A\2L[1]\-SJm@>/D[<29:f(-NH?)LV^_@d4M9bf,PAGTIYHTFiVCi2XZA2`M"U1WokIk`[MXO
%8UP^i4q0WO6h:X'7(-Djm^?)"olT"d6",Ja>qPMN,op8AJ\&=5@#cMHWOVVc%.S1uqOo%M4n73S?-kA;-@[WZrQBnZmGPeXl_uVE
%S0!q/B%ij7eS'<lm$fVR!ramIX<OE-\-g0K0`Z,eDY_'nmE-A8PoJ'N8b\a4a=H0bHehN](bMhZXf29^Kb]%Y%?'c77i'p%=hmEB
%+n1X^;GT"GAfp2+k"<.$9o""&lit"6;bI_.EOY%,o4BCn;(`c:4&1bMpQgh#$t-WF[$67Xa2Y(m3DAAZ6G7ili1$]8^;X,+=%:\I
%FLF3#RT,;$p#r%&"U;:l(MQH!T.j8Q#/;=DmEQ=pEr(f*Fds7\.`>,K&OHqTJdB[V8Yh<_M.Jhu1MrS4E4RJ;lW:^P8oUF]3Fq3&
%1E,smZ3h![%p[S]>EG)!KYfJV`'G'6lEl<W<i)BU7?Es5(V+pBhQ/3c&k6;fU@mQSa95-RQ`;PT"<"(Ag5XO3@nqh?,Q4:8aH`At
%kM6.?=]>n3pKHpF!%JMoL-Eb:Mh[*kRD,nf35J%aWoM-a>iuGTT7kn`>uQkbeL<4/*\NWq`sjZ<FGgjK^*rER](NRLD+#;29.#CG
%4R$gWe^NYgEP=ieO*"MRbuS$`VhS1(!jrAGi)K\Cbo;\aFInX*8=iNr?g"eZkD0Fp![KUm+kdZh6lMftDT/m.o]In5N?O@`o8OJS
%l4X6AMRKNZ/,D3Uh4U]meodL)6eI0KP6G.r6r1@p3r':89fJj$.H"X+V(nN9>+aD^)<.e4dJ*##=qM0eE$VYd:+!"_s&k0&<;]1/
%A/Z<5nj1K,Q9'+U_[IuIIOeVg'fpu?n+9@3=bgZL%8gZcmN;XFaRcD4a"n.`L9_tIa-:ffHX0@"4:7mOVS.%Q..Y>O)UV3sb/q@m
%5-g\]@&h<H9G!%tMOPlWYoS;P8Z5"tW.J>LL\F^Z%>XgFFmkNM=<6p[e@<F]bDs=q$D7Kb8MSJc`]2>0F=rA1Bf.O$,9;]g1aWsh
%L"AJa]iQdYGWsN^ZDs(0r@]@-ff:5`"#QdKIWV<FMY*%D+lq9QQ#1+Z0i]KSR3V0\`3-ra!jK)iOGU/=LW$"dLZIWoZ%?]:R[]oa
%0hsA'CS1;#D0[eV;82=hljqI;@Iu?\q9Jun?k/NA(]N`U.J**mac=_GCE9J#SlB\uBfjG`bj`Irj@HWZV2r-h,Gb#&c/Tf2$r<iG
%qt/tV@2<J`"9S[-GDJKP=hhW;W,i[ZKD8IX=@2c`CT5n[DW&XZ*K05Tga&Q6a:4a/)GP[jl\?EME,bM/f%7sniKfJL0JfP1KrM$n
%%ffHod''ut8XL*YCDKt/_CiPI%6P-I8PEk;,R`L_?POQ<,tAaprIg?F=Fn8WBLt#<YYN5]`m4g@Xf963CC.%(WFp*S+SK33#/kIi
%aT8kL3JGqD>6YO]nX-J#F^,H`FtjH?W4sEnk6;`NqpHdP`J=<E1DPc"`25.Y<hHhR?92b_(#!2-QDsP@Usq)XlK0GQbnDVLZ]Ot@
%Th67%WDHhT-U3+Rjg2q_8'2n!5]R"r<kQ.%WbP;fN6lT95j4&u9:oQhD'Xj*?s_WdFerI7/>0%c[='EkTbZP.V\R3JPpJS_CDV,&
%'=&%?f]mSO"R;OLU-Blm;uh,.HrP:Z$o3GDXdLI4#$;B)=#+t*Hn;PC5O2:G<#i-E$h=9nlRXbg6eQsgDF3OJZ;d-RP-2k$frhP@
%rG]d?`m5'-?m=*^W8W$p'03qMg2KG<\ZpY?h=F,Hm@J"GBB468]1mnGSdA@iQsC@)gf5qKHtB&1`\uDo06`mHjUU4jp-(^N/O^\J
%]#80J,P:8dmjI=Q'1t$'OkBfq$b"''f)5np]6jJPDUR%\3-Q#FDhI1HCjhA[pS%F9VS>Y#H\c'j-/9&e)`/.W`=Ee13-7*lj,T#P
%d$#7n`.%b=Y7YXM6tG_ibnf0hi'9B2BFcWLiMSb*Fb?u+/;O*)p0rm8nZa['[YNTq\D/+<gV\D#4E,okDUHE4$G!u&pRpXhrS1eV
%G;/^/SRoRrY-5YurIN:4:u!YV]0h92f^U"nhOr78b^'e;Dc#pB<.73ah]<p/2i&MQap-&H+T;mL".L:I-I]1p8SiD`pC,)+'sc#N
%gbUJ8%*Un6o.uqY9DcBsjE&h&>?U_UAsKk/X;S+&TBQ40:gR.T@[cbjhl,[jC8#]NKSHUW8jl4h6<.^ROFAelR7_#R;6Io33-+8*
%3`el3ECOEEeS+eB/COJjc_JTW0g5`blrp#[^gC.Nc\>=a[<<(VVb[&\F-BaoA&8*VEn\2aJh@hHrZMYP.(FUY-bZO7]./Ya)Ib;H
%&\rKb@rXa$?G>Us73$G&]4iRXMh*GS$j'T_E?80.-OAqD>8Ski;S=LoC,d2dE&QgjWI54^I>6=,01Uh':*G'iqtp_5*,G4c;bOIH
%[Ya<!k`s?L0E;T:o!*]A&V'`TCKQ:(M>h\k4bKFO:%qS$,=&]&aSVnoFX1`V<Vjs)6^3eS7(c;oE<h?f<a6Q'hrOc;C<d`d&+'%]
%,2-TKhNVu0WsZ+^?Vh8u98oOm1L.hD7*@^`[9A8l1/2S^W<O$Tr/XNWikPJP6h$mAUH=0.OCEH(7Co1IrlZ*YGqb3G&HrA,"%,(q
%;(#-5oN%\jc-cS`<#MY:"!icVj7M\KniOfXWkVRmS!]D*YrnWs0q9#EROCn7ND;K#+4dS991Q7"/M4-/-:Gf$7g$W4_DtTm6>!^X
%UcNYX[L`IMijNL/7%6Y?:VM4B(%7IFSt&L>!oko*CgAFnB:ICU`!<_)!F/LE03Hd*dk77l5>%'C$ffKtUs6'PTe?hS/9N[d^m=U3
%BP>N@AJ^i\#Os5YEED1koPrO8+tJ=LQ6,Tjl4&<>DuSVM:Yn(\)n5_4T>0&p=0!NL.Gsu_dgU(C,*L1<FDoU'dS?OCK=PSHAeRTB
%),llTX,3gQ$qG*2MOc<@.6(%q>9D]ELQlhU"%eg;/Tt#@\M;M;>qDjl\)[*1D.$sTP,rnSGQPA6rX?ptUuJpkY"e)n\%R4sZpf%4
%oQH%Dm7<]X?;q-+72[P#hOdh1i_o#eBY^q;^[r%%M%&"8.O$62S7Mp&IhHL2`MhlBH]O]e=9\"]>97KWa0+LX.=?MaH7Z+]?^9?T
%IUo(>'TFqd!GU&tnasa]5$E32gNl_UD'9b@!O;MV<2f^^9r,_@]7rQa\Z$OFIWV=>`D/7cn#m:+a8CAX4qWGINki?]g#!n?m(63S
%TC"i:rb,*_m%:Hl2VRPY]\0mbHi,O(pu<pX*#SF6jl%Yq3O,=47i`lJj'^4d](0:]<JVn$];A*7UHW:30uI)[e+]>NJ>=0``fIV2
%Kb(CSJb:nFHu.ZX,7&+#H3\hV@Z^kWK4X<R3LX16Z!Bnm5d!AL@#hoeDu'mYD+)8aV15B;G[f!!p[>4a0<>SOofJhqX'P<QJ97DL
%J--imqGi$:?*4QPIr,^_2(3`XGUflpG5RJ1;jL<o?.:g=m"T[]nZSVCU0??*pTf#Sb"X-JD`A-IhXDA=Gq.A[&5uLtic;VO^bZOc
%$55=1m*#)VhON<7*hDd7Rn[In^NsM\iNICo-.Q5tpo'4cmAFd66XZLphDp'f&(E40ZjXPFR%Ii?l=o"d_g`VeE/Q&\@)j9IH,l*M
%AbpDDrl7/N^7W*."8^D:IQR*ZNkkf.ipLPt*0S"qZ>jhADU@6I,&\k&.2,jDiY:0?Gb/X$36"12]FRrZU-mY2T,1DhY*NJnDTTR?
%Sii8Rm`OQ-NKs($O%V7-eLfDeAS42+W:dc4[P'!"rIB+RY240V4'9-!Q2`S@nITJfn?G]31K*>:,e^ESG]OO[rp?;i5D%K8gqAgh
%2\a=r=7T+dge]XGE&@#gc4/`RcO@Ka82irc4Wef6>MYBFpFOr+?$8T8h2uV7,i'K+GL-*@OG!!1i]Yb891dtOQ[^]Z?QP?'+7Q.k
%<A/:A/>!jH<QMY;_LK;jIZrW5J!:;NB2)],dE^HdR2n9%-^e)%^ok9]!h?9JO[Rd,^W-aH!:<d>9;o>s&02m+eQ8]VAl/AD/(]$&
%ik"TT*BNscFS/RN,a%si>@\=he##9elB>3%CV>%*_ke7YWl4.W[;iD:UB9[d"o'!96bUI!3iN-h%[<:>c]@EFc(DC*K&Gq7FKoSf
%!'G`-?A8%G_o1"^8bLDQB"^F!Kb*tY[p"@7D,J-_pu$(s+MQGUlj=VJ"V38If#0f0+@H6/`JhAs]g))`2V5rCRMmQ60:0G'Zf:eG
%niOm5l_ND'7UAeq\J:Leb>980X'>uIP+D^LVY%ucoI7HiQIkVZHa^/Ho*/BR9ctJ70TcGg,VaGo.0mmXHgm0ZrD1Z]mqDISq8;n#
%RnB]B)e]l;4t0m^X_YX-!UeY]C6JG1.6S^J_p.1qcS/A!P!DuO<V:foWi(nb,C]O6eUNr/Of7O&RD)r40Ta/9&Vd4"A%*+GjtL"'
%K+!lH:?k0Q/Xn$pVG3>g4f1u*PCJ.kr8rm:;d/ANKEq=!*k@O\DKeG2poMU:0_)X;<i0a.ZE!MiZjRVY`n:5<3IC??heLX.'l;W&
%[t"CD)M%k_T'n:VqYAt9PN2Y(Dm$(O(%0o$qsF[sJ%I^lm`3iV389sMpVZNEL<<f50bcN.L:cpP(*tq)I-ch?^A$:KT)H\/hZjLX
%Lgh$Ag]Ne^"5]-s%6j\S!6Ljho,X13"5%q^>9FEW]ntB#EW$pYfH:>:4Q-c4kaQcCX=f1Ig6inCEZCZ9\VmD,gRe5qq_l1Alh?1O
%rUAI00__>5bN`DCH*>-@Q>>?X3d8!(^Fp55MFf`AVgAd%NiTQrFPWp'iYAcspp,mbD[8I"31N[jD-k'!(Xn^@rj9fg^qo'^Xa80-
%-807sP;aR2[rZ2'3c0q_qf-gE'DI:FT01dcq";8B/:IZV)`W5+S)48?%1N7:YMT?WGP(p,-$\*T'OFMPrrJ_K&bZH#r!'F@U&&!c
%s1d_gh*KnAf1FfFi&bP`#FFm%oGsmE"57[J\Mq(Q>=S@Q+F&7'-GH=@?h_+oH]n6WK5C65mJZ?p8a9#&rLS!.Oh?!cLt6IKpWY)`
%YC5sNq"4V5]42F`5jnFGlQ59)B*?;_gf"FsSG<u7Ff!YD:#\<3$NX"?"ef"N?WW`QGTNm*](84*S<5D2AA^^d0idXoq"DJ`.God'
%pP3*aM]Q^L#@@/Q":m<tINs#TARHRVE#p>X-44%QdsPF*'CSP26_i>U0ESJN$P2hBIkG-B!t=W/o1qFb@2i*_r4??Zg`4/"]=@A]
%?QK4kIi(&]GFXF`<Ji&:LiUm%6%D*$=<aY!8(T6P;.)!U1<t'53c0Y:\-]*OH<u+l2hA#keN0u]HQ^]ZSr'FGGn!-2:T"fT@ALtJ
%rfSrAJXk^?>Qk2tNEXTM@qD.##gQa0B<SH/JZk2*4`Xqrs+?K\2q=P46I;bt`h="u*iu(dFoOY?rpX[4^WZNSH)*:(=!cS8pNDMp
%nRqmlNSbgOL7a[l?dFEJib:K.[B1.t::'>jluiVkh]<o_2s<9qbO6kP"#TlbHcOn>PWl\#,Mc@a'Fes@QM.m`)ZckkgA*Z]rU4Og
%^(0Vhng2ZJ)d`NX#M/>Lr4ehP2o34fXP[(YD_Dh";blhr:VApDd.TQYI>@a2;#c!KTPl@\?f1<!,'I$+gFJG(Us&0-BD3CagHJ^/
%1SsVWq_eCEai@\Bn(lR`P'sMEV#>HTJ/bc/#HEB"ote=6iC;,^Y']rQ!NhsqM0B]RS(Q`Ts4N8bhUNS,V/Klcmp_A_&\i0Odk([p
%bAc$V+h^sTOFP@=D'\ppg3l<.DBaRWZ.+c3l:lWu?P=p'9=3PT>T\d8mPJ?j]!42Ffs_2YZo?+\?bZ#b]PZ0QgiRKoC:Q9+h7()s
%mTldcf0f5RXjZ;QFs3=^$RhgrLShNjoZ"ODh:ap?.Ea_<]bWVKTTf&+g61f"*Rd2.=0p/;-<Qm1ik?+Q+uFSJrC?g`QAo)4DHE5q
%/OP&-53PV1U;lm*A:Aq6L3&B`3nY%^1BWlOgEF2$!`;"UAG=I<SG9T'oSQ6.';W`OgdY*,@ZKdrY3P^<p#g%h6dnjVbA(7DO?o=-
%q*]W]m5Xc4lZaO6O^/GjftX+mMFS?:WZ#1,@VIBXcos"S0L?j./!Yd+Wu@C;,ua,-%2'r84b"iuqaJfL>%qjh1T(#526-eglSW+"
%[oBMfF9V:^@3ib(\9B/:A"E[d$"n:!\,,N<!l2ZpcKU;<MQNoQf!:jLpu5LQeZZ/j!]6.44ekVU9gb&E[lZu(LL])OAeXdI4MgSj
%)]TM=bLQ489A-c.gT3nQ+'W*5q@;JGbJk\k`Wd2NOU&Ah;eTJlmnVsEq/r-YS^T)1.)P?]1*%3`l.7>__bXQ-QBOc1A5t4Rb[WU@
%-<:ol(:2_6(RqD[@sBe0DnS[VJ.aeaSP4+9KC3YbQ5NsuC</<K)&3$?"&inldQg+K&n]so;!k2[TW)Lq^QuM[Meh`E@^u(FfebPh
%S7E]6D7.n8Su!<=Km?DWoi.C.l3uN%kTXXsTq!t25`kqeF5Qc'bs!<`bPU&,3X(q6_Vf1_XJ%AR\V%m$NKk6<4oKO6"iX1c*N\>p
%Xbf_VX\[hGonL]_Y*pqSJ33<2R46m5/S>0m&^`Se/5`AdPp4ThGC@p$307$K:7U;oAYsljmY&2tY&!AQb@Eje6abYB]/PS=S)q&%
%W)M,"UEs6fW_V0Bq[S7GBQr(tmdL%0I]iV1-LR'.S1OVgW]7-(8oCq<(aN;^W)Y(:3h'?f`5a9"*++XcZFb5FbZ]9O5qRl&1m;/c
%>g9;`)TB8e%NB,CS2KDQD@B#2CX)i(VT3`S:,Pu`W-h5"FH+h4%:#f;BsQiQf!&1s1._DrlomY4;mFT0eoIOk;sH,%#<Mgge?fEt
%>WufA6BpsMe2mP%!<Wu"*mpaS^b>0\H?grc9B77<'Et-*<$7Fd5t^s?!Yi+"?Sbq=2MiN9k&0DJ"FPm.3ZWbDOU/JFfr_#5:B*=P
%1plJ`<o_LlnO)E(5g&D^bj3'Nhi7UW`]&'VM>=J\Fkal\?cVIOWP&!g[H1;11Yc@@G2XSaNuTI[FhY<ZT9!r^M4bpCHX8P6J%+<U
%<ja!dh9Fe=Wk^06;^L:GXB5.Y/Z5&qXZsiNp3bQKqYJV:M=^`9GS6"$m8rEgc1E'I>5riJSYnqn\O&QlhE<$\,ji$q39oAV/*R35
%fA`L_j/)T\VBXXS';YXe<s*/-[flCaW43(eAHG*7ju&&\bZ3pZZjEVsFMH$gXYeYtOD-d8T<KVVKpSnLf<MG+V$#W;0@tM-Bg3t^
%W=%V$),eCOig(n/(V%@6ILF]kHX#'B2-imQp$dO5Qb]*2$j'!f@;_/aq[QG8'[@PJW]G?7X/M#$PMp(*U;np.E>%Zhc8goumRe_]
%0e`-[Qr'YcD?"ig*$UFs]O?;*8^g66/16\+fUEGulS)D+/W'&UT26+\eVA%qFDe[DZ-YK-Gfpnkd@#e\3)8@R9rnimF=eY-,='o]
%.jcWqJ44G1\jmRDE1'/G`f/?`H6B([p)71E)/eT$mCFZdf_$4adYBX<Q5713/-)XI+q^CZ';9N5'c6"[]a\7_V&H;SgI0C@rk?(V
%1<I/D)"(f=2gV!&T'dKjl=S'$bJXn>#t<%F_mH<"_%4eG9BUKdWNNs^Z?qXVlQ#BkkcMVu^bt"qnN1[hmSgh^p-9^FGh]b!5npm@
%$m.m"O5-[%.C\cN2S+%Zjm,3q+6:cOFr.^F[MY_5O'qgmA\:7_?^R)C,ilY;7(pQl%;*?orNfl)mgh@6#@#?"PBa=,r3K\Vmgkcb
%K?XI=Q#rADJ#QbTqp"-HUiH4CVBTQY)6J@*24c(n=D#pS1X`Oq<Q:+hAN\d:6-\I?hBe[Q3q>\,!:234$-7t2;ErC^+Jdt>+XZpg
%M315uZR[(BH/:"8Hk3tiUs]\;W+S>(UP6'Q+>P$OPbS=&83eBjLZ]Q((e=GPP:Q@?*X8Q4jZJs`G9#RZdepX)4>q!1g<R;8]Pna3
%P#GTJciXE=\45@n%m^KSW-Ol@A2pslA%;<F`F^f"djn2d8CCYgUb*7F&9-fih&`#&+)u(/cZOA3I@&">rcmtk)`R$;S%HD;bt@3t
%DU743&9M^S,O<6%iEJEi7\n=:#W>>I_$aWt`fiXqp!jTN\3K7m6P`Zb5\<n'5l>hq/_ZB,<$8>^TF[3?e?`d;iGlUC6Q6IIdHPBr
%a`@%L@:$SAPK$C/)qia#[n>jSXp;D\?6FcRAbU2r!O+"Ej-WTs&hoT^V,9B>:q.s\J+9.8_^9gQ%resBp&.NrS>p3bY:&Va,Zi-E
%VGpE@=.%!%qh+'b&m4H%Bn)2#ebN"!=CEi&cpJsZKtLMdNn)dF3eA`?LK$ubCX'VsLPKpbAsNn7>WcdMRKCq!h8P#Q^G=VT>pCQY
%PHS5(Z*'VF-^1[L`6r<?p%n1nN_KItk^gm62@<4%H1^EB:/Fg%DEj0IEI)d]EubA2G1,Mr0Et5*:7fa`0i0[_9tC9M`m3uc^&(X>
%IEg#<IkX1^F(mSrmaI@a=2T=hS,`R`lDjD[71@U7,h7Gt(Oo*Fk(iuLT>?'%!/hKMPphdNod6B%SotbmVUp5GmAAZ^G4$^JG/E_"
%`ZO;-O?E&1$>Hc3^p?!`qIM:>_C5LHiJQ>m@I2/h7AmE3$oaoiBK8+F?WWXq)1#WOWBSg>&@fR:_K[h]W+Dj^r%tGR.%j[P>u\%k
%7ICXNP"tUH363)jA%F%iUd)I<&>74Fn^pguC:luI4BfBBfflrNAE%73$G\Q&ng0^rH1#9W@W'H"-Ck`_YK``SrdglM)!qqSK=aCN
%\PJVbb?La&\1nQla@.))fjSB:>BeqNrq*&;*JiB>UqV<2ZGW+fSYd:Lo%C9,<O&m^CG_,Pp)sq(/H7i3!+%4-#GB+i=Q!.spEliG
%MkH[p!;u!f?a0"t%i>XqZMV:boWs=6[_Mb_l7%E/Hfeb,(B?8e=\aX5NV'Pp,+="ClFQ/t_KsP$m4rMhP&d&ih(I$_8R/qgT2jVN
%)V\,<e1/B3eJpWX.]uc@SDn/MUgah3@5gI?X/G:p7!JqVD]n1$6d.criV]6()ktV"ko$$I,2'$t4#?\lPFQ:\6&@b*EV4g;jJ[8d
%A7j]ib#7^E3gRA*L:Bo!n42c<D*+L>M+I<,n(L[jf12sSFs3+"(]at@ZG>7(;Y,H]DIYh,F^Snu^kMW<2"`nmIAQjE0.lEl`tWI.
%IXNpA+6Ep=k"!U6T0n$gE8@UM/)($<`2sIGiLbX\<J6Jin5UI!,e\Zq(A;b?Y**T`CIIdDD,'saRs=JAgthi"&*a,\G.I>P)rbJu
%r7CCXgLbZanRgs5gMcYpmIAfGYIL,]].*FjD;L8hTA)kc31]rNnj._MT8\4!)*S0?[h7qE_FI>a9g7Y:EH6/n8_mu;+/DjW,[b)M
%Isd(.g3L3T*\<ie$gkd9]LHFq_KgWuP^/A-H'%OKB8:rMqL?QT8Q7?=fOD1[I,]g"iWQ?-pCg^W6ETRXUh#:hF+AYTf?[S&1Ig`P
%7=):UnRd$ZnfAIf8Y!!dC9+jTrUiJ+F$:>s@!+#mlB[S*f-MZhL![Z#-M2Tn9^?s;:K&^D'*mj(Q"E.Mm6ti"%S!&&eEad2a:k`^
%SXa793#5mT`Js7F(=nQGa51tQ6ZXC;HOpWbp=;t"3s6`UD5D$:l>RbTOcH)Rll"3sJPREH;BRl_A.qiOWKT+VaYu.@ibrm^?.C`_
%eoO!i)BY5^V',@!BlZM407RDU1#@^MSRS^`cK1_ZX"G21IN"#,ot1TJ5=nkWM+t+8Ou$eniTYho?al6YbDad2,`p`-?9:9"\L>3Q
%8I:`]_"1[CS`R(5Z0BhE?iQ?:;IR;rE-V`8&)EE*6F)J1Jn[hm!Rh?*3n)%n+2K7&#FZJ.<lMp"drfiN[P$q7:b8'nkj.bH`oO5I
%[7iH80Cq5OAerp]j+urkLT8dcIq7bdO@k^-I72B*?r[6Q:f6g`e`.S>9HfU+QQp:*H[/eGe(RZDh\G%[`gGY;/*sqK3nS,pZMk]F
%hg<\#iZ^te/D$8bjJRu%Ve/`HR]i&Ee!BljmA.cujsUnL<453f.t;Gr-Jt)s+DW4C:_HcCcZ;!pp+4l)G`NiQWmp'i!C9PgQ8Kle
%P*a'GC!lO2Is6L"@p7`$Ypi,:T<*nnnE3@tL;jHf]X6EJ*C'jsZG<DqMGl;o,bph^dc9\W.t:035T$"o[FUp-e+2m9\'.4.3*b:t
%#]%G'H=(pk3<2Z,LpfJi&0kUV7YWI.Miu)BMd(7W'Jc,Z'd,GJ"Y=u1/eC72Hp"_6Pg$;ZZoOK",G-Y#)N+[>NEu@4!1T3KL+'.:
%9iIj7J'!Kf8BPUK`T1A^)\"&0rQA.LjQDF/q`Gl/k\p!8eD?'-YE0gH@-M,(1P\trQ%rPGBX4C#i;NlgT!D\^k8o%G,^s6(/LY#o
%25'aR=ROY6\R+ViI(^*-YTqhsmOPBb0)i&SU^\9J,cY"ane'L&WVT^*D9Co/$<ZZ8n=p#8RBibC5hb'^qV3Oc_Ce.`VTLN^<UuSp
%l.Pn54A(cofGJ?SYc^(<[:@oI3<+8Z[G1EmOnq(5mL7EL;_+Nc6VVPI%KS$!gJ!"lmS`2HJlV1Jl78^A=t&%*/ESBGBg$p-aGj4#
%Q#tRL"bctYRjcjK=rqL?7#k%m!YhY0b(?P_FZ>COLBG],B6(_d^_A#.=q@0<C1!P>$*QZ&!s^o_&RR:8Q;*htQAQ&bMRl21TG.8U
%d`C,keMnei2_,Fq1-?oJb^S9QfeLk8RlRNZ?.E7aKOq8_Fgu-]KR?qS8mS&1`jl"1.ASrTfdMjXfK&#9,T)iXBnR%^YUX"kMJ58V
%YMZJ3<+J"#$$BT7[&cW;,\U!7_FG?5p(1h!7H!$Mi,=BdLY&7:;+8&&b=p)H]b*KRYM[T?7Af(GpXbnM.R"mBmdC&<:hF$"]p1"A
%F4%i$G;I<8^n=iaGcC\^$l'o3a5+H/E)K;EH03n'9&pns@ogfgPH_.,.+W%-LRf?hfK*9pLAI\!XXu?Cl!`uDp&F\jn`coTM8ZBp
%5n$>3-A2-s/Z1PD6#*D?kgHHgGT5++UVNt.!!\I@@\*$[?i!kNH2P/Kq\414U3bKJdI[_/WWH<*=f`M4Y?QbrPlCWt<KfbEOJ3sk
%Dc9XA_>9L2T&B8^,<@=^K@>0KM-37D&DAVpO&7C#l-.[jqA<,'?cjADcpY=bBBSZ)$H[BZXXf)A:AuOf,c)C)nn/TB^m\OVHiNk;
%g(a0Rf1pKlIt$\7O-7CS#(-<lPX%XOb0eA2;_fjuM&\H+3@)]<h9>[Df%%><.KmT^f\H?O*:UZ$Q:>%=__Y"uWe"(3O'U`>\ddRp
%BFh,U7o<lmga+Y1jUAqDk^#Y6WZKK,]ChLRKTbei`9g@c3+]WXB"(OgPiNWK-%V5ULBiA7X<Em1`;@_dDWi4UDK!2p8^Xfb@\BC#
%"o[5QT9)]FH2VI.GZ/a[c]E+Y9%7!&SM3&.l?]VXXhVUHk*,dV!pi/9UC"/s/jE\aKqUkJE53^ncdO3?g(fK_g<j8bD?'h(@_I7M
%:E#)OY;^a_htu`o;cIY$5O0!j7J0"TA`(_8(/0^U,mfp!/m7<4iD9(5cC9#*@W#=>0epWu-I#5B`LOLg`Hog^9QA!5,g&`6HF>kH
%N`ZT>^l[BS^V'D*P)5h1kJA"Pp5ds7[!u`"+jCVQ"16,8SoTTI;8-5_+OL_@eeYYn]3B41I7bbQ`=C#GUi^WQET"SMj-L+`N:5Y$
%n4&EAo#88Po@I'!gL%[Ea`ie`WPV<CI`VoT4o7X;;D7aU="*&+B&;<i\):-WZGVZ"2!$:)k%RGU&$P:!"Z])@nR+*MS<7#DJ4u(O
%>hmf(G@XFJk\r?,&_!,?Q;Wl-MBm6R$J,.n^'kX(do@p/6@NYLol25m2XQJspXcoZf-#.:rot^$;$+n#aQscrFt&U/e5cs-:^?/b
%.sVO*9*@!4#8umK,OC^m<MahX+^h2`mQFeg<Dj7),=U-i"ltD[2oLXF3B0#I,crjY0i:Ug*ku!WNNL4M-HaXjaqMV/M$::\SnT.k
%8am./dC.Ec[H4H1:6QqHs)lh)3JKSXo(p7WYHT3qXGP<RD;*#iZ!0(D#+.+"Zi%k9s6W$0A3jepEV7#[&(J)eTXs\ZmlS>YZl$Ui
%9634]8%=2OU$sb!r@62U&$(USS%E7F\l#"R(BX7*)3ph,$(P=U_Xg[;\NRjn#F@QD1.NgR!Yg*mReP5%J5#`S2b6*,Pa'(s4@Ut6
%As$VjVjuCQIX&W2IhZ%03G.S!OH9"4"Km,q7r`\*O$I$fm1bqd-%!u)$EDdcG_fNqo]>jn=8s1fSc^p:k8_n"Lpi(J8LQ033d<t/
%D!gEGqh4?[L%Q/!Gk:7p^=NnD)c#m#;I;Q\a@n8mj_Q/H(^*tnJZABG<U_&XV!r5Ss,c?TH9#q\LoWNN6(Us=Hi(2m^*&i[W]%]c
%bQTo5(P[B_`*f.L+lm.IR-@H)NZ^Le,3dHYQh*mJrHZ0P%ju%J$Fg"*mFCP+I5QY4kK%JFI!$2:-\tXll@`e#5+I\LBjUQ.hAq@/
%@0'aZdt$2K1J'[+j&K9o`gLqc^Xl=O28Lh=$%\jDP`eO-80bVN_WK]^=$ARlkl?_GZB;flFfLE,O_1-Clj-II83f%ir@bH4D584;
%?1%UYDZ(l3^7eX9gc&ou"r#aCB6TGSK>d.#],e>(7f^"hi=8c@+HLl*EX-2o0[DmAR\ke^AZ\qKic$b"1DIcj9#?fY]4<rN#8/f:
%*l82GL<f#R!ERNg7F_^Lf#Pl(%Dps%h0VQf%\<&"p'5"'(:W2[qtj@./o.]70'r0@pOpL<Xg--#lk1V6FNQf9Z:WF0dQ!<Y4br<_
%=;+-&,)RDd1N;>@ZZQccDp[M``4SI3rs[(m1[!F5mYQQjG%%"t\>Lip)3#*XquDr[!F5'omMupha31s%H>!+$Y;>Al5lk&a24?@o
%B2\19mM6;pH=2,^('ue&ZT;p]DB[S+,.'pjDG#qK"<f6i?$J>Ae9&1qN1S8`Z&mSGOepmm>m?_Z(%XOY3pj4ORiL!r98Q'iD=?0E
%;#@A2Zfc1K`nPV3_dqHFW4`#PDSpZ;j8HI>I'h.rh9UYsAD'YUgXM/[k*Gks-A[+e)Z&45mW.3:DHg,:[;S(lD5MZD'#1?in*0L^
%^2oVWrL#b'I+W6"r&M$L9dggH_H#^k"B&m?;u+6*+DT\#R/cLSgirXQW_2;V.JPK13MC7p]X(TJSLK[Q8Hp>a<1H#o^?E]&"^]#+
%;Q#=PRLN3'EV4%G^SBqf&.EX2Z,/I-.nW*pZ6Y2[_1T[(,ohn5qIM>Zdio,HUm)`.'SgLin"EcdCK;m\0Q_9,%h1Pdht?fe5#'/b
%9e1hAVr`>!IQKQ19=Q.jS961_qo;Tsg$t`B&_AS#W<e*q2Q;t+9l7hrUcAnmbbHKhgR"fP>(?+tPUf[mWq`fLnGHIV;S'E)AF^p/
%UG:heAq1"Z8S_=4rd7TbBcQsZL!t6>^F8'O;$eM:&GoWaMLWoTU1TE8$MLFTXd[3KZd'4;P,-:Uh#SrfTeY*(efg!lY-,OK=o%(V
%RL7A/nsStp3VhB;J0\&C[t@BLffQRH"^lf)j0p]'UY"XuW4b;(kqQ"QEtfF!9d56;3b21<L]D`b`e!diCnNIP;e'Y\7J9=MK#6-9
%AJ:-oH*N)DPXGBi&g1MUo[Aqjd]&)'L'c*h;7i5)eufSBYE:D,^[/mgD1oS,&A0VcKF]IZ<CjTs.o=iFaAg'IZ9tm@=M0(Xs#Qc3
%eV$i2B!mL'N:=Z>5'hs=c^]Z".aEd!GQ_e<;0"b#5Z6-k1;N+ue,2DcZmY!#&<PVH:$l*]rr^Ag-iW_OfCO81rNk)^H6=\ZcT,Nt
%CXG'%&N;(dkmhkBk;HX(UE_@em`O!RB`[;dV]"m`>U&EO^\='R7k-EreY)^*I2Z[]o+C>4FNR5_I#1h8JnSTJ=,Yk[HN6Oc:e0Bt
%HLp\h!l/a<!db!a,J([^>k#R/fJ!;S_\^r]!$:Y6p?[BUq[HguSCK^)@mg9@^_GIb8p99Z#<\7\V.IPlGsIMFE+sKSRi=6JjWTUr
%bCY/XR(]hA?hZD44'rf@d>$>d@fYu._E1fgNdQ4%Ucp-/INdqAX^B.3pR1Xli\oKS!Ac$tT(a:/qHhB.5k,Rh@eTf$<2*"Ll0P^Q
%R(3W6H&I,iAU_=1:r078c?2'NbiQ][=;,UR7D8:CG!(^FA`It;O#nBC5:ER5GHBjP3$i@r;^0o$1Zb0&1,OZ8aO3i@PpS([]7Do*
%[?;)/3N;gP22:g%lc-+iDCF0k<X_NjpZNnkl:k;l70m01K#*ZRfS9]!Xna^e\a`;QY/=G(K/7$+PsS,iN(J4s1H&+-Jd22AHe[oh
%ZTPj6#]pSs?=?Gf25iidFj&1";A/\Bdd7AmA=fgTa>$.EC=Uu$>>ph.#"tX?j\QKBRBLOVd,SM$<-nENWG08-fhcA]K2lK"@?h,0
%3:"G8QAlH&3=6+IPNilHCcm/EJ#dLS&k!bH>d'qC(uBi['lT.6XkQI;R5d@^LBTHGH!DRd59uOX`oL;d#+q-4DP.1hne^f4"tL=&
%5"gKZY<SGJe8GY^>TjaM5a;FIq:95ARlqsj_NQ=A$`^"/n^SloXmHHH*T2,t'g,";'I]XfXX00.21H/6.7oTn::O=T84f5LJl*bL
%cl$.qfMjoFmYpZ2Bn)P"$:j$leW&NEiLHnaOEB^TENG<H(iY`#%?fJGR2ePA.HiAS:lA*m217)c#0*R?Omq:P\?K*Hg":t#lTX*6
%182V6H]-?)j(Tg(>gh_@TPM3[lJMBQ@sAXW760=KnMr^iRCYp,q$nlFep<I1pIbW!;`-r7@8VliJdb9\Bc7:U<j&GEL[V6h+i>K1
%?AfF?-jHf_9?]C'X,EB9Lls+hOYiQ0hH,Wh=SegSe3ZF]%,'7,Gu>,*2*Wbk9@9j&GW\pW7eZqV+Z[uPnRrXj6JfT5pTKj\'ssKr
%)Z9b,P,lJV=&)FWEC_9REn6Zr1O2&\Q^K^AI$.T)3MaT#]Tm%]42UnGSMoH6W6/eu$&XtF(LEA/bdqMc,GJ3`Q)<DHFGuaC[oKRV
%a3aOtN)g9IC\AfJ?r=ID;D6u5JEu<q#`T*)k[f"<n6%^^n2#f<mf_u:8:a]#fM@J9\E!GNIL,j#BhNke]9)5MoaJ1Vec4[Ric(%`
%=B7&oYsumtXIK9MZL.<2.95sD"p:V[OOn.6LBlIY0c(32pR%6.(\VZ#GppeR(ib>1p'.shr9Fih%s>q?YG$ZE[-ota5pY0gH8b&#
%/Tr+A)6U)F^g`)$8Q!UbaZ029Z4:]s"b"5LQ%lu3.nl5:]LOOLU\L12:O:Z]6Vk/Do3UcG9d(>^V6grKPrpdZ@XskUW,-Y[3)#ek
%V1Yf5V7BYc]lAq%YYIN@&#R\7$,aSJaQ0.5/Sk*\1npQ+d\nk#cl"?VRHdUt)3YX0(DFF3Qh-K]h6]W*0SgjX\o"mR+^HWng*0TA
%q2oub\3O>4ZnFMK^MD8X&>eD-Nu9T"H?`M<(hqTQ73K_oD7F:*<HFO#\_>6^LGWZbL\>/JX<P,K;>PY3'!_n*q#p%rYjK45Clh94
%FPFebTgK0@a[7`-o__@5pLRa2a^lrOr9^fZGWnil[$TaQd7(/t=cKt\A2/hWN:fY=lM45/m)e3)VAUs)q8Ok/8CZ5Gli:&K-+Rh\
%>4mkeF=/kI2l4dFBRZTkqGT]pom3+Tcc^XQgJfKX^Y<3?_Xci,R%p81bj#qH]tML,=L[G91mQKAg\Ai:WkI1!Ksjeb:kQ6`q2Y!!
%FW0KBlR?"(\lsP7G?98:QY&qu5%Tn7.@h#I`Egq,=/F"nqln$>FNGqZ]p*qK6+UmR.#p[/^^OF1SJVt9.7oPcd`$b>:AJ<=rc?j]
%:*=A%WC@?WOY7,cc>GENQnC'4&fQs<8!2ljXH_:Q[uJHL3h"buqPH4faTjZ(V'\CYg9.:RDhdZob0BcL>G]FW#7\,!g\7uqjk#9"
%#Y-r$`>5:`\i<"r9e$l0XAV3thkn0^TgQ8&(Im8r#L-7+c8;gS+O!R0M^en9_kEi/?&Zt>mT#l?!D(gSM@Caf<<T59Wll*?eI8D&
%$],LOQ6Q`_PsuEmZC2[\b5>oFfoGl%IVsi58>El0J(`dJ"nR;4)KTgB@D9C93WeT/L4B-,l%RcVlhGoX<1\)8.d44VK(ca-XX95B
%+@?o9ga#:H8B<L![2aY@_b=raVklJ"bm]R0i_T*nr4;isfCFRQU!b"YH611rX<6R>35rtS=jeqU<8GIE2U+4@2q\\PH/KHO&&?VJ
%3uJ^oS$hj%*pW30`12(+XcmgH)L6Kp\f2=>XKO?ZBDd1!_oOOp3D,Z[qCKNdhoo/sKJ\ZEbS]%Xd-CQ*pm4QN/K;X43R]Z[]p4W,
%_mBnK[,AY-?(pUF<oDg3\f^su06<MG"PDLKB]&RH\Bh,a)[VA@8^-"k=J0tIW"3Y'/=0ZtpP4`p_r[)GqfsK]Q>7(C6PrnlKTbIE
%2IRJAjrpVtERRKX10SspFs7NDBlNPG*Nfjp$[!g&HZ=I0[X,BL`=_Wu,@4uLf39Pdpo(A&;$dYblplqO]p?hZ.4*4"O>egKboja7
%,d?T<%N:?adT7B;9p[[EN.5/k@"ac;oK9)IkZ^^QNu,YfF+XPfQ0C\5<5.FSIHCImU^dpI8BWg<E6MK^?]7[gkWsdl9g?!t_ie,.
%DO:r)D:%Ja/dl!E*j*^u'lW?e_HlGRjtPg$5.j`CGqBZZ4[WiWMj[%TLDd[GD'[\^>)O<0LE:($F1^('/RtNC`6VN_Omd"7"P2!%
%RU1>/aL;Xe=(?<!dh#Z6+OXQ7!ig`0cJn-<JPm+/E*YW0n!S-&A,lFBN%Cd&NQYR#s)H,H-#sOd=99Noki)$"_M;!=e5?JY-G=Oo
%H#?7?5]T!J\5?1:#po1,+N&;Z/IoT=A8IT.fIS(XDK6<tU912bD/'7s[1[pe7.3ao5tqPreY+I#),DPM0+SX>d?dGXdp7da*KYV_
%2,Qe7q6.5uJnlaF;5r-i.b>GGLQ>HW`uCTpQ#NC[Lf8Pp5:"Y>0X)t,E:o9\d&k8lL(J5i*JcX*a.P[_o"LWq,9c`7U*O#4hDk=H
%+r.(+)q0mJnf"lEEI7:Xf0S*W!btK1j4+K,&Tk+PkbQo2%^lGoPLV.!ps5cCdk7BY&HL+M]LEVNVH9PO@`VS+7C,b-s0&hOBsAnn
%K(**>s3M^9]bk#MXN^3L/<@Wo?nVrKh9bdNZ=#5OQEZd,n,+A)h<pl;l]jE'3N@FE<G(>C:.1V*E+9*9O,R<3#JYLjl\uN0OYXjh
%]L.Yk*E#SsKEjQ6,(3X+;gmsOM`j1j"h&-n1A8Q%"jA+%Cu4P,(_AZ7-P#'cdT#<JM*VP$7Qm\i@"7L<jA%kT3tOpqK.19"DHs\E
%'2-NhTt#!&jCQUIUn&<dHH!u^b`(1T>k_&u[lt<*CpMjd=O"-)JA0<X!('X+r\t(taD?dj=/h)3U/NBi%1^d$qjeri5VZ(YGNZF0
%pgC\oKiH2fL^T;Kj[`HEUQe"N8Bk,EH<#m><+eN\>"]1n?<u/@.iYO.0e9I.Ah^r(_a:.Q@R4M'clNX<LlY11jh5LiX7s=n%l9^g
%RG<1#c"4J:V8cuR=4@TG18*o&G_Qh<kM6b'i$["<Zhu/21KAp@4\g439.Yc.7eTZq<IdL8i=k[Yf+<sO\D%GB&j&u[>)=-&ZA"2q
%U%'Lo"2$0:n%a'GQLggbQuTf0c1?:c.+pJH<h&+E^,facr05/!afs$HO\]Rm!bcU/M[O8GJCfu1'3l#N]FNGYekB^5S<mCmdd!Ef
%ep)\daI^p53Lm$D.\'`ucb!YoGK#s<]I_T)%BJ6a`D`q(>2aFe<ReA1fZ7uC<ujVjNJe]`##JDiYt%l*-YQ.q3jC^Lh7:H>MR:q:
%?@lH-9QA.;3^rn"E;#VD(Oj!hNDpeVl:+ZRELu"DX51X.2sGfuY>0%S4aP)GoU;oH'bf)<bLA$HX64B%=1h$PPh<#)O)/DB^8%^f
%AfH/Pq`ZW@&[cGq%N"g3Wd4J!X7p["p2fhKU>9BljADN3s"H:EidQ?qN;VJA]F.oJKeMY9lQKt)21NAQ'n>Z+I`:DST('T2m8';^
%O^)l^^T`Gf%&)c.pY%_*[DVW:/*\qBl>q18'-HQs6f^&`jD,g[-[*^H[a!D5aBs:ZT6m$!g7Q-'8j@Ar^Lk3/k0neAkC2j:I;7G`
%B'k$7!re)*`V*d;e`L8o?'pTY]UQtClfj;3OBYq-XRWR1$J.7KXYA5m*jSYi6]Jb\96'R5U#tfC2Bs"NT%tfI.PGRaD[4/upfH)B
%<@>$@*ZcFR**h!NXK,ic7Zt<)ke>_koGMs_Z"VoU:sn2$;QP':"U=ZCR6s:!]\-hc;tF2HKpM4%F[*`qjs;oR+],8(U8NTaE`7i9
%S)WojJl%GGeu.3`64.bW!*fliOA$N>E\:e@M0XQ2E9>p].Qa)K)oIJ;"^BS$F<dKho+mN4E[?\O(&g&Z).d"4)%#fSm;+QObWo-:
%l0?Po[3nJSZ')+Zok$#N:8+rRAuh)UlFIiP.)I]^`=AhahfO^:Pp3SX(VQR,ZMf;QLg6=$D[>D-q<M'E7[+XDjAg5i<AH("hPs&Q
%c5,WNf..O*;JG<'#3O#/T9H?]"auc*;]$kacs("f`YhM5/[h+T?D_]WaM&+PL'eZ.eO@,]>1jg@L+O4`\l-7P`,M&>@#m;"<&>J8
%F1fF@?DbD-&HOb)CV9uG\>Mo5T&Dbmf[/dEid;RO!'p#PFt,G)`@3jG=^k)kJmh8"iLYGcCbPqU^]ko/pHPXu)*TbT;_A9rhND]+
%Y&4L(UV[m#R%]_&`pP1?=1!aoA=Li)#u)S'rG:)KX*1M5>0og'FPuG?D7]XkKPQdD3[Fl#D!au0\Ru9qmnp_NCXUHSG4$i,R-^cO
%P4kJkjO^O`%J[iQ*@R^qiFT)9o4F-U;#,7a3i`PFK$UMQ,]5p1S1s!S?f/ii'+YcPXf>K52bae2N+ikSe)k0B]:O.G\Uc&'F[uNd
%Caac>-'QK-eRf\tQoAUFJX)P,#G7Zq7*Q!=\9(<NlID,@^nQjr5tp,)/7eGX!6IE2>hR19D`M:=#jjb(3`mK?".L*&]2*M%YmBG6
%-(&/1Y6U/Fd)0*.$&"8R6GtX7Ku?A8]#n5!$$S.eJ_4R]F0FJ1&^>4GA/+jH[=`t)1$?bFgJ^)gl3C^b"+3ho+l#Q"3ibVq0VaI(
%:o'.GE5pKC^]S$.2TCZJ>>m]hoiDrR1[uG!0.'Q9.VIkR<D8V$Pa`>c@2.D5&YsP*+EI&K.YY#j%5bK['WaDOEE@LEH)e;SA_cca
%:nJ0Zmr@NXa@l_.Q=qH8pf$5mEB'lb%3W+AM[H>@5j%/>_Da.ZDPD:%`j9^'-Op)>\jUV6:M>G:d$+>0p5tQ7*R'spdQ1fXGc7Ld
%o,b_YI%nf9Bb)!+(+ue<K@8'hMVqmjm./F(CqAp`rJ;T#Y]pRG9nVikU8LN.]h2_/g4+6"HXQq7"GaufQbiG/lcn]^[;rG?"l5se
%iJ=VSYH\Zjib?MQ7STEI9<l:]phc,Ab3lDFDGrl=+`e\P9K5hB?<F\1EN:aD>HueLe,Jk#a]+OqQhO%L+%5f0XfWROWKl&I^lDVR
%#YCE-']k^I9teJ1dc=&mk)2n&n5]^>`B':P8f!?Ypr_$e`[bn\+-$t"H*0@tJR'qKmf"2c6&UNB?52.m@ORVCP"BIE0=C%3.c2@K
%Q01u/g;@+BW=+\<VBtZ0QZ?W6B(>D+h1Q:S*^e?^<s2`Yfs"I_)l]o2Q4[gZ9AZ:"Z<%YqS&7qC0)X=jI0kh4a,+'6H]rG[F/B%Q
%5^R_/H$;I4&u5D5p6P7n>i<J1pS\MMJAs%/<<TE:dn6h+(XVE-o:p(V./SsE7`$/t;hqD=OH'!_Z]g2K+',P"#Ah]u9`)(8jcCA,
%"6VCB^Ugkjl?O4Ypg*>"YZq$M0&EqpkqJ[Kj&S*>.iN=65`-/s"rnq)YPf<o,GfSIhfjpnh9MM!4_N%.Ne+0/SC#*KCgAFt%&-b-
%A?<*GD<R]c3*WT6fu4<.#MbJC>-XVioY"Osf5=?-XOEWI0SFdG7l]bl`+&A>altdgB`Xr//aYu#h$r6*Vg,e;`POPkV)T=?<O<eh
%0CVd9[P5aEUMS'cY2NUgY_t,j+WU-K!YVhb9^aME6QK*%mb/pa7W[E/'<Raj/KI(brt3Q48Q*h`N5hIrYPgu_Ooo9-blZ\MAk$6B
%o`E`.l]_5GRmVaOX)afI7At;E+X#7\`=$!\YTqZGaD&8@1U0D1S=':pCbL.fCl\Zm7K\dA1.pl/lWW"u'h0+9OXA82Vq?EblC*1k
%FQoLep+MC^1c(Jl\Od9%27sE\GKNu/XUckbXHu]Z&XA$k8@mK79n+2Cmb*Y.*n.5g0P\fe8k;FSM/@$?,%ngRA6Tf.ct=;Y]j=lu
%.12%g6c,;B,[Sk6K)ZTk%m$!BlosJGYQf[84u18SbN)HFp\^L(g0/Fr*\Z)_/.5/6jLr/f=!Zb[aTs%>ch<O_W283"pJsJ[_k'mD
%6t'bif>I@d%hWAV8!50e2%Kdd0.;$TijuZ,I([6Pc>_UO#tD/P\bDtFmTJW-IM/,+hO!P/'8_U^Y8!2rT#\d@/7DNL'IJ0tAYeqi
%NPaAtMk<1"H>Jb)j$afWNDtO!FF<,Tf^g27*j0\5Uk-4j2u3(^HPP.gWVFR&\X9P(k-HKccB'M"/F(jf8ra`+09G.=66(X$B_cV6
%#T$5VacXstI%cITB?Dd.'gK#<:0n763AQkRUn.+c_N:V>;QA+hMYWfQA#="&*8V=PNnMn#2S[u2R*hZ&+G5;-Og7mp%/82Vfu-h>
%3]b"PnTWkRIf8<Iql_)+J%C")jlTcV^ZV53d_#>"Df>XS_qR,ZIoq9jrnMu#rmOZPGJ?7&Ie1ek]_h$NLPNW-hL5=tiUQ<)%q"c(
%rGZiPl-nh!G@)Hk[JoLS_rJY$YFcmYDSH&/o7)ScU!!\t^&.d^IsV"S^ApCN6i~>
%AI9_PrivateDataEnd
